{
    "data": {
        "tracks": [
            {
                "id": "b97fd4d87a816c761a674af1b5391ef1",
                "title": "Learn Python 2",
                "slug": "learn-python",
                "created_at": "2018-04-30T18:13:35Z",
                "last_modified_at": "2022-06-30T15:55:25Z",
                "published": true,
                "completion_message": null,
                "short_description": "Learn the basics of the world's fastest growing and most popular programming language used by software engineers, analysts, data scientists, and machine learning engineers alike.",
                "long_description": "## Why Learn Python?\nPython is a general-purpose, versatile and popular programming language. It's great as a first language because it is concise and easy to read, and it is also a good language to have in any programmer's stack as it can be used for everything from web development to software development and scientific applications.\n\n## Take-Away Skills:\nThis course is a great introduction to both fundamental programming concepts and the Python programming language. By the end, you'll be comfortable programming in Python and taking your skills off the Codecademy platform and onto your own computer.",
                "alert_description": "New and Improved! Check out the new Python 3 course for Codecademy's most up-to-date Python curriculum.",
                "alert_type": "General",
                "alert_cta": "View Now",
                "alert_cta_destination": "/learn/learn-python-3",
                "partner_logo": null,
                "partner_url": null,
                "partner_tagline": null,
                "lesson_count": 20,
                "category_ids": [
                    "5f516c09d169730013b1d567",
                    "5ef4b138dd98a830e8f7734f",
                    "5ef4b135dd98a830e8f7733a",
                    "5ef4b137dd98a830e8f7733e",
                    "5ef4b138dd98a830e8f7734b"
                ],
                "difficulty": "Beginner",
                "module_ids": [
                    "491c9b96339dae98d4b66f1dc0d852d2",
                    "93e0d2d4089ca9e9aa187788b4f27f42",
                    "a3a43af69f6511c137f78a2eb46ba35b",
                    "a70e876cb87aacad2b8148f30c6ca731",
                    "27c13fa5fe2c718a318c60bd4a6d9a10",
                    "f1e7316ec589b944c18e89c7fc466616",
                    "a8cc77c1b384d2ff33d342d3cb62b50a",
                    "e050dfdb98630686b8104d86a8280883",
                    "b7e7d77a958c626034a28ecd242bca51",
                    "c487407722b98f85daea94e51e81659a",
                    "b8eabcacafe910def32b0621dc59e6d8",
                    "b39d83a0351b60e13235807799135d5a"
                ],
                "modules": [
                    {
                        "id": "491c9b96339dae98d4b66f1dc0d852d2",
                        "title": "Python Syntax",
                        "slug": "learn-python-python-syntax-u-6",
                        "created_at": "2018-04-30T18:13:34Z",
                        "last_modified_at": "2018-08-15T01:17:28Z",
                        "published": true,
                        "short_description": "In this course, learn about the syntax of the Python programming language!",
                        "long_description": "In this course we'll learn about the syntax of the Python programming language! We will go over fundamental commands that store variables, print messages, and perform mathematical operations. Python is a general-purpose, object-oriented interpreted language you can use for countless standalone projects or scripting applications.",
                        "content_item_ids": [
                            "e1e8e3be8feeebe9a269b22083d20231",
                            "c619476ba6cc27a3a3db574f753849f6",
                            "8250f577e4259d8b891bba1ae26575f9",
                            "02322be3e27948089ea042a86a9ada3d"
                        ]
                    },
                    {
                        "id": "93e0d2d4089ca9e9aa187788b4f27f42",
                        "title": "Strings and Console Output",
                        "slug": "learn-python-strings-and-console-output-u-4",
                        "created_at": "2018-04-30T18:13:34Z",
                        "last_modified_at": "2018-08-15T01:27:43Z",
                        "published": true,
                        "short_description": "This course will introduce you to strings and console output in Python.",
                        "long_description": "This course will introduce you to strings and console output in Python, including creating string literals, calling a variety of string methods, and using the \"print\" keyword.",
                        "content_item_ids": [
                            "10b87db4d47c3fec50800375079e27dd",
                            "93a25164955e80838f78d66c19d0893b",
                            "d1a033e571acac487c6dc0830f0c2a9e",
                            "41700588e64fda7e07b6063f42f7be03"
                        ]
                    },
                    {
                        "id": "a3a43af69f6511c137f78a2eb46ba35b",
                        "title": "Conditionals and Control Flow",
                        "slug": "learn-python-conditionals-and-control-flow-u-4",
                        "created_at": "2018-04-30T18:13:34Z",
                        "last_modified_at": "2018-06-11T20:43:17Z",
                        "published": true,
                        "short_description": "Learn how to use conditionals and control flow to create programs that generate different outcomes.  ",
                        "long_description": "In this course, we will learn how to use conditionals and control flow. In the first lesson, we will create programs that generate different outcomes based on user input! In the second lesson, we'll put together all of the Python skills we've learned so far including string manipulation and branching. ",
                        "content_item_ids": [
                            "7d6fbc234dfb599a6ea3c9ab875bdd6e",
                            "48be38c329c6dc42640077df5b357bdd",
                            "52cae8a53cd75d37b65445f1ce37f356",
                            "d1f188876b34fd01b179cfa8d16fea8b"
                        ]
                    },
                    {
                        "id": "a70e876cb87aacad2b8148f30c6ca731",
                        "title": "Functions",
                        "slug": "learn-python-functions-u-4",
                        "created_at": "2018-04-30T18:13:34Z",
                        "last_modified_at": "2018-05-07T19:21:27Z",
                        "published": true,
                        "short_description": "Learn how to create and use functions in Python!",
                        "long_description": "Functions are important tools for abstraction in your code. Learn how to create and use them in Python!\n",
                        "content_item_ids": [
                            "2f7fa4f74c8d1f3a520813c563b1816f",
                            "2d4fb6746be8db0605555e95b7d7457f",
                            "0e0b97415ab7bc4a061cf703dff8d93a",
                            "789f0f7e671ef98aa96372129896fd8e"
                        ]
                    },
                    {
                        "id": "27c13fa5fe2c718a318c60bd4a6d9a10",
                        "title": "Lists \u0026 Dictionaries",
                        "slug": "learn-python-lists--dictionaries-u-3",
                        "created_at": "2018-04-30T18:13:34Z",
                        "last_modified_at": "2018-08-15T01:51:04Z",
                        "published": true,
                        "short_description": "In this course, you will learn about the data structures lists and dictionaries.",
                        "long_description": "### Prerequisites We recommend that you complete \u003ca href=\"https://www.codecademy.com/courses/learn-python/lessons/python-syntax/exercises/print-statements\"\u003eLearn Python: Syntax \u003c/a\u003e before completing this course. ### Course Outcomes In this course, you will learn how to create _lists_, or ordered groups of objects in Python. You will also learn how to ### Why Learn Python Lists? In programming, lists let us organize and order information. A list might tell us which files we need to open to get data for a project, or which words we want to search for in a document. In Data Science, lists often contain the data that we want to process, such as a collection of numbers or a group of responses to a question.",
                        "content_item_ids": [
                            "20751a9a4528015a2a53626056e3d0f7",
                            "2bdba3453111e7c775ea66e85e4fde42",
                            "15b4c241174921845eec4a54893e6e76",
                            "897ccb4ecdeee9c54c4760514f8da65e"
                        ]
                    },
                    {
                        "id": "f1e7316ec589b944c18e89c7fc466616",
                        "title": "Student Becomes the Teacher",
                        "slug": "learn-python-student-becomes-the-teacher-u-2",
                        "created_at": "2018-04-30T18:13:34Z",
                        "last_modified_at": "2018-08-15T02:02:05Z",
                        "published": true,
                        "short_description": "Use what you've learned so far to manage your own class.",
                        "long_description": "Use what you've learned so far about Python to complete a project where you write programs to manage your own class.",
                        "content_item_ids": [
                            "0804bb91e51ecda5137d88413d8dfff6"
                        ]
                    },
                    {
                        "id": "a8cc77c1b384d2ff33d342d3cb62b50a",
                        "title": "Lists and Functions",
                        "slug": "learn-python-lists-and-functions-u",
                        "created_at": "2018-04-30T18:13:34Z",
                        "last_modified_at": "2018-08-15T02:05:48Z",
                        "published": true,
                        "short_description": "Now that you've learned about lists, let's turbo-charge them with functions.",
                        "long_description": "In this course, learn how to combine lists with functions and build a Battleship project. ",
                        "content_item_ids": [
                            "53cffc0b10bbf242bd8063328c674beb",
                            "2dcc8d80c85678f66df3786f66ce737b",
                            "6c33ac21a0783d024a27744fa333f256"
                        ]
                    },
                    {
                        "id": "e050dfdb98630686b8104d86a8280883",
                        "title": "Loops",
                        "slug": "learn-python-loops-u",
                        "created_at": "2018-04-30T18:13:34Z",
                        "last_modified_at": "2018-08-15T02:08:07Z",
                        "published": true,
                        "short_description": "Learn about 'while' and 'for' loops in Python.",
                        "long_description": "This lesson will teach you how to iterate through items in a list by using for loops and while loops. You will also learn how to create lists from loops! By the end of the lesson, you will know how to set up a loop to best solve your iteration problem of choice. You will get lots of practice with making different loops, so that you won't forget the syntax of this very common coding paradigm.",
                        "content_item_ids": [
                            "15cb7060781fa45926ce732f2fc06ea1",
                            "0f2fd8035e9d2d284a24366a4bb094a9",
                            "63e0066552da33362f33af0398724871",
                            "a543dda4405b5d754b5acabf1028ebc6"
                        ]
                    },
                    {
                        "id": "b7e7d77a958c626034a28ecd242bca51",
                        "title": "Exam Statistics",
                        "slug": "learn-python-exam-statistics-u",
                        "created_at": "2018-04-30T18:13:34Z",
                        "last_modified_at": "2018-08-15T02:15:35Z",
                        "published": true,
                        "short_description": "In this project, we'll write a program to compute test scores.",
                        "long_description": "Your students just took their first test. It's time to see how everyone did. Let's write a program to compute the mean, variance, and standard deviation of the test scores.",
                        "content_item_ids": [
                            "617555536da3f2ef512d86fef98b6312"
                        ]
                    },
                    {
                        "id": "c487407722b98f85daea94e51e81659a",
                        "title": "Advanced Topics in Python",
                        "slug": "learn-python-advanced-topics-in-python-u",
                        "created_at": "2018-04-30T18:13:34Z",
                        "last_modified_at": "2018-08-15T02:17:05Z",
                        "published": true,
                        "short_description": "Learn some of the more complex aspects of Python, including data structures, list comprehensions, list slicing, and lambda expressions.",
                        "long_description": "In this lesson, we'll cover some of the more complex aspects of Python, including iterating over data structures, list comprehensions, list slicing, and lambda expressions.",
                        "content_item_ids": [
                            "6eed0e389bb7daf8bad6d35e262523aa",
                            "42a832e6fc254a11dc3620877b03ccc0",
                            "7e202b6204f4a29f4485f849aa5743d5"
                        ]
                    },
                    {
                        "id": "b8eabcacafe910def32b0621dc59e6d8",
                        "title": "Introduction to Classes",
                        "slug": "learn-python-introduction-to-classes-u",
                        "created_at": "2018-04-30T18:13:34Z",
                        "last_modified_at": "2018-05-18T20:52:09Z",
                        "published": true,
                        "short_description": "Learn what classes are, why they're important, and how to use them effectively.",
                        "long_description": "Classes are a crucial part of object-oriented programming (OOP). In this lesson, we'll explain what classes are, why they're important, and how to use them effectively.",
                        "content_item_ids": [
                            "181097d18a5315cb6b69bf674ebffb50",
                            "7f25929af733c51caa8564b127768c82",
                            "8a8add0c9853f626625817e46ccaac21",
                            "932b515d8de0e0fd4edcc557db7d392f"
                        ]
                    },
                    {
                        "id": "b39d83a0351b60e13235807799135d5a",
                        "title": "File Input and Output",
                        "slug": "learn-python-file-input-and-output-u",
                        "created_at": "2018-04-30T18:13:35Z",
                        "last_modified_at": "2018-08-15T02:21:03Z",
                        "published": true,
                        "short_description": "Apply what you've learned about Python to a real-world application.",
                        "long_description": "Now that you understand Python syntax and have been introduced to some Python best practices, let's apply what you've learned to a real-world application: writing data to a file.",
                        "content_item_ids": [
                            "2dc703191f241e2472ba99939d44918e",
                            "78e2e5cf2edeea9f93714eea1153ef15",
                            "7217d539f1437045df9cadd5100631b4"
                        ]
                    }
                ],
                "content_items": [
                    {
                        "id": "02322be3e27948089ea042a86a9ada3d",
                        "description": "Learn about the different features Codecademy has to offer!",
                        "is_deprecated": null,
                        "is_free": true,
                        "published": true,
                        "slug": "make-the-most-of-your-codecademy-membership",
                        "title": "Make the Most of Your Codecademy Membership",
                        "time": null,
                        "type": "article",
                        "body": "Codecademy has helped [tens of millions of people](https://www.codecademy.com/learner-stories) to learn to code, everything from `hello world` to getting new tech jobs, but when it comes down to it, you get out what you put in.  If you want to be best set up for success, this guide is for you.\n\n## Valuable Resources \n\nThere are hundreds of hours of free content on Codecademy, and thousands of hours of Pro material; but no matter your membership level, the key to success is learning intelligently.  If you build the habits to use our features, it will be easier for you to master technical skills.\n\n### Mobile App\n\nKeep practicing and stay sharp as you go with our mobile app on [iOS](https://itunes.apple.com/us/app/codecademy-pro/id1376029326?ls=1\u0026mt=8) and [Android](https://play.google.com/store/apps/details?id=com.ryzac.codecademygo).\n\n### Workspaces\n\n[Workspaces](https://www.codecademy.com/pages/workspaces) allow learners to work in their own integrated development environment (IDE) right inside Codecademy.  Build or try whatever you want with these unguided sandboxes, share your code, or keep it private.  Not sure what to make?  Grab code from your coursework and use it as a template.\n\n![Workspace Image](https://www.codecademy.com/resources/blog/content/images/size/w1600/2021/06/9-tips-to-help-you-ace-a-whiteboard-interview.png)\n\n### Cheatsheets\n\nCoding is less about memorization and more about understanding principles; cheatsheets help you quickly refresh your memory and get back to work.  You can find them linked in lessons, or head to their [homepage](https://www.codecademy.com/resources/cheatsheets/all) to find them all, broken down by the course section in which you learned them.\n\n### Docs\nCheatsheets are a handy companion for consuming coursework, but when coding in the real world, programmers need documentation.  With [Docs](https://www.codecademy.com/resources/docs), you have an entirely open-source reference material to cover far more than a course can.\n\n![Gif of documentation](https://www.codecademy.com/resources/blog/content/images/2021/10/Introducing-Docs---Your-New-Go-To-Resource-for-All-Things-Programming.gif)\n\n\n### Code Challenges\n\nWith technical interviews (and coding in general), practice makes perfect.  Now, you can practice real [code challenges](https://www.codecademy.com/code-challenges) from actual interviews to see how your skills stack up, or just solve them for fun.  If you get stuck, we’ll point you to what you still need to learn.\n\n\n### Learn What to Learn\n\nNot certain what language to pick up or what career path to choose?  Flick through the [Learn What to Learn course](https://www.codecademy.com/learn/learn-what-to-learn), where we've consolidated the best resources to help you make a choice with confidence.  An hour of planning now could save you days of wasted effort later.\n\nThere is also an excellent [forum post](https://discuss.codecademy.com/t/guide-essential-things-to-know-about-coding-from-day-one/394538) by Galina, one of our curriculum developers, that discusses how to best get started when beginning your coding journey.\n\n### Community\nLearning to code is challenging, but it's easier if you can team up.  Ask questions, stay connected, and find motivation with multiple communal experiences through Codecademy:\n- [Community forum](https://discuss.codecademy.com/): ask and answer questions about anything on Codecademy.\n- [Discord](https://discord.com/invite/codecademy): chat in real-time with other learners across the globe.\n- [Chapters](https://community.codecademy.com/): find like-minded people in your area and learn to code together.  There are even multiple virtual-first groups to join if you don't find one nearby.\n- [Facebook group](https://www.facebook.com/groups/codecademy.community/): discuss the broader world of coding with tens of thousands of other learners.\n- [30-Day Challenge](https://www.codecademy.com/30daychallenge): join others in a sprint to make progress and make learning a habit.\n\n### Video Library\n\nNeed a break from the IDE but still want to be productive?  Watch hundreds of educational and motivational video content on everything from basic coding concepts to career advice, all on-topic and [on-platform](https://www.codecademy.com/resources/videos).\n\n## Pro Features\nIf you want to supercharge your learning, Pro's the thing for you - here's how it can help.\n\n![Pro Features Lock](https://www.codecademy.com/resources/blog/content/images/size/w1600/2021/01/codecademy-pro-features.png)\n\n### Paths\n[Skill Paths](https://www.codecademy.com/catalog/all) and [Career Paths](https://www.codecademy.com/learn/paths/new) are step-by-step roadmaps that take you through what you need to learn a specific skill or transition to a specific career in tech. They’ll tell you what to learn and in what order, cutting out the guesswork and to the chase.  Our Career Paths cover everything that you'll find in a $15,000 boot camp curriculum, plus more, and you can team up to tackle them with a [cohort group](https://www.codecademy.com/resources/blog/career-path-groups/).\n\n![Images of different paths](https://www.codecademy.com/resources/blog/content/images/size/w1600/2021/10/Breaking-Down-Your-Journey-To-Your-Dream-Tech-Job-In-4-Steps.png)\n\n### Projects, Challenge Projects, and Portfolio Projects\n\nAs you learn, you’ll work on guided projects to put the things you’re learning to use.  You'll find a variety of project types. Some offer step-by-step guidance while others offer more of a challenge by only describing the final outcome of the project.  If you take a Path, you’ll build your own [Portfolio Projects](https://www.codecademy.com/resources/blog/portfolio-projects-in-career-paths/) as well, designed to simulate professional coding tasks. The solutions to these portfolio projects will be unique to you!  Check out all the projects available to you via the [Projects Library](https://www.codecademy.com/projects).\n\n![Gif of a kanban project](https://static-assets.codecademy.com/Paths/computer-science-career-path/misc/kanban.gif)\n\n### Interview prep\nIf you’re taking one of our Career Paths, you’ll find interview prep essentials built-in. Learn interview techniques to prepare for technical interviews, including algorithm and data structure practice.  Go even further with [dedicated skill paths](https://www.codecademy.com/catalog/subject/interview-prep) on acing the interview across a range of languages and disciplines.\n\n### Practice \u0026 Review\nWith your Pro membership, you’ll find it easier to brush up on what you've learned.  Choose for yourself what to practice with links from each module of your coursework. Or let us take the guesswork out with smart practice.  Click the practice session link from syllabi and AI will prioritize concepts for you by using spaced repetition — a [scientifically proven](https://www.codecademy.com/article/spaced-repetition) way of helping you memorize new ideas.\n\n![Gif showing practice example](https://static-assets.codecademy.com/Paths/computer-science-career-path/misc/Practice.gif)\n\n### Quizzes\n\nTest yourself as you make your way through a Path or course. Quizzes help you retain all the things you’re learning — plus, they’ll help you feel confident that you’re mastering the material.\n\n### Certificates\nWhen you complete a Pro course, you’ll earn a certificate. You can share it on your resume or your LinkedIn profile to showcase your skills or prepare for your job search.\n\n![Example certificate](https://static-assets.codecademy.com/Paths/computer-science-career-path/misc/Certificate_example.png)\n\n## Conclusion\n\nIf you made it this far, you're a highly motivated learner - we're excited to see how far you'll go, and hope some of the features you learned about today help.  Please take a moment to [answer two quick questions](https://codecademyready.typeform.com/to/duBrBSFC) for feedback on this resource.  Happy coding!"
                    },
                    {
                        "id": "e1e8e3be8feeebe9a269b22083d20231",
                        "description": "This lesson will introduce you to Python, a general-purpose, object-oriented interpreted language you can use for countless standalone projects or scripting applications.",
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "python-syntax",
                        "title": "Python Syntax",
                        "time": 103,
                        "type": "lesson",
                        "published_exercise_ids": [
                            "2979793b4375643a23b7359c5844c472",
                            "610d2e4c821f849abdf914b0d231e83f",
                            "c82de104ab1ed65d0a8dacbe7b1d2a4f",
                            "b9701aa3200690d959b4c6d8ab853599",
                            "e6976f61f5ca0b0b31072d73a2dc2117",
                            "fe8901d11d3b76ecb9b43c79467b2d67",
                            "447cc021128e7941c3f6a380ea811497",
                            "53c95623cb2f4b3e6177dddb8238a62b",
                            "18adc26d22aa369e5767856e4fd6512f",
                            "a6eacd51821d639b297e18588469f26a",
                            "5dfbd7ddef4dc45071fb9a4e373c1c37",
                            "8bced4dffcab2fbc4ef59aee980315a4",
                            "ba6df750aa648f97a20182d8a2c1f92a",
                            "1f92539f7fc54a5e6d4a8f807fbf43d0"
                        ],
                        "exercise_ids": [
                            "2979793b4375643a23b7359c5844c472",
                            "610d2e4c821f849abdf914b0d231e83f",
                            "c82de104ab1ed65d0a8dacbe7b1d2a4f",
                            "b9701aa3200690d959b4c6d8ab853599",
                            "e6976f61f5ca0b0b31072d73a2dc2117",
                            "fe8901d11d3b76ecb9b43c79467b2d67",
                            "447cc021128e7941c3f6a380ea811497",
                            "53c95623cb2f4b3e6177dddb8238a62b",
                            "18adc26d22aa369e5767856e4fd6512f",
                            "a6eacd51821d639b297e18588469f26a",
                            "5dfbd7ddef4dc45071fb9a4e373c1c37",
                            "8bced4dffcab2fbc4ef59aee980315a4",
                            "ba6df750aa648f97a20182d8a2c1f92a",
                            "1f92539f7fc54a5e6d4a8f807fbf43d0"
                        ]
                    },
                    {
                        "id": "c619476ba6cc27a3a3db574f753849f6",
                        "description": "It's time to build fluency in Python fundamentals. In this next Pro Project, we're going to practice syntax in Python so you can hone your skills and feel confident taking them to the real world.\nWhy? You've done a great job so far on your quest to learn Python. Let's build something to solidify your newfound knowledge.\nWhat's next? Calculator, tipping, more Python. You got this! ",
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "tip-calculator-project",
                        "title": "Tip Calculator",
                        "time": 21,
                        "type": "project",
                        "standalone": false,
                        "project_information": {
                            "ein_config": {
                                "extensions": {
                                    "python": {
                                        "cmds": [
                                            "python {{ .fileName }}"
                                        ]
                                    },
                                    "py2": {
                                        "cmds": [
                                            "python {{ .fileName }}"
                                        ]
                                    },
                                    "python2": {
                                        "cmds": [
                                            "python {{ .fileName }}"
                                        ]
                                    }
                                },
                                "container_type": "python",
                                "server": "http"
                            },
                            "download_path": null,
                            "objective": "Now that you have completed the lesson on Python syntax, it's time to practice your newfound skills. In this project, you will create a simple calculator that determines the price of a meal after tax and tip.\n\nIf you get stuck during this project or would like to see an experienced developer work through it, click \"**Get Unstuck**\" to see a **project walkthrough video**.",
                            "preview_url": null,
                            "thumbnail_url": "https://content.codecademy.com/projects/project_thumbnails/python/img_python_tipCalculator.jpg",
                            "video_url": "https://www.youtube.com/watch?v=fwOsWomR7Oo",
                            "workspace": {
                                "id": "5c3490481d19727d7ef7de53",
                                "slug": "tip_calculator",
                                "type": "python"
                            },
                            "self_assessments": [
                                {
                                    "heading": "Declare your variables",
                                    "tasks": [
                                        {
                                            "hint": "We can assign a value to a variable using this syntax:\n```py\nvariable_name = value\n```\nThe value `44.50` is a float since it has a decimal point. Don't include the `$`, as Python will be unable to interpret that sign as a float.",
                                            "task_key": "0_0_09591656682809404",
                                            "text": "You just finished eating at a restaurant, and received this bill:\n\nCost of meal: $44.50\n\nRestaurant tax: 6.75%\n\nTip: 15%\n\nYou'll apply the tip to the overall cost of the meal (including tax). First, declare a variable called `meal` and assign it the value `44.50`."
                                        },
                                        {
                                            "hint": "To get the decimal form of 6.75%, you should divide `6.75` by `100`, which equals `0.0675`.",
                                            "task_key": "0_1_027328009186291125",
                                            "text": "Let's create a variable for the tax percentage.\n\nThe tax on your receipt is 6.75%. You'll have to divide `6.75` by `100` in order to get the decimal form of the percentage.\n\nCreate the variable `tax` and set it equal to the decimal value of 6.75%."
                                        },
                                        {
                                            "hint": null,
                                            "task_key": "0_2_047535447465084824",
                                            "text": "You received good service, so you'd like to leave a 15% tip on top of the cost of the meal, including tax.\n\nBefore we compute the tip amount for your bill, let's set a variable for the tip percentage. We need to get the decimal form of the tip, so we divide `15.0` by `100`.\n\nStore this value in a variable called `tip`."
                                        }
                                    ]
                                },
                                {
                                    "heading": "Do some calculations",
                                    "tasks": [
                                        {
                                            "hint": "You can assign a variable based on its current value:\n\n```py\nthing_to_update = thing_to_update + thing_to_update*10\n```",
                                            "task_key": "1_0_05421836621842842",
                                            "text": "We have the three variables we need to perform our calculation, and we know some arithmetic operators that can help us out.\n\nWe saw in Lesson 1 that we can reassign variables. We could say:\n\n```py\ncash_in_wallet = 7\n```\n\nthen later change our minds and say:\n\n```py\ncash_in_wallet = 0\n```\n\nReassign `meal` to the value of itself + itself * `tax`.\n\nWe're only calculating the cost of meal and tax here. We will add tip in the next step."
                                        },
                                        {
                                            "hint": null,
                                            "task_key": "1_1_07577736177738907",
                                            "text": "Now that `meal` has the cost of the food plus tax, create a variable `total` that is equal to `meal + meal * tip`."
                                        },
                                        {
                                            "hint": null,
                                            "task_key": "1_2_09360162574245687",
                                            "text": "Print out the value of `total`.\n\nCongratulations! You have calculated the value of your bill!"
                                        }
                                    ]
                                }
                            ],
                            "components": [
                                {
                                    "id": "5c3490481d19727d7ef7de51",
                                    "type": "PersistentCodeEditor",
                                    "files": [
                                        "script.py"
                                    ],
                                    "navigator_disabled": null,
                                    "no_run_button": null
                                },
                                {
                                    "id": "5c3490481d19727d7ef7de52",
                                    "type": "OutputTerminal"
                                }
                            ]
                        }
                    },
                    {
                        "id": "8250f577e4259d8b891bba1ae26575f9",
                        "description": null,
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "learn-python-python-unit-1",
                        "title": "Python Syntax",
                        "time": 6,
                        "type": "quiz",
                        "assessment_ids": [
                            "5b1da4741d176d7bdd04f91a",
                            "5b1da4741d176d7bdd04f91f",
                            "5b1da4741d176d7bdd04f924",
                            "5b1da4741d176d7bdd04f92a",
                            "5b1da4741d176d7bdd04f92f",
                            "5b1da4741d176d7bdd04f935"
                        ],
                        "assessments": [
                            {
                                "id": "5b1da4741d176d7bdd04f91a",
                                "type": "multiple_choice",
                                "prompt": "What is Python?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "a programming language",
                                        "reason": null
                                    },
                                    {
                                        "text": "a reptile",
                                        "reason": "zzz"
                                    },
                                    {
                                        "text": "a markup language",
                                        "reason": null
                                    },
                                    {
                                        "text": "a spoken language",
                                        "reason": null
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": null
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f91f",
                                "type": "multiple_choice",
                                "prompt": "What is the correct way to output a string to the console in Python?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`print \"The string to be printed\"`",
                                        "reason": "Correct! `print` simply displays your code in the console."
                                    },
                                    {
                                        "text": "`console.log \"The string to be printed\"`",
                                        "reason": "Oops. That's another language (JavaScript)!"
                                    },
                                    {
                                        "text": "`\"\"\" The string to be printed \"\"\"`",
                                        "reason": "Triple double quotes `\"\"\"` are used as multi-line comments."
                                    },
                                    {
                                        "text": "`# The string to be printed`",
                                        "reason": "The `#` sign makes it a single line comment."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": null
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f924",
                                "type": "multiple_choice",
                                "prompt": "What is this variable equal to?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "3",
                                        "reason": "Correct! 24 ÷ 8 = 3"
                                    },
                                    {
                                        "text": "16",
                                        "reason": "Oops. 24 ÷ 8 = 3"
                                    },
                                    {
                                        "text": "32",
                                        "reason": "Oops. 24 ÷ 8 = 3"
                                    },
                                    {
                                        "text": "0",
                                        "reason": "Oops. 24 ÷ 8 = 3"
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "division = 24 / 8\n"
                                }
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f92a",
                                "type": "multiple_choice",
                                "prompt": "Which one is a single line comment in Python?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`# I am a comment`",
                                        "reason": "Correct! The `#` sign is used to start a single line comment in Python."
                                    },
                                    {
                                        "text": "`\"Pick me, I am a comment\"`",
                                        "reason": "Oops, that's a string because it's enclosed by double quotes `\"\"`."
                                    },
                                    {
                                        "text": "`\"\"\" This is a comment \"\"\"`",
                                        "reason": "Oops, that's a multi-line comment."
                                    },
                                    {
                                        "text": "`// No, I am a comment`",
                                        "reason": "Oops, that's a single line comment in other languages (C, C++, Java)."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": null
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f92f",
                                "type": "multiple_choice",
                                "prompt": "What does the `str()` function do?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "It converts its content into a string.",
                                        "reason": "Correct! The `str()` method turns non-strings into strings."
                                    },
                                    {
                                        "text": "It measures the length of a string.",
                                        "reason": "Oops, that is something we will learn later called `len()`."
                                    },
                                    {
                                        "text": "It capitalizes all the characters in the string.",
                                        "reason": "Oops, that is something we will learn later called `upper()`."
                                    },
                                    {
                                        "text": "It gets rid of all the capitalization in your string.",
                                        "reason": "Oops, that is something we will learn later called `lower()`."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "str(3.14)"
                                }
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f935",
                                "type": "multiple_choice",
                                "prompt": "What is the data type of `x`?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "boolean",
                                        "reason": "Correct! Boolean values can hold either `True` or `False`."
                                    },
                                    {
                                        "text": "integer",
                                        "reason": "Oops, integers are numbers like `0`, `-2`, and `120`."
                                    },
                                    {
                                        "text": "floating point number",
                                        "reason": "Oops, floats are numbers like `2.0`, `3.14`, and `-20.50`."
                                    },
                                    {
                                        "text": "string",
                                        "reason": "Oops, strings are usually enclosed by double quotes `\"\"`."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "x = False"
                                }
                            }
                        ]
                    },
                    {
                        "id": "10b87db4d47c3fec50800375079e27dd",
                        "description": "This lesson will introduce you to strings and console output in Python, including creating string literals, calling a variety of string methods, and using the \"print\" keyword.",
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "strings--console-output",
                        "title": "Strings \u0026 Console Output",
                        "time": 61,
                        "type": "lesson",
                        "published_exercise_ids": [
                            "8924c7d8689f67bd0e606cbfcce716d8",
                            "1bf51e6b01565b19f38062db20dfdb28",
                            "435048458c5e62b827a0b0855e7aeaaa",
                            "f5deda4bef8da53312f57262ea2d3677",
                            "1826aa04b9f92e42333e48dd9e8e6031",
                            "59bcac2bcd26ce44af11da8087da3e93",
                            "857299d6360e434cc99ebf8c380816b9",
                            "10d53e8210d154adb4a84cf637036a03",
                            "b862762cb0fa97b5d4c61a41df39f3c7",
                            "6216c3f5018c63a32857ef5efa52d7f0",
                            "3fd80a623a4c3f8846d95486fee26bda",
                            "8c91210258fc1d6a38d563663a482b34",
                            "da7a8fd94e94b1370c9cf336a7dcdf76",
                            "69e26a7f109aa7942732e8bbe81d8f84",
                            "ca0d855e3206b6453976f6a1151c12e5",
                            "ba8e45a703b57f551454c5bd1ae0eaaf"
                        ],
                        "exercise_ids": [
                            "8924c7d8689f67bd0e606cbfcce716d8",
                            "1bf51e6b01565b19f38062db20dfdb28",
                            "435048458c5e62b827a0b0855e7aeaaa",
                            "f5deda4bef8da53312f57262ea2d3677",
                            "1826aa04b9f92e42333e48dd9e8e6031",
                            "59bcac2bcd26ce44af11da8087da3e93",
                            "857299d6360e434cc99ebf8c380816b9",
                            "10d53e8210d154adb4a84cf637036a03",
                            "b862762cb0fa97b5d4c61a41df39f3c7",
                            "6216c3f5018c63a32857ef5efa52d7f0",
                            "3fd80a623a4c3f8846d95486fee26bda",
                            "8c91210258fc1d6a38d563663a482b34",
                            "da7a8fd94e94b1370c9cf336a7dcdf76",
                            "69e26a7f109aa7942732e8bbe81d8f84",
                            "ca0d855e3206b6453976f6a1151c12e5",
                            "ba8e45a703b57f551454c5bd1ae0eaaf"
                        ]
                    },
                    {
                        "id": "93a25164955e80838f78d66c19d0893b",
                        "description": "This lesson is a follow up to Unit 2: Strings and Console input and will give you practice with the concepts introduced in that lesson.",
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "date-and-time",
                        "title": "Date and Time",
                        "time": 25,
                        "type": "lesson",
                        "published_exercise_ids": [
                            "1f297ac8f016bfc7f325119dce37eebb",
                            "af10c20bacc351d48c356d452ae44bd9",
                            "27bf2f9dfbe141cf86ab1ddb485d0064",
                            "a211cc0bb57f1594b9f736c9930e68f2",
                            "46536974c5188422b88358e8ae81bc75",
                            "06ea602c28429348047ae2ec8078300f"
                        ],
                        "exercise_ids": [
                            "1f297ac8f016bfc7f325119dce37eebb",
                            "af10c20bacc351d48c356d452ae44bd9",
                            "27bf2f9dfbe141cf86ab1ddb485d0064",
                            "a211cc0bb57f1594b9f736c9930e68f2",
                            "46536974c5188422b88358e8ae81bc75",
                            "06ea602c28429348047ae2ec8078300f"
                        ]
                    },
                    {
                        "id": "d1a033e571acac487c6dc0830f0c2a9e",
                        "description": "It's time to build fluency in Python fundamentals. In this next Pro Project, we're going to practice inputs and print in Python so you can hone your skills and feel confident taking them to the real world.\nWhy? Being able to take inputs and print results is a key part of programming.\nWhat's next? Mad Libs, user inputs, more Python. You got this! ",
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "madlibs-1",
                        "title": "Python Mad Libs",
                        "time": 39,
                        "type": "project",
                        "standalone": false,
                        "project_information": {
                            "ein_config": {
                                "extensions": {
                                    "python": {
                                        "cmds": [
                                            "python {{ .fileName }}"
                                        ]
                                    },
                                    "py2": {
                                        "cmds": [
                                            "python {{ .fileName }}"
                                        ]
                                    },
                                    "python2": {
                                        "cmds": [
                                            "python {{ .fileName }}"
                                        ]
                                    }
                                },
                                "container_type": "python",
                                "server": "http"
                            },
                            "download_path": null,
                            "objective": "In this project, we'll use Python to write a \u003ca href=\"https://en.wikipedia.org/wiki/Mad_Libs\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eMad Libs\u003c/a\u003e word game! Mad Libs have short stories with blank spaces that a player can fill in. The result is usually funny (or strange).\n\nMad Libs require:\n\n* A short story with blank spaces (asking for different types of words).\n* Words from the player to fill in those blanks.\n\n\"Roses are Red\" poem example:\n\n\u003cimg src=\"https://content.codecademy.com/courses/learn-python/madlibs.svg\" title=\"Mad Libs Example\" /\u003e\u003c/a\u003e\n\u003cp\u003e\n\nFor this project, we have provided the story, but it will be up to you to complete the following:\n\n1. Prompt the user for inputs.\n2. Print the story with the inputs in the right places.\n\nLet's begin!\n\nIf you get stuck during this project or would like to see an experienced developer work through it, click \"**Get Unstuck**\" to see a **project walkthrough video**.",
                            "preview_url": null,
                            "thumbnail_url": "https://content.codecademy.com/projects/project_thumbnails/python/img_python_madLibs.svg",
                            "video_url": "https://www.youtube.com/watch?v=zfM6zHF-jiU",
                            "workspace": {
                                "id": "5c34904a1d19727d7ef7ded3",
                                "slug": "python-ext-prj_mad-libs-v2",
                                "type": "python"
                            },
                            "self_assessments": [
                                {
                                    "heading": "Python Mad Libs",
                                    "tasks": [
                                        {
                                            "hint": "Multi-line comments look like this:\n\n```py\n\"\"\"\nThis program does\nthe following...\n\nAuthor: your-name\n\"\"\"\n```\n\nIt's helpful to let other programmers know what your program does when they are reading your code.",
                                            "task_key": "0_0",
                                            "text": "Begin by completing the multi-line comment that describes this program.\n\nThe `\"\"\"`s are already written."
                                        },
                                        {
                                            "hint": null,
                                            "task_key": "0_7",
                                            "text": "Take a look at the variable named `STORY`. It is set equal to a string that contains our story."
                                        },
                                        {
                                            "hint": "```py\nprint \"Mad Libs is starting!\"\n```\n\nRemember, you are playing two roles here: \n* the programmer\n* the user\n\nWhen you are writing the code, you are the programmer. However, you need to be constantly thinking from the users' point of view \u0026ndash; they are the ones who run your program.\n",
                                            "task_key": "0_1",
                                            "text": "Let's inform the user that the program is running. \n\nAfter the `STORY`, print a message to let the user know that Mad Libs has started."
                                        },
                                        {
                                            "hint": "`raw_input()` presents a string to the user, gets input from the user and returns the data in a string.\n\nHere, the code is asking the user to enter a name, and saving whatever they enter into the variable `name`.",
                                            "task_key": "0_2",
                                            "text": "The story that we have provided is going to need a main character. \n\nAsk the user to input a name, and store the user's input in a variable: \n\n```py\nname = raw_input(\"Enter a name: \")\n```\n\nNote: It's \u003ca href=\"https://www.python.org/dev/peps/pep-0008/#prescriptive-naming-conventions\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ecommon practice\u003c/a\u003e to use short, but descriptive variable names."
                                        },
                                        {
                                            "hint": "Storing three different inputs into three different variables:\n\n```py\nadj1 = raw_input(\"Enter an adjective: \")\nadj2 = raw_input(\"Enter a second adjective: \")\nadj3 = raw_input(\"Enter one more adjective: \")\n```\n\nHere, we used the variable names `adj1`, `adj2`, and `adj3`.",
                                            "task_key": "0_3",
                                            "text": "You will need to ask the user for three \u003ca href=\"https://en.wikipedia.org/wiki/Adjective\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eadjectives\u003c/a\u003e. \n\nAsk the user for input three separate times. Store each adjective that the user inputs into descriptive variables as you did when you asked the user for a name."
                                        },
                                        {
                                            "hint": "Executing this command in the terminal tells the computer to run the **Madlibs.py** program.\n\nWhen your program finishes, it should look something like:\n\n```bash\n$ python Madlibs.py\nMad Libs is starting!\nEnter a name: _____\nEnter an adjective: _____\nEnter a second adjective: _____\nEnter one more adjective: _____\n```\n\nThe blank spaces are where the user type something and press \u003cspan style=\"\n  display: inline-block;\n  margin: 0 0.06em;\n  padding: 0.1em 0.47em;\n  color: #3e3e40;\n  background-color: #f7f7f7;\n  border: 1px solid #bebfc1;\n  -moz-box-shadow: 0 1px 0px rgba(0, 0, 0, 0.2), 0 0 0 2px #ffffff inset;\n  -webkit-box-shadow:0 1px 0px rgba(0, 0, 0, 0.2), 0 0 0 2px #ffffff inset;\n  box-shadow: 0 1px 0px rgba(0, 0, 0, 0.2), 0 0 0 2px #ffffff inset;\n  font-size: 14px;\n  font-family: Arial, Helvetica, sans-serif;\n  -moz-border-radius: 3px;\n  -webkit-border-radius: 3px;\n  border-radius: 3px;\n  text-shadow: 0 1px 0 #fff;\n  line-height: 1.4;\n  white-space: nowrap;\"\u003eEnter\u003c/span\u003e.\n\nIf you are getting an error, make sure to debug (check your code for typos or mistakes) before repeating this task.\n\n\u003cimg src=\"https://content.codecademy.com/courses/learn-python/flow-diagram.svg\" title=\"Workflow Circle\" /\u003e\u003c/a\u003e\n",
                                            "task_key": "0_11_01816638512631692",
                                            "text": "It's a good practice to save, and run the code every few steps to make sure there are no bugs.\n\nIn the terminal, type the following command and press \u003cspan style=\"\n  display: inline-block;\n  margin: 0 0.06em;\n  padding: 0.1em 0.47em;\n  color: #3e3e40;\n  background-color: #f7f7f7;\n  border: 1px solid #bebfc1;\n  -moz-box-shadow: 0 1px 0px rgba(0, 0, 0, 0.2), 0 0 0 2px #ffffff inset;\n  -webkit-box-shadow:0 1px 0px rgba(0, 0, 0, 0.2), 0 0 0 2px #ffffff inset;\n  box-shadow: 0 1px 0px rgba(0, 0, 0, 0.2), 0 0 0 2px #ffffff inset;\n  font-size: 14px;\n  font-family: Arial, Helvetica, sans-serif;\n  -moz-border-radius: 3px;\n  -webkit-border-radius: 3px;\n  border-radius: 3px;\n  text-shadow: 0 1px 0 #fff;\n  line-height: 1.4;\n  white-space: nowrap;\"\u003eEnter\u003c/span\u003e on your keyboard:\n\n```bash\npython Madlibs.py\n```"
                                        },
                                        {
                                            "hint": "```py\nverb = raw_input(\"Enter a verb: \")\n```",
                                            "task_key": "0_4",
                                            "text": "Moving on! You'll also need to ask the user for one \u003ca href=\"https://en.wikipedia.org/wiki/Verb\" target=\"_blank\" rel=\"noopener noreferrer\"\u003everb\u003c/a\u003e. \n\nAsk the user for input a verb. Store the verb in a variable."
                                        },
                                        {
                                            "hint": "```py\nnoun1 = raw_input(\"Enter a noun: \")\nnoun2 = raw_input(\"Enter a second noun: \")\n```",
                                            "task_key": "0_5",
                                            "text": "The story also needs two \u003ca href=\"https://en.wikipedia.org/wiki/Noun\" target=\"_blank\" rel=\"noopener noreferrer\"\u003enouns\u003c/a\u003e. \n\nAsk the user to input two nouns. Store each noun in its own variable."
                                        },
                                        {
                                            "hint": "```py\nanimal = raw_input(\"Enter an animal: \")\nfood = raw_input(\"Enter a food: \")\nfruit = raw_input(\"Enter a fruit: \")\nsuperhero = raw_input(\"Enter a superhero: \")\ncountry = raw_input(\"Enter a country: \")\ndessert = raw_input(\"Enter a dessert: \")\nyear = raw_input(\"Enter a year: \")\n```\n\nHere, we are saving user's inputs into these variables: \n* `animal`\n* `food`\n* `fruit`\n* `superhero`\n* `country`\n* `dessert`\n* `year`",
                                            "task_key": "0_6",
                                            "text": "This is where the story can get really fun and weird. \n\nAsk the user to input one of each of the following:\n\n* An animal\n* A food\n* A fruit\n* A superhero\n* A country\n* A dessert \n* A year\n\nMake sure to save the inputs into different variables."
                                        },
                                        {
                                            "hint": "```py\nSTORY = \"This morning %s woke up feeling %s. 'It is going to be a %s day!' Outside, a bunch of %ss were protesting to keep %s in stores...\n```\n\nNote that the snippet of code above has been abbreviated.\n",
                                            "task_key": "0_8",
                                            "text": "At this point, we have all the words needed for the story. \n\nThe next step is to insert all of the user's inputs into the blank spaces of the story using \u003ca href=\"https://www.codecademy.com/courses/learn-python/lessons/strings--console-output/exercises/string-formatting-with--part--1\" target=\"_blank\" rel=\"noopener noreferrer\"\u003estring formatting\u003c/a\u003e.\n\nIn the `STORY`, replace all the `_` with `%s`."
                                        },
                                        {
                                            "hint": "Your variable names might be different, but it should look something like:\n\n```py\nprint STORY % (name, adj1, adj2, animal, food, verb, noun1, fruit, adj3, name, superhero, name, country, name, dessert, name, year, noun2)\n```\n\nYes, this is a long line of code, but that's okay!\n\nThe `%` operator will replace all the `%s` placeholders in `STORY` with the variables that are in the parenthesis.",
                                            "task_key": "0_9",
                                            "text": "Write the final line of the program that prints the story and inserts all the variables (using string formatting with `%`) in the following order:\n\n1. Name\n2. First adjective\n3. Second adjective\n4. Animal\n5. Food\n6. Verb\n7. First noun\n8. Fruit\n9. Third adjective\n10. Name\n11. Superhero\n12. Name\n13. Country\n14. Name\n15. Dessert\n16. Name\n17. Year\n18. Second noun"
                                        },
                                        {
                                            "hint": "If you encounter an error when running **MadLibs.py**, make sure to double check your code for typos or mistakes. If the program ran successfully in task 6, then the error(s) is in the code you wrote after that point.\n\nCommon errors:\n\n- A mismatch between the number of variables to be interpolated and the number of `%s` placeholders.\n\n- A mismatch in variable names.\n\nEdit the code and repeat this task again.\n\nIf you are feeling ambitious, modify the story and the code to create your very own Mad Libs!",
                                            "task_key": "0_10",
                                            "text": "Let's run the program!\n\nSave the program. Then, in the terminal, type the following command and press \u003cspan style=\"\n  display: inline-block;\n  margin: 0 0.06em;\n  padding: 0.1em 0.47em;\n  color: #3e3e40;\n  background-color: #f7f7f7;\n  border: 1px solid #bebfc1;\n  -moz-box-shadow: 0 1px 0px rgba(0, 0, 0, 0.2), 0 0 0 2px #ffffff inset;\n  -webkit-box-shadow:0 1px 0px rgba(0, 0, 0, 0.2), 0 0 0 2px #ffffff inset;\n  box-shadow: 0 1px 0px rgba(0, 0, 0, 0.2), 0 0 0 2px #ffffff inset;\n  font-size: 14px;\n  font-family: Arial, Helvetica, sans-serif;\n  -moz-border-radius: 3px;\n  -webkit-border-radius: 3px;\n  border-radius: 3px;\n  text-shadow: 0 1px 0 #fff;\n  line-height: 1.4;\n  white-space: nowrap;\"\u003eEnter\u003c/span\u003e:\n\n```shell\npython Madlibs.py\n```"
                                        }
                                    ]
                                }
                            ],
                            "components": [
                                {
                                    "id": "5c34904a1d19727d7ef7ded1",
                                    "type": "PersistentCodeEditor",
                                    "files": [
                                        "Madlibs.py"
                                    ],
                                    "navigator_disabled": true,
                                    "no_run_button": null
                                },
                                {
                                    "id": "5c34904a1d19727d7ef7ded2",
                                    "type": "Terminal",
                                    "shell": "bash",
                                    "prevent_checkpoint_run": null,
                                    "fake_responses": []
                                }
                            ]
                        }
                    },
                    {
                        "id": "41700588e64fda7e07b6063f42f7be03",
                        "description": null,
                        "is_deprecated": null,
                        "is_free": null,
                        "published": true,
                        "slug": "learn-python-python-unit-2",
                        "title": "Strings and Console Output",
                        "time": 8,
                        "type": "quiz",
                        "assessment_ids": [
                            "5b1da4741d176d7bdd04f93b",
                            "5b1da4741d176d7bdd04f940",
                            "5b1da4741d176d7bdd04f946",
                            "5b1da4741d176d7bdd04f94c",
                            "5b1da4741d176d7bdd04f94f",
                            "5b1da4741d176d7bdd04f955",
                            "5b1da4741d176d7bdd04f95b",
                            "5b1da4741d176d7bdd04f961"
                        ],
                        "assessments": [
                            {
                                "id": "5b1da4741d176d7bdd04f93b",
                                "type": "multiple_choice",
                                "prompt": "What is the correct way to output a string to the console in Python?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`print \"The string to be printed\"`",
                                        "reason": "Correct! `print` simply displays your code in the console."
                                    },
                                    {
                                        "text": "`console.log \"The string to be printed\"`",
                                        "reason": "Oops. That's another language (JavaScript)!"
                                    },
                                    {
                                        "text": "`\"\"\" The string to be printed \"\"\"`",
                                        "reason": "Triple double quotes `\"\"\"` are used as comments."
                                    },
                                    {
                                        "text": "`# The string to be printed`",
                                        "reason": "The `#` sign makes it a single-line comment."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": null
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f940",
                                "type": "multiple_choice",
                                "prompt": "What will the code below print to the console?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`3`",
                                        "reason": "Correct! `feist[0]` is 1, `feist[1]` is 2, `feist[2]` is 3, `feist[3]` is 4."
                                    },
                                    {
                                        "text": "`2`",
                                        "reason": "Remember to count the index from zero instead of one."
                                    },
                                    {
                                        "text": "`1234`",
                                        "reason": "Remember how to access a string by index? The character at index 2 is `3`."
                                    },
                                    {
                                        "text": "`2468`",
                                        "reason": "Remember how to access a string by index? The character at index 2 is `3`."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "feist = \"1234\"\n\nprint feist[2]\n"
                                }
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f946",
                                "type": "multiple_choice",
                                "prompt": "What will the lines of code below print to the console?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`12`",
                                        "reason": "Correct! The length of \"Monty Python\" is 12."
                                    },
                                    {
                                        "text": "`11`",
                                        "reason": "Try again. Remember that the space counts!"
                                    },
                                    {
                                        "text": "`monty python`",
                                        "reason": "We are printing `len(my_variable)` instead of `my_variable`."
                                    },
                                    {
                                        "text": "`Monty Python`",
                                        "reason": "`lower()` converts all uppercase characters into lowercase and `len()` returns the length."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "my_variable = \"Monty Python\".lower()\n\nprint len(my_variable)\n"
                                }
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f94c",
                                "type": "multiple_choice",
                                "prompt": "Combining strings together like `\"peanut butter \" + \" chocolate cake\"` is called concatenation.",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "True",
                                        "reason": "Correct! The `+` operator between strings will *add* them together, one after the other."
                                    },
                                    {
                                        "text": "False",
                                        "reason": "The `+` operator between strings will *add* them together, one after the other."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": null
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f94f",
                                "type": "multiple_choice",
                                "prompt": "What does the `str()` function do?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "It converts its content into a string.",
                                        "reason": "Correct! The `str()` method turns non-strings into strings."
                                    },
                                    {
                                        "text": "It measures the length of a string.",
                                        "reason": "Oops. That is `len()`."
                                    },
                                    {
                                        "text": "It capitalizes all the characters in the string.",
                                        "reason": "Oops. That is `upper()`."
                                    },
                                    {
                                        "text": "It gets rid of all the capitalization in your string.",
                                        "reason": "Oops. That is `lower()`."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "str(3.14)"
                                }
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f955",
                                "type": "multiple_choice",
                                "prompt": "What is the purpose of this line of code?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "It imports the `datetime` library so that we can use it.",
                                        "reason": "Good job!"
                                    },
                                    {
                                        "text": "It is a single-line comment and its purpose is documentation.",
                                        "reason": "Single-line comments start with a `#` sign."
                                    },
                                    {
                                        "text": "Every function in the whole wide world is imported.",
                                        "reason": "Only the `datetime` library is imported."
                                    },
                                    {
                                        "text": "The purpose is to import a random function.",
                                        "reason": "Oops. Only the `datetime` library is imported."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "from datetime import datetime"
                                }
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f95b",
                                "type": "multiple_choice",
                                "prompt": "What will this code print?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "1 / 30 / 2018",
                                        "reason": "Correct!"
                                    },
                                    {
                                        "text": "30 / 1 / 2018",
                                        "reason": "Oops, `now.month` goes *before* `now.day` according to the last line of code."
                                    },
                                    {
                                        "text": "30 / 1 / 1991",
                                        "reason": "Oops. The `now.year` is not correct."
                                    },
                                    {
                                        "text": "1 - 30 - 2018",
                                        "reason": "The string uses `/`s instead of `-`s."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "# Currently 2018-01-30 19:22:43\n\nfrom datetime import datetime\n\nnow = datetime.now()\n\nprint '%s / %s / %s' % (now.month, now.day, now.year)\n"
                                }
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f961",
                                "type": "multiple_choice",
                                "prompt": "What will this code print?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "13",
                                        "reason": "Correct! `time.hour` is 13."
                                    },
                                    {
                                        "text": "1",
                                        "reason": "1 is `time.month`."
                                    },
                                    {
                                        "text": "2018",
                                        "reason": "2018 is `time.year`."
                                    },
                                    {
                                        "text": "52",
                                        "reason": "52 is `time.minute`."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "# Currently 2018-01-30 13:52:10\n\nfrom datetime import datetime\n\ntime = datetime.now() \n\nprint time.hour\n"
                                }
                            }
                        ]
                    },
                    {
                        "id": "7d6fbc234dfb599a6ea3c9ab875bdd6e",
                        "description": "In this lesson, we'll learn how to create programs that generate different outcomes based on user input!",
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "conditionals--control-flow",
                        "title": "Conditionals \u0026 Control Flow",
                        "time": 62,
                        "type": "lesson",
                        "published_exercise_ids": [
                            "195ea977549e55705fcb04427d8bb595",
                            "d1cb59b1e6e7b78136d8b8988d6550ee",
                            "c33a21d7c8086baa5223f8055373aff0",
                            "b7313c1e5c020db2328a7d8b79bad1b2",
                            "57893cb437d0cbbc41aeea03f838bf58",
                            "12a0276df419ef6371e06d7af39ddc6c",
                            "0cb902c41d3387a37f7b70457d863898",
                            "fe15e77bb3fb05d1d5904853eaacdce5",
                            "5b9073fad733669b223b52fbd3a7c66a",
                            "421bc066604f09bcd55aa41c5af22e06",
                            "cef05f43a6c2ac2010a2b511ae3bf3c1",
                            "4bbbb73aa8e196c6273f9b6b890fec40",
                            "449c15495c1eecab8c40ad6ac8e23934",
                            "2463e845c2416ddc4d0a173c81b128c8",
                            "fa0628f0bae7d690db456eb46c744199"
                        ],
                        "exercise_ids": [
                            "195ea977549e55705fcb04427d8bb595",
                            "d1cb59b1e6e7b78136d8b8988d6550ee",
                            "c33a21d7c8086baa5223f8055373aff0",
                            "b7313c1e5c020db2328a7d8b79bad1b2",
                            "57893cb437d0cbbc41aeea03f838bf58",
                            "12a0276df419ef6371e06d7af39ddc6c",
                            "0cb902c41d3387a37f7b70457d863898",
                            "fe15e77bb3fb05d1d5904853eaacdce5",
                            "5b9073fad733669b223b52fbd3a7c66a",
                            "421bc066604f09bcd55aa41c5af22e06",
                            "cef05f43a6c2ac2010a2b511ae3bf3c1",
                            "4bbbb73aa8e196c6273f9b6b890fec40",
                            "449c15495c1eecab8c40ad6ac8e23934",
                            "2463e845c2416ddc4d0a173c81b128c8",
                            "fa0628f0bae7d690db456eb46c744199"
                        ]
                    },
                    {
                        "id": "48be38c329c6dc42640077df5b357bdd",
                        "description": "In this lesson we'll put together all of the Python skills we've learned so far including string manipulation and branching.  We'll be building a Pyg Latin translator.  (That's Pig Latin for Python Programmers!)",
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "pyglatin",
                        "title": "PygLatin",
                        "time": 43,
                        "type": "lesson",
                        "published_exercise_ids": [
                            "aec7b19b3033bcfc58887267e52bdf09",
                            "c02a2d0c080842bdb0725b90e5b0b850",
                            "ecaca8e472743e417aea26e29dd07f5c",
                            "f8d4ca93e0d26f41f173b94ccf18ca85",
                            "49c167c15bcdbedf20f6da63ddb90b47",
                            "65b803ccceb772447544a3736afd668e",
                            "87ca8f09a9066eef7604266de0b07a88",
                            "0a9e467acb35974216a8dc1f82523874",
                            "d4025c914b602812685b622954b8b323",
                            "26eff4b791ef6dfa90c2873973ea8eb1",
                            "e2891e16e046f95d68d957ae1f9ba71c"
                        ],
                        "exercise_ids": [
                            "aec7b19b3033bcfc58887267e52bdf09",
                            "c02a2d0c080842bdb0725b90e5b0b850",
                            "ecaca8e472743e417aea26e29dd07f5c",
                            "f8d4ca93e0d26f41f173b94ccf18ca85",
                            "49c167c15bcdbedf20f6da63ddb90b47",
                            "65b803ccceb772447544a3736afd668e",
                            "87ca8f09a9066eef7604266de0b07a88",
                            "0a9e467acb35974216a8dc1f82523874",
                            "d4025c914b602812685b622954b8b323",
                            "26eff4b791ef6dfa90c2873973ea8eb1",
                            "e2891e16e046f95d68d957ae1f9ba71c"
                        ]
                    },
                    {
                        "id": "52cae8a53cd75d37b65445f1ce37f356",
                        "description": "It's time to build fluency in Python fundamentals. In this next Pro Project, we're going to practice functions and conditionals in Python so you can hone your skills and feel confident taking them to the real world.\nWhy? Ever wanted to automate your math homework? Time to build something in Python that does just that.\nWhat's next? Shapes, math, more Python. You got this!",
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "area-calculator",
                        "title": "Area Calculator",
                        "time": 54,
                        "type": "project",
                        "standalone": false,
                        "project_information": {
                            "ein_config": {
                                "extensions": {
                                    "python": {
                                        "cmds": [
                                            "python {{ .fileName }}"
                                        ]
                                    },
                                    "py2": {
                                        "cmds": [
                                            "python {{ .fileName }}"
                                        ]
                                    },
                                    "python2": {
                                        "cmds": [
                                            "python {{ .fileName }}"
                                        ]
                                    }
                                },
                                "container_type": "python",
                                "server": "http"
                            },
                            "download_path": null,
                            "objective": "Python is especially useful for doing math and can be used to automate many calculations. In this project, we'll create a calculator that can compute the area of the following shapes:\n\n* Circle\n* Triangle\n\nThe program should do the following:\n\n1. Prompt the user to select a shape.\n2. Calculate the area of that shape.\n3. Print the area of that shape to the user.\n\nLet's begin!\n\nIf you get stuck during this project or would like to see an experienced developer work through it, click \"**Get Unstuck**\" to see a **project walkthrough video**.",
                            "preview_url": null,
                            "thumbnail_url": null,
                            "video_url": "https://www.youtube.com/watch?v=Sz1Gjc01R0U",
                            "workspace": {
                                "id": "5c34904c1d19727d7ef7df69",
                                "slug": "python-ext-prj_area-calculator",
                                "type": "python"
                            },
                            "self_assessments": [
                                {
                                    "heading": null,
                                    "tasks": [
                                        {
                                            "hint": "It's helpful to let other programmers know what your program does.\n\n```py\n\"\"\"\nThis is a \nmulti-line\ncomment!\n\"\"\"\n```\n\nFor this program, you can write something like:\n\n```py\n\"\"\"\nCodecademy - Learn Python\nArea Calculator\n\"\"\"\n```",
                                            "task_key": "0_0",
                                            "text": "Begin by writing a multi-line comment that describes what this program does, starting on line 1."
                                        },
                                        {
                                            "hint": "```py\nprint \"Starting the calculator...\"\n```\n\nRemember, you are playing two roles here:\n\n* the programmer\n* the user\n\nWhen you are writing the code, you are the programmer. However, you need to be constantly thinking from the users' point of view – they are the ones who run your program.\n",
                                            "task_key": "0_5",
                                            "text": "Let's inform the user that the program is running.\n\nPrint a message to let the user know the calculator is starting up."
                                        },
                                        {
                                            "hint": "```py\noption = raw_input(\"Enter C for Circle or T for Triangle: \")\n```\n\n`raw_input()` presents a string to the user, gets input from the user and returns the data in a string.\n\nHere, the code is asking the user to enter `C` or `T`, and saving whatever they enter into the variable `option`.",
                                            "task_key": "0_9",
                                            "text": "Next, ask the user what shape to calculate the area of using `raw_input()`, which works like:\n\n```py\nname = raw_input(\"What's your name? \")\n```\n\nPrompt the user for input with the following message: `\"Enter C for Circle or T  for Triangle: \"`.\n\nStore their input into a variable called `option`."
                                        },
                                        {
                                            "hint": "```py\nif option == 'C':\n```\n\nThis code translates to: *if `option` is equal to the character `C`, then do the following...*\n\n",
                                            "task_key": "0_11",
                                            "text": "Great! Now it's time to calculate the area of the shape that the user specifies. \n\nWrite an `if` statement that will check if the option the user entered is `'C'` for circle."
                                        },
                                        {
                                            "hint": "```py\nif option == 'C':\n  radius = raw_input(\"Enter radius: \")\n```\n\nThe indentation puts this line inside the `if` statement.",
                                            "task_key": "0_12",
                                            "text": "For the next few steps, we will be writing code *inside* the `if` statement.\n\nPrompt the user to input the radius. \n\nStore their input into a variable called `radius`."
                                        },
                                        {
                                            "hint": "Your `if` statement so far should look like:\n```py\nif option == 'C':\n  radius = float(raw_input(\"Enter radius: \"))\n```\nThis will make sure we are storing the user's input as a floating point number. We'll then be able to perform calculations with their input.",
                                            "task_key": "0_13",
                                            "text": "Using `raw_input()` alone will store the user's input as a string. Since we want to do some calculations with the user's input, we need numbers, not strings. \n\nPython has a built-in method called `float()` that converts a string to a floating point number.\n\nPut the `raw_input(\"Enter radius: \")` part of your code inside `float()` parenthesises like this:\n\n```py\nradius = float(raw_input(\"Enter radius: \"))\n```"
                                        },
                                        {
                                            "hint": "```py\nif option == 'C':\n  radius = float(raw_input(\"Enter radius: \"))\n  area = 3.14159 * radius**2\n```",
                                            "task_key": "0_14",
                                            "text": "Calculate the \u003ca href=\"https://en.wikipedia.org/wiki/Area_of_a_disk\" target=\"_blank\" rel=\"noopener noreferrer\"\u003earea of a circle\u003c/a\u003e now that you have the radius. \n\narea = π r²\n\n* Use `3.14159` for the value of pi.\n* Use \u003ca href=\"https://www.codecademy.com/en/courses/learn-python/lessons/python-syntax/exercises/exponentiation\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eexponentiation\u003c/a\u003e `**` to square. \n\nStore the result in a variable called `area`."
                                        },
                                        {
                                            "hint": "The `%` operator after a string is used to combine a string with variables.\n\n```py\nquarter = 0.25\nprint \"A quarter is %f\" % (quarter)\n```\nThe `%` operator will replace a `%f` in the string with the floating point number variable that comes after it.\n\n```py\nif option == 'C':\n  radius = float(raw_input(\"Enter radius: \"))\n  area = 3.14159 * radius**2  \n  print \"Area: %f\" % area\n```",
                                            "task_key": "0_17",
                                            "text": "Finally, on the next line, print the area using \u003ca href=\"https://www.codecademy.com/courses/learn-python/lessons/strings--console-output/exercises/string-formatting-with--part-?\" target=\"_blank\" rel=\"noopener noreferrer\"\u003estring formatting\u003c/a\u003e. "
                                        },
                                        {
                                            "hint": "Executing this command in the terminal tells the computer to run the **AreaCalculator.py** program. \n\n- Type `C` and hit \u003ckbd\u003eenter\u003c/kbd\u003e for the first prompt.\n- Type `9` and hit \u003ckbd\u003eenter\u003c/kbd\u003e for the second prompt.\n\nWhen your program finishes, it should look something like:\n\n```\n$ python AreaCalculator.py\nStarting the calculator...\nEnter C for Circle or T for Triangle: C\nEnter radius: 9\nArea: 254.468790\n```\n\nIf you are getting an error, make sure to debug (check your code for typos or mistakes) before repeating this task.\n\nWhen you are in the terminal:\n- Make sure the program finishes running before editing the code again.\n- To abort: \u003ckbd\u003econtrol\u003c/kbd\u003e  + \u003ckbd\u003ec\u003c/kbd\u003e\n\nIf all else fails, refresh the browser!",
                                            "task_key": "0_16_07230776911281529",
                                            "text": "You've completed the part of the program that calculates the area of a circle – it's a good time to test the code!\n\nFirst, click Save. Then, in the terminal, type the following command and press \u003ckbd\u003eenter\u003c/kbd\u003e:\n\n```\npython AreaCalculator.py\n```"
                                        },
                                        {
                                            "hint": "```py\nif option == 'C':\n  # ...\nelif option == 'T':\n```\n\nThis code translates to: *else if `option` is equal to the character `T`, then do the following...*",
                                            "task_key": "0_18",
                                            "text": "Great! It's time to move on to the next shape: the triangle. \n\nAdd a corresponding `elif` statement to your `if` statement. \n\nThe `elif` statement should check if the option the user entered is `'T'` for triangle."
                                        },
                                        {
                                            "hint": "```py\nif option == 'C':\n  # ...\nelif option == 'T':\n  base = float(raw_input(\"Enter base: \"))\n```",
                                            "task_key": "0_19",
                                            "text": "For the next few steps, you will be staying inside the `elif` statement. \n\nTo calculate the \u003ca href=\"https://en.wikipedia.org/wiki/Triangle#Computing_the_area_of_a_triangle\" target=\"_blank\" rel=\"noopener noreferrer\"\u003earea of a triangle\u003c/a\u003e, first ask the user to enter the base of the triangle. \n\nStore the user's input in a variable called `base`. \n\nConvert the user's input from a string to a number by using `float()`."
                                        },
                                        {
                                            "hint": "```py\nif option == 'C':\n  # ...\nelif option == 'T':\n  base = float(raw_input(\"Enter base: \"))\n  height = float(raw_input(\"Enter height: \"))\n```",
                                            "task_key": "0_20",
                                            "text": "The height of the triangle is also needed to calculate its area. \n\nAsk the user to enter the height of the triangle and store the input in a variable called `height`.\n\nConvert the user's input from a string to a number by using `float()`."
                                        },
                                        {
                                            "hint": "```py\nelif option == 'T':\n  base = float(raw_input(\"Enter base: \"))\n  height = float(raw_input(\"Enter height: \"))\n  area = 0.5 * base * height\n```",
                                            "task_key": "0_21",
                                            "text": "Next, calculate the area and store it in a variable called `area`.\n\narea = ½ b h"
                                        },
                                        {
                                            "hint": "```py\nelif option == 'T':\n  base = float(raw_input(\"Enter base: \"))\n  height = float(raw_input(\"Enter height: \"))\n  area = 0.5 * base * height\n  print \"Area: %f\" % area\n```",
                                            "task_key": "0_23",
                                            "text": "Finally, print the area using string formatting. "
                                        },
                                        {
                                            "hint": "```py\nif option == 'C':\n  # ...\nelif option == 'T':\n  # ...\nelse:\n  print \"Error! Invalid shape.\"\n```",
                                            "task_key": "0_24",
                                            "text": "Fantastic! The user can now specify `C` for circle or `T` for triangle. \n\nBut what if the user enters something else?\n\nAdd an `else` block to handle this possible case. \n\nInside the `else` block, print a message to inform the user that they entered an invalid shape."
                                        },
                                        {
                                            "hint": "```py\nif option == 'C':\n  # ...\nelif option == 'T':\n  # ...\nelse:\n  # ...\n\nprint \"Exiting...\"\n```",
                                            "task_key": "0_15_028450939317113666",
                                            "text": "Last line of the program!\n\nOutside of the `if` statement, inform the user that the program is exiting."
                                        },
                                        {
                                            "hint": "Check your program by confirming the following two examples:\n\n* For a circle: inputting `6` for the radius outputs `113.097240`.\n* For a triangle: inputting `33` for the base and `11` for the height outputs `181.500000`. \n\nCongratulations, you have a working area calculator!\n\nIf you are feeling ambitious, try adding the functionality to calculate the area of other shapes, like a square or a rectangle. Happy coding!",
                                            "task_key": "0_26",
                                            "text": "Now we're ready to try the program out!\n\nFirst, click Save. Then, in the terminal, type the following command and press \u003ckbd\u003eenter\u003c/kbd\u003e:\n\n```shell\npython AreaCalculator.py\n```\n\nCongratulations!"
                                        }
                                    ]
                                }
                            ],
                            "components": [
                                {
                                    "id": "5c34904c1d19727d7ef7df67",
                                    "type": "PersistentCodeEditor",
                                    "files": [
                                        "AreaCalculator.py"
                                    ],
                                    "navigator_disabled": true,
                                    "no_run_button": null
                                },
                                {
                                    "id": "5c34904c1d19727d7ef7df68",
                                    "type": "Terminal",
                                    "shell": "bash",
                                    "prevent_checkpoint_run": null,
                                    "fake_responses": []
                                }
                            ]
                        }
                    },
                    {
                        "id": "d1f188876b34fd01b179cfa8d16fea8b",
                        "description": null,
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "learn-python-python-unit-3",
                        "title": "Conditionals and Control Flow",
                        "time": 8,
                        "type": "quiz",
                        "assessment_ids": [
                            "5b1da4741d176d7bdd04f967",
                            "5b1da4741d176d7bdd04f96c",
                            "5b1da4741d176d7bdd04f971",
                            "5b1da4741d176d7bdd04f976",
                            "5b1da4741d176d7bdd04f97b",
                            "5b1da4741d176d7bdd04f980",
                            "5b1da4741d176d7bdd04f986",
                            "5b1da4741d176d7bdd04f98c"
                        ],
                        "assessments": [
                            {
                                "id": "5b1da4741d176d7bdd04f967",
                                "type": "multiple_choice",
                                "prompt": "Control flow enables the program...",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "to select between different outcomes.",
                                        "reason": "Correct!"
                                    },
                                    {
                                        "text": "to be documented.",
                                        "reason": "Comments are used for documentation."
                                    },
                                    {
                                        "text": "to output values to the console.",
                                        "reason": "Not quite, the `print()` function output values."
                                    },
                                    {
                                        "text": "to turn non-strings into strings.",
                                        "reason": "The `str()` method turns non-strings into strings."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": null
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f96c",
                                "type": "multiple_choice",
                                "prompt": "Which one is NOT a Boolean operator in Python?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`maybe`",
                                        "reason": "Correct! `and`, `or`, and `not` are all Boolean operators."
                                    },
                                    {
                                        "text": "`and`",
                                        "reason": "`and` is a Boolean operator. It checks if both the statements are `True`."
                                    },
                                    {
                                        "text": "`or`",
                                        "reason": "`or` is a Boolean operator. It checks if at least one of the statements is `True`."
                                    },
                                    {
                                        "text": "`not`",
                                        "reason": "`not` is a Boolean operator. It gives the opposite of the statement."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": null
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f971",
                                "type": "multiple_choice",
                                "prompt": "Which of the following conditions evaluates to `False`?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`False or False`",
                                        "reason": "Correct!"
                                    },
                                    {
                                        "text": "`True or True`",
                                        "reason": "This evaluates to `True`."
                                    },
                                    {
                                        "text": "`True or False`",
                                        "reason": "This evaluates to `True`."
                                    },
                                    {
                                        "text": "`False or True`",
                                        "reason": "This evaluates to `True`."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": null
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f976",
                                "type": "multiple_choice",
                                "prompt": "Which of the following conditions evaluates to `False`?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`False or 3 \u003e= 5 * 2`",
                                        "reason": "`3 \u003e= 10` is `False`, and `False or False` is `False`."
                                    },
                                    {
                                        "text": "`True or not True`",
                                        "reason": "`True or False` is `True`."
                                    },
                                    {
                                        "text": "`False or 3 ** 2 != 2 ** 3`",
                                        "reason": "`9 != 8` is `True`, so `False or True` is `True`."
                                    },
                                    {
                                        "text": "`not 5 \u003e= 6 and 10 % 3 \u003e= -5`",
                                        "reason": "`not 5 \u003e= 6` is `True` and `1 \u003e= -5` is also `True`."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": null
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f97b",
                                "type": "multiple_choice",
                                "prompt": "What is the expression after an `if` statement always followed by?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "A colon `:` and *two* spaces of whitespace on the next code block.",
                                        "reason": "Correct!"
                                    },
                                    {
                                        "text": "Curly braces `{` and `}`.",
                                        "reason": "You don't use curly braces for `if` statements in Python."
                                    },
                                    {
                                        "text": "A semicolon `;`.",
                                        "reason": "You don't use curly braces for `if` statements in Python."
                                    },
                                    {
                                        "text": "A colon `:` and *zero* spaces of whitespace on the next code block.",
                                        "reason": "The whitespace is used to denote blocks!"
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": null
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f980",
                                "type": "multiple_choice",
                                "prompt": "What will the code below print to the console?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`can vote`",
                                        "reason": "Correct! 20 is greater than 18 so the `if` condition evaluates to `True`."
                                    },
                                    {
                                        "text": "`can't vote`",
                                        "reason": "20 is greater than 18 so the `if` condition evaluates to `True`."
                                    },
                                    {
                                        "text": "20",
                                        "reason": "The `print` statements in this code are outputting strings only."
                                    },
                                    {
                                        "text": "18",
                                        "reason": "The `print` statements in this code are outputting strings only."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "age = 20\n\nif age \u003e= 18:\n  print \"can vote\"\nelse:\n  print \"can't vote\""
                                }
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f986",
                                "type": "multiple_choice",
                                "prompt": "What will the code below print to the console?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`Nothing`",
                                        "reason": "The `if` statement and the two `elif` statements are all `False`."
                                    },
                                    {
                                        "text": "`True`",
                                        "reason": "The `if` statement is `False` because `not True` is `False`."
                                    },
                                    {
                                        "text": "`False`",
                                        "reason": "The `elif` statement is `False` because `2 \u003c= 1` is `False`."
                                    },
                                    {
                                        "text": "`None`",
                                        "reason": "The `elif` statement is `False and True` is `False`."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "if not True:\n  print True\nelif 8 % 3 \u003c 2:\n  print False\nelif False and True:\n  print \"None\"\nelse:\n  print \"Nothing\"\n"
                                }
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f98c",
                                "type": "multiple_choice",
                                "prompt": "True/False: `not` is evaluated first; `and` is evaluated next; `or` is evaluated last.",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "True",
                                        "reason": "Correct! Just like with arithmetic operators, there is an order of operations for boolean operators."
                                    },
                                    {
                                        "text": "False",
                                        "reason": "Boolean operators aren't just evaluated from left to right. This is the correct order of operations."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": null
                            }
                        ]
                    },
                    {
                        "id": "2f7fa4f74c8d1f3a520813c563b1816f",
                        "description": "A function is a reusable section of code written to perform a specific task in a program. We gave you a taste of functions in Unit 3; here, you'll learn how to create your own.",
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "python-functions",
                        "title": "Functions",
                        "time": 78,
                        "type": "lesson",
                        "published_exercise_ids": [
                            "285dc09429c59115b6b8ac14f787d306",
                            "641bb193edae159f944d305264e6997f",
                            "0ed023e0d7f4f0ebd50d5c49cfa6d1de",
                            "17cbad98428d01d6c066649306a80048",
                            "8b6ba22959320a20be420718d3f76241",
                            "fc23bf82d00717250a3916fbf001eca6",
                            "94fef127a247a81814ac281dc09ed759",
                            "a4f68f8f80185816137123f84688b296",
                            "1574ef55b7c50ca9828ffbcd92042f5a",
                            "674c4ab5a04ecc93a5c137e7a0a955a3",
                            "d7d9515fa433635a7b28d47e798f2017",
                            "6564198bc151f73ca1095fd03ab09517",
                            "77029ff5103d9562353c21c3bee6aa5a",
                            "cec7947b9aeb8b9c07a1870e7109810e",
                            "7809002e52baefff535c0ddccdd494c9",
                            "6b8f7a94610dc5ee417b0ef9020e1f54",
                            "f0fa0570068c7f36f8cc7ef880910a12",
                            "86df8ad42466edc7e8710a7c76316948",
                            "5d752fbde67a9b217be942d89505c2a0"
                        ],
                        "exercise_ids": [
                            "285dc09429c59115b6b8ac14f787d306",
                            "641bb193edae159f944d305264e6997f",
                            "0ed023e0d7f4f0ebd50d5c49cfa6d1de",
                            "17cbad98428d01d6c066649306a80048",
                            "8b6ba22959320a20be420718d3f76241",
                            "fc23bf82d00717250a3916fbf001eca6",
                            "94fef127a247a81814ac281dc09ed759",
                            "a4f68f8f80185816137123f84688b296",
                            "1574ef55b7c50ca9828ffbcd92042f5a",
                            "674c4ab5a04ecc93a5c137e7a0a955a3",
                            "d7d9515fa433635a7b28d47e798f2017",
                            "6564198bc151f73ca1095fd03ab09517",
                            "77029ff5103d9562353c21c3bee6aa5a",
                            "cec7947b9aeb8b9c07a1870e7109810e",
                            "7809002e52baefff535c0ddccdd494c9",
                            "6b8f7a94610dc5ee417b0ef9020e1f54",
                            "f0fa0570068c7f36f8cc7ef880910a12",
                            "86df8ad42466edc7e8710a7c76316948",
                            "5d752fbde67a9b217be942d89505c2a0"
                        ]
                    },
                    {
                        "id": "2d4fb6746be8db0605555e95b7d7457f",
                        "description": "Hard day at work? Rough day at school? Take a load off with a programming vacation!",
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "taking-a-vacation",
                        "title": "Taking a Vacation",
                        "time": 31,
                        "type": "lesson",
                        "published_exercise_ids": [
                            "dfd5b86cd84a129e7941016a5d188841",
                            "d498485ed057bc73220dd1bf7fa47a0c",
                            "07aa4feed2979c5801230ac0ad232985",
                            "0031f021eff3a29acc5e9d9de18ace67",
                            "7b4b4482f1dd27b65a9ce913bfdedc5a",
                            "83c8d1a38ce70f58eb3842572120f73c",
                            "a92f45a574b8e16431019c13d06f3f3f"
                        ],
                        "exercise_ids": [
                            "dfd5b86cd84a129e7941016a5d188841",
                            "d498485ed057bc73220dd1bf7fa47a0c",
                            "07aa4feed2979c5801230ac0ad232985",
                            "0031f021eff3a29acc5e9d9de18ace67",
                            "7b4b4482f1dd27b65a9ce913bfdedc5a",
                            "83c8d1a38ce70f58eb3842572120f73c",
                            "a92f45a574b8e16431019c13d06f3f3f"
                        ]
                    },
                    {
                        "id": "0e0b97415ab7bc4a061cf703dff8d93a",
                        "description": "It's time to build fluency in Python fundamentals. In this next Pro Project, we're going to practice functions in Python so you can hone your skills and feel confident taking them to the real world.\nWhy? Your Python skills are really starting to come together. Let's test what you know.\nWhat's next? Dice, chance, more Python. You got this! ",
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "number-guess",
                        "title": "Number Guess",
                        "time": 84,
                        "type": "project",
                        "standalone": false,
                        "project_information": {
                            "ein_config": {
                                "extensions": {
                                    "python": {
                                        "cmds": [
                                            "python {{ .fileName }}"
                                        ]
                                    },
                                    "py2": {
                                        "cmds": [
                                            "python {{ .fileName }}"
                                        ]
                                    },
                                    "python2": {
                                        "cmds": [
                                            "python {{ .fileName }}"
                                        ]
                                    }
                                },
                                "container_type": "python",
                                "server": "http"
                            },
                            "download_path": null,
                            "objective": "Wanna play a game? In this project, we'll build a program that rolls a pair of \u003ca href=\"https://en.wikipedia.org/wiki/Dice\" target=\"_blank\"\u003edice\u003c/a\u003e and asks the user to guess the sum. If the user's guess is equal to the total value of the dice roll, the user wins! Otherwise, the computer wins.\n\nThe program should do the following:\n\n1. Roll a pair of dice.\n2. Add the values of the roll.\n3. Ask the user to guess a number.\n4. Compare the user's guess to the total value.\n5. Determine the winner (user or computer).\n\nLet's begin!\n\nIf you get stuck during this project or would like to see an experienced developer work through it, click \"**Get Unstuck**\" to see a **project walkthrough video**.",
                            "preview_url": null,
                            "thumbnail_url": null,
                            "video_url": "https://www.youtube.com/watch?v=VjMaLzYanlM",
                            "workspace": {
                                "id": "5c34904e1d19727d7ef7e00c",
                                "slug": "python-ext-prj_number-guess",
                                "type": "python"
                            },
                            "self_assessments": [
                                {
                                    "heading": "Number Guess",
                                    "tasks": [
                                        {
                                            "hint": "It's helpful to document your code. Multi-line comments look like:\n\n```py\n\"\"\"\nThis is a \nmulti-line\ncomment!\n\"\"\"\n```\n\nFor this program, you can write something like:\n\n```py\n\"\"\"\nCodecademy - Learn Python\nNumber Guess\n\"\"\"\n```\n",
                                            "task_key": "0_0",
                                            "text": "Begin by writing a multi-line comment that starts on line 1.\n\nDescribe what this program does. "
                                        },
                                        {
                                            "hint": "It's common for developers to \u003ca href=\"https://www.codecademy.com/courses/learn-python/lessons/functions/exercises/function-imports\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eimport only the functionality that is required\u003c/a\u003e, and not import an entire module.\n\n```py\nfrom random import randint\n```\n\nHere, `random` is the module, whereas `randint` is the function *inside* of the module. \n",
                                            "task_key": "0_1",
                                            "text": "To make sure that the rolls are random, we will need some Python code that isn't built-in  – we need to import the `randint` function, from the `random` module\u003c/a\u003e.\n\nThe syntax for importing is:\n\n```py\nfrom module import function\n```"
                                        },
                                        {
                                            "hint": "This will go after the other import, like so:\n\n```py\nfrom random import randint\nfrom time import sleep\n```",
                                            "task_key": "0_2",
                                            "text": "You'll also need to import more code that will be used to simulate dice rolls. \n\nImport the `sleep` function, from the `time` module\u003c/a\u003e."
                                        },
                                        {
                                            "hint": "```py\ndef get_user_guess():\n```\n\nNote: Function names in Python are usually typed in \u003ca href=\"https://en.wikipedia.org/wiki/Snake_case\" target=\"_blank\" rel=\"noopener noreferrer\"\u003esnake case\u003c/a\u003e, as outlined in the \u003ca href=\"https://www.python.org/dev/peps/pep-0008/#function-names\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ePython Style Guide\u003c/a\u003e.",
                                            "task_key": "0_4",
                                            "text": "We have imported the code that we will use later, let's move on!\n\nFirst, we'll have to prompt the user for their guess. \n\nCreate a function called `get_user_guess()`. The function should take no arguments. "
                                        },
                                        {
                                            "hint": "Make sure to createe the indentation by hitting the \u003ckbd\u003espace\u003c/kbd\u003e twice:\n\n```py\ndef get_user_guess():\n  guess = raw_input(\"Guess a number: \")\n```",
                                            "task_key": "0_5",
                                            "text": "Inside of the function, prompt the user for their guess. Store the input into a variable called `guess`. \n\nDon't forget to use proper Python indentation!"
                                        },
                                        {
                                            "hint": "```py\ndef get_user_guess():\n  guess = int(raw_input(\"Guess a number: \"))\n```",
                                            "task_key": "0_6",
                                            "text": "By default, using `raw_input` alone will store the user's input as a string. Since the user is guessing a whole number, we will need an \u003ca href=\"https://en.wikipedia.org/wiki/Integer\" target=\"_blank\" rel=\"noopener noreferrer\"\u003einteger\u003c/a\u003e, not a string. \n\nWrap the `raw_input(\"Guess a number: \")` part of your code with `int()`."
                                        },
                                        {
                                            "hint": "```py\ndef get_user_guess():\n  guess = int(raw_input(\"Guess a number: \"))\n  return guess\n```\n\nThe `return` keyword can be used to return values or to exit the method without returning a value.",
                                            "task_key": "0_7",
                                            "text": "The name of this function is `get_user_guess()`, which implies that when the function is called, it should get, or `return`, the user's guess. \n\nOn the next line, return the user's guess."
                                        },
                                        {
                                            "hint": "```py\ndef roll_dice():\n```",
                                            "task_key": "0_8",
                                            "text": "Great! This function is complete and we will use it later to complete our entire program. \n\nNow it's time to start building the rest of the game. \n\nCreate a second function called `roll_dice()`.\n\nThe `roll_dice` function will be used to simulate the rolling of a pair of dice. "
                                        },
                                        {
                                            "hint": "```py\ndef roll_dice(number_of_sides):\n```",
                                            "task_key": "0_9",
                                            "text": "We'd like to specify the number of sides that a single die will have. \n\nModify the function to include a parameter called `number_of_sides`."
                                        },
                                        {
                                            "hint": "```py\ndef roll_dice(number_of_sides):\n  first_roll = randint(1, number_of_sides)\n```\n\nIf `number_of_sides` is 6, then `first_roll` will be a number between 1 and 6.",
                                            "task_key": "0_10",
                                            "text": "*Inside* the function, let's simulate the first die roll. \n\nA single die can land on any value that's at least 1 and no greater than the number of sides.\n\nUse the `randint` function that you imported earlier to generate a random integer between `1` and `number_of_sides`. The syntax for the function looks like:\n\n```py\nx = randint(low, high)\n```\n\nSet the result equal to a variable called `first_roll`."
                                        },
                                        {
                                            "hint": "```py\ndef roll_dice(number_of_sides):\n  first_roll = randint(1, number_of_sides)\n  second_roll = randint(1, number_of_sides)\n```",
                                            "task_key": "0_11",
                                            "text": "On the next line, simulate the second roll. \n\nThis line of code will look almost identical to the code from the last task. However, this time, set the result equal to a variable called `second_roll`."
                                        },
                                        {
                                            "hint": "```py\ndef roll_dice(number_of_sides):\n  first_roll = randint(1, number_of_sides)\n  second_roll = randint(1, number_of_sides)\n  max_val = number_of_sides * 2\n```\n\nAt this point, we have three variables inside this function:\n- `first_roll`\n- `second_roll`\n- `max_val`",
                                            "task_key": "0_12",
                                            "text": "Now let's calculate the maximum value the program can possibly roll. This will help us set some rules for the game later. \n\nOn the next line, create a variable called `max_val` and set it equal to `number_of_sides` times 2 (since there are two dice)."
                                        },
                                        {
                                            "hint": "`%d` is used to format integers:\n\n```py\ndef roll_dice(number_of_sides):\n  first_roll = randint(1, number_of_sides)\n  second_roll = randint(1, number_of_sides)\n  max_val = number_of_sides * 2\n  print \"The maximum possible value is: %d\" % max_val\n```",
                                            "task_key": "0_13",
                                            "text": "On the next line, let the user know what the maximum possible value is by using  \u003ca href=\"https://www.codecademy.com/courses/learn-python/lessons/strings--console-output/exercises/string-formatting-with--part-\" target=\"_blank\" rel=\"noopener noreferrer\"\u003estring formatting\u003c/a\u003e to print the `max_val`.\n\nRemember, `max_val` is an integer so use `%d`."
                                        },
                                        {
                                            "hint": "```py\ndef roll_dice(number_of_sides):\n  first_roll = randint(1, number_of_sides)\n  second_roll = randint(1, number_of_sides)\n  max_val = number_of_sides * 2\n  print \"The maximum possible value is: %d\" % max_val\n  guess = get_user_guess()\n```\n\nNote: The name of the variable does not have to be `guess`, it could be anything. In the context of this program, this variable name makes sense and makes your code easier for other developers to read and follow.",
                                            "task_key": "0_15",
                                            "text": "On the next line, call the `get_user_guess()` function. Remember that the function will return the user's guess after prompting the user. \n\nStore the returned value into a variable called `guess`."
                                        },
                                        {
                                            "hint": "```py\ndef roll_dice(number_of_sides):\n  # ...\n  guess = get_user_guess()\n  if guess \u003e max_val:\n```\n\nIn the hint above, `# ...` simply indicates that the code has been abbreviated to avoid a lengthy hint. Actual code should not be removed or replaced.",
                                            "task_key": "0_16",
                                            "text": "Great! We have written code that simulates a dice roll and asks the user for their guess. Now it's time to write the rules that will determine the winner of the game. \n\nBut what if the user guesses a number that's larger than the total possible value of the dice roll? That shouldn't be allowed...\n\nOn the next line, write an `if` statement that checks if the user's guess is greater than the maximum value."
                                        },
                                        {
                                            "hint": "```py\ndef roll_dice(number_of_sides):\n  # ...\n  if guess \u003e max_val:\n    print \"No guessing higher than the maximum possible value!\"\n```\n\nIn the hint above, `# ...` simply indicates that the code has been abbreviated to avoid a lengthy hint. Actual code should not be removed or replaced.",
                                            "task_key": "0_17",
                                            "text": "Within the `if` block, let the user know that their guess is invalid by printing an appropriate message. "
                                        },
                                        {
                                            "hint": "You should see the program run and prompt you for your guess. \n\nInput a number higher than `12` and press \u003ckbd\u003eenter\u003c/kbd\u003e on your keyboard. \n\nFor example, if you guess `20`, you should get the message:\n\n```bash\n$ python NumberGuess.py\nThe maximum possible value is: 12\nGuess a number: 20\nNo guess higher than the maximum possible value!\n```\n\nMake sure you code is working properly before moving on!",
                                            "task_key": "0_26_004483500377370642",
                                            "text": "This is a good time to pause and test your program!\n\nSomewhere outside of the `roll_dice` function, call the `roll_dice` function:\n```py\nroll_dice(6)\n```\n\nClick Save. Then, in the terminal, type the following command and press \u003ckbd\u003eenter\u003c/kbd\u003e:\n\n```shell\npython NumberGuess.py\n```\n\nTest the code by guessing a number higher than `12`, the maximum possible number."
                                        },
                                        {
                                            "hint": "```py\ndef roll_dice(number_of_sides):\n  # ...\n  if guess \u003e max_val:\n    print \"No guessing higher than the maximum possible value!\"\n  else:\n    print \"Rolling...\"\n```",
                                            "task_key": "0_18",
                                            "text": "Let's continue on!\n\nAdd to the `if` statement by starting an `else` block. \n\nInside of the `else` block, print the message `Rolling...` to the user."
                                        },
                                        {
                                            "hint": "To \"sleep\" a program means to delay it from processing the next line of code by an amount of time that you specify.\n\nSleeping a program is not common practice. We are using it in this project to practice to simulate dice rolls:\n\n```py\ndef roll_dice(number_of_sides):\n  # ...\n  if guess \u003e max_val:\n    print \"No guessing higher than the maximum possible value!\"\n    return\n  else:\n    print \"Rolling...\"\n    sleep(2)\n```",
                                            "task_key": "0_19",
                                            "text": "Staying inside the `else` block, `sleep` the program for 2 seconds on the next line to simulate the dice rolling:\n\n```py\nsleep(2)\n```"
                                        },
                                        {
                                            "hint": "```py\ndef roll_dice(number_of_sides):\n  # ...\n  if guess \u003e max_val:\n    # ...\n  else:\n    print \"Rolling...\"\n    sleep(2)\n    print \"The 1st roll is: %d\" % first_roll\n    sleep(1)\n```\n\nIn the hint above, `# ...` simply indicates that the code has been abbreviated to avoid a lengthy hint. Actual code should not be removed or replaced.",
                                            "task_key": "0_20",
                                            "text": "On the next line, use \u003ca href=\"https://www.codecademy.com/courses/learn-python/lessons/strings--console-output/exercises/string-formatting-with--part-\" target=\"_blank\" rel=\"noopener noreferrer\"\u003estring formatting\u003c/a\u003e to print the first roll. \n\nRemember that you stored the first roll in an `int` variable earlier, so use `%d`. \n\nThen, on the next line, sleep the program for 1 second."
                                        },
                                        {
                                            "hint": "```py\ndef roll_dice(number_of_sides):\n  # ...\n  if guess \u003e max_val:\n    # ...\n  else:\n    print \"Rolling...\"\n    sleep(2)\n    print \"The 1st roll is: %d\" % first_roll\n    sleep(1)\n    print \"The 2nd roll is: %d\" % second_roll\n    sleep(1)\n```\n\nIn the hint above, `# ...` simply indicates that the code has been abbreviated to avoid a lengthy hint. Actual code should not be removed or replaced.",
                                            "task_key": "0_21",
                                            "text": "On the next line, `print` the value of the second roll. \n\nOn the line after that, `sleep` the program again for 1 second."
                                        },
                                        {
                                            "hint": "```py\ndef roll_dice(number_of_sides):\n  # ...\n  if guess \u003e max_val:\n    # ...\n  else:\n    # ...\n    total_roll = first_roll + second_roll\n```\n\nIn the hint above, `# ...` simply indicates that the code has been abbreviated to avoid a lengthy hint. Actual code should not be removed or replaced.",
                                            "task_key": "0_22",
                                            "text": "To determine a winner, we will need to use the total value of the dice roll. \n\nOn the next line, create a variable called `total_roll` and set it equal to the sum of the first roll and the second roll."
                                        },
                                        {
                                            "hint": "```py\ndef roll_dice(number_of_sides):\n  # ...\n  if guess \u003e max_val:\n    # ...\n  else:\n    # ...\n    total_roll = first_roll + second_roll\n    print \"The total value is: %d\" % total_roll\n    print \"Result...\"\n    sleep(1)\n```\n\nIn the hint above, `# ...` simply indicates that the code has been abbreviated to avoid a lengthy hint. Actual code should not be removed or replaced.",
                                            "task_key": "0_23",
                                            "text": "On the next line, `print` the total roll to the user.\n\nOn the following line, `print` the message `Result...` to the user. \n\nDirectly after that, `sleep` the program for 1 second to build suspense!"
                                        },
                                        {
                                            "hint": "```py\ndef roll_dice(number_of_sides):\n  # ...\n  if guess \u003e max_val:\n    # ...\n  else:\n    # ...\n    if guess == total_roll:\n      print \"You won!\"\n```\n\nIn the hint above, `# ...` simply indicates that the code has been abbreviated to avoid a lengthy hint. Actual code should not be removed or replaced.",
                                            "task_key": "0_24",
                                            "text": "Keeping inside of the `else` block, add an `if` statement checks if the user's guess is equal to the total roll. \n\nIf it is, `print` a friendly message to the user informing them that they won."
                                        },
                                        {
                                            "hint": "```py\ndef roll_dice(number_of_sides):\n  # ...\n  if guess \u003e max_val:\n    # ...\n  else:\n    # ...\n    if guess == total_roll:\n      # ...\n    else:\n      print \"You lost, try again.\"\n```\n\nIn the hint above, `# ...` simply indicates that the code has been abbreviated to avoid a lengthy hint. Actual code should not be removed or replaced.",
                                            "task_key": "0_25",
                                            "text": "What if the user's guess is not equal to the total roll? \n\nInside of an `else` block, `print` a message to the user informing them that they lost."
                                        },
                                        {
                                            "hint": "```py\ndef get_user_guess():\n  # ...\n\ndef roll_dice(number_of_sides):\n  # ...\n   \nroll_dice(6) \n```\n\nIn the hint above, `# ...` simply indicates that the code has been abbreviated to avoid a lengthy hint. Actual code should not be removed or replaced.",
                                            "task_key": "0_26",
                                            "text": "Great! We're almost done! For this program to run, we have to call the function. \n\nSomewhere outside of the `roll_dice` function, call the `roll_dice` function. \n\nMake sure to specify the number of sides a single die has as the argument!"
                                        },
                                        {
                                            "hint": "Try guessing seven a couple of times, you should get the winning output once in a while:\n\n```bash\n$ python NumberGuess.py\nThe maximum possible value is: 12\nGuess a number: 7\nRolling...\nThe 1st roll is: 6\nThe 2nd roll is: 1\nThe total value is: 7\nResult...\nYou won!\n```\n\nGuessing seven has the highest chance of winning. \n\nWant to know why?\n\nThe probability of rolling two dice and it coming out as seven is 1/6. Here are all the possible outcomes rolling a seven:\n- (1, 6)\n- (2, 5)\n- (3, 4)\n- (4, 3)\n- (5, 2)\n- (6, 1)\n\n",
                                            "task_key": "0_27",
                                            "text": "Finally, let's play Number Guess! \n\nFirst, click Save. Then, in the terminal, type the following command and press \u003ckbd\u003eenter\u003c/kbd\u003e:\n\n```shell\npython NumberGuess.py\n```\n\nDid you win or lose?"
                                        }
                                    ]
                                }
                            ],
                            "components": [
                                {
                                    "id": "5c34904e1d19727d7ef7e00a",
                                    "type": "Terminal",
                                    "shell": "bash",
                                    "prevent_checkpoint_run": null,
                                    "fake_responses": []
                                },
                                {
                                    "id": "5c34904e1d19727d7ef7e00b",
                                    "type": "PersistentCodeEditor",
                                    "files": [
                                        "NumberGuess.py"
                                    ],
                                    "navigator_disabled": true,
                                    "no_run_button": null
                                }
                            ]
                        }
                    },
                    {
                        "id": "789f0f7e671ef98aa96372129896fd8e",
                        "description": null,
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "learn-python-python-unit-4",
                        "title": "Functions",
                        "time": 6,
                        "type": "quiz",
                        "assessment_ids": [
                            "5b1da4741d176d7bdd04f98f",
                            "5b1da4741d176d7bdd04f994",
                            "5b1da4741d176d7bdd04f99a",
                            "5b1da4741d176d7bdd04f9a0",
                            "5b1da4741d176d7bdd04f9a6",
                            "5b1da4741d176d7bdd04f9ac"
                        ],
                        "assessments": [
                            {
                                "id": "5b1da4741d176d7bdd04f98f",
                                "type": "multiple_choice",
                                "prompt": "The `cube` function has a single parameter. What is a valid call to the function?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`cube(3)`",
                                        "reason": "Correct! `3` is the argument it takes."
                                    },
                                    {
                                        "text": "`cube()`",
                                        "reason": "It should take an argument like `cube(6)` or `cube(12)`."
                                    },
                                    {
                                        "text": "`cube(3, 5)`",
                                        "reason": "Oops, that takes two arguments."
                                    },
                                    {
                                        "text": "`def cube(3)`",
                                        "reason": "The `def` keyword is used when *defining* a function. It is not used when *calling* a function."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": null
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f994",
                                "type": "multiple_choice",
                                "prompt": "What will this return?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "-8",
                                        "reason": "Correct! -2 - 6 = -8"
                                    },
                                    {
                                        "text": "4",
                                        "reason": "-2 - 6 = -8"
                                    },
                                    {
                                        "text": "-4",
                                        "reason": "-2 - 6 = -8"
                                    },
                                    {
                                        "text": "8",
                                        "reason": "-2 - 6 = -8"
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "min(2, -2, 3) - max(6, -6)\n"
                                }
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f99a",
                                "type": "multiple_choice",
                                "prompt": "What will this return?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "5",
                                        "reason": "Correct! 2 * 4 - 3 = 5"
                                    },
                                    {
                                        "text": "25",
                                        "reason": "Oops! `min(2, 7)` is 2 and 2 * 4 - 3 = 5"
                                    },
                                    {
                                        "text": "9",
                                        "reason": "Oops! `max(2, -36, 4)` is 4 and 2 * 4 - 3 = 5"
                                    },
                                    {
                                        "text": "11",
                                        "reason": "Oops! `abs(-3)` is 3 and 2 * 4 - 3 = 5"
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "min(2, 7) * max(2, -36, 4) - abs(-3)\n"
                                }
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f9a0",
                                "type": "multiple_choice",
                                "prompt": "Fill in the blank to create the output `I've a feeling we're not in Kansas anymore.`:",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`\"Kansas\"`",
                                        "reason": "Correct! Including the double quotes makes it a string."
                                    },
                                    {
                                        "text": "`Kansas`",
                                        "reason": "Oops, not including the double quotes makes it a variable name, instead of a string."
                                    },
                                    {
                                        "text": "`x`",
                                        "reason": "This will only work if there is a line that says `x = \"Kansas\"`."
                                    },
                                    {
                                        "text": "`\"Radio Wave\"`",
                                        "reason": "The output would be `I've a feeling we're not in Radio Wave anymore.`"
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "def quote(x):\n\n  print \"I've a feeling we're not in \" + x + \" anymore.\"\n  \nquote(________)\n"
                                }
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f9a6",
                                "type": "multiple_choice",
                                "prompt": "What will this print to the console?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`\u003ctype 'int'\u003e`",
                                        "reason": "Correct! The `type()` function returns the type of the data it receives as an argument."
                                    },
                                    {
                                        "text": "`1`",
                                        "reason": "The `type()` function returns the type of the data it receives as an argument."
                                    },
                                    {
                                        "text": "`int`",
                                        "reason": "The data type is `int`, but it would return `\u003ctype 'int'\u003e`."
                                    },
                                    {
                                        "text": "`\u003ctype 'float'\u003e`",
                                        "reason": "This would be correct if the code was `print type(5.0)`."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "print type(5)\n"
                                }
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f9ac",
                                "type": "multiple_choice",
                                "prompt": "What does `from math import *` do?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "It imports *everything* from the math module.",
                                        "reason": "Correct!"
                                    },
                                    {
                                        "text": "It imports the `*` method from the math module.",
                                        "reason": "`*` is the universal import. It imports everything."
                                    },
                                    {
                                        "text": "It imports the `math` method from the `*` module.",
                                        "reason": "Oops, `math` is the module and `*` means all the methods."
                                    },
                                    {
                                        "text": "It imports the *first* method from the math module.",
                                        "reason": "`*` is the universal import. It imports everything."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": null
                            }
                        ]
                    },
                    {
                        "id": "20751a9a4528015a2a53626056e3d0f7",
                        "description": "Lists and dictionaries are powerful tools you can use to store, organize, and manipulate all kinds of information.",
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "python-lists-and-dictionaries",
                        "title": "Python Lists and Dictionaries",
                        "time": 67,
                        "type": "lesson",
                        "published_exercise_ids": [
                            "e6182f84e62da6f8799863f2bdf238b9",
                            "6c949743e19c4dcb0c7a2667b98f4344",
                            "2db08028b4890193eb2a0213b178966f",
                            "617fc94ba4dbd085bb0455a0fa294df2",
                            "b8d2d59b6da75e3162e9568c674ab706",
                            "8ce373f5549098153eb03dde3210b972",
                            "8fc35c182461fddaaddfdb51e31be8cc",
                            "881571a5a9e0b74333fd06e5e9b99000",
                            "e1cb88f99769096456f19b3627a64578",
                            "340e2ffce5970fc41ad2e0c82023165e",
                            "82aa0e2ad287a6047a1d1c53465fbc80",
                            "6cb96994cc30372583d88af1cdd19a1f",
                            "968c0886cf8b9457d12e8af3e885120a",
                            "38e094cacfd40dc3eb62d7916506e1da"
                        ],
                        "exercise_ids": [
                            "e6182f84e62da6f8799863f2bdf238b9",
                            "6c949743e19c4dcb0c7a2667b98f4344",
                            "2db08028b4890193eb2a0213b178966f",
                            "617fc94ba4dbd085bb0455a0fa294df2",
                            "b8d2d59b6da75e3162e9568c674ab706",
                            "8ce373f5549098153eb03dde3210b972",
                            "8fc35c182461fddaaddfdb51e31be8cc",
                            "881571a5a9e0b74333fd06e5e9b99000",
                            "e1cb88f99769096456f19b3627a64578",
                            "340e2ffce5970fc41ad2e0c82023165e",
                            "82aa0e2ad287a6047a1d1c53465fbc80",
                            "6cb96994cc30372583d88af1cdd19a1f",
                            "968c0886cf8b9457d12e8af3e885120a",
                            "38e094cacfd40dc3eb62d7916506e1da"
                        ]
                    },
                    {
                        "id": "2bdba3453111e7c775ea66e85e4fde42",
                        "description": "Let's manage our own supermarket and buy some goods along the way!\r\n",
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "a-day-at-the-supermarket",
                        "title": "A Day at the Supermarket",
                        "time": 59,
                        "type": "lesson",
                        "published_exercise_ids": [
                            "0a8f5665a3ed474a1f4b97741bdd1a8c",
                            "c61a91a882cab063b89976cc37a9730a",
                            "3d67707ffcee859b80ad47e9debd12c7",
                            "87666f72236c76176aecc1d6185829a3",
                            "befffa38a8002730d9ee50936e78ebcd",
                            "98010513f8e1e688f45c49c7fdd14d86",
                            "7495d373eaefbd1f86a46540cf7588fc",
                            "425a04a224198416a0aa0a34ee9c9b91",
                            "365fc163f54b8d4beb5fbdd1c8d1d293",
                            "9955d4fc3604e9ecfe70a088370b119f",
                            "705dfbfa70172fe51785f9af2dd76afd",
                            "19703ca89b82d76c3f95019f208e6e81",
                            "ecae732ad5d0ccdab4d9ecbc8a5624bd"
                        ],
                        "exercise_ids": [
                            "0a8f5665a3ed474a1f4b97741bdd1a8c",
                            "c61a91a882cab063b89976cc37a9730a",
                            "3d67707ffcee859b80ad47e9debd12c7",
                            "87666f72236c76176aecc1d6185829a3",
                            "befffa38a8002730d9ee50936e78ebcd",
                            "98010513f8e1e688f45c49c7fdd14d86",
                            "7495d373eaefbd1f86a46540cf7588fc",
                            "425a04a224198416a0aa0a34ee9c9b91",
                            "365fc163f54b8d4beb5fbdd1c8d1d293",
                            "9955d4fc3604e9ecfe70a088370b119f",
                            "705dfbfa70172fe51785f9af2dd76afd",
                            "19703ca89b82d76c3f95019f208e6e81",
                            "ecae732ad5d0ccdab4d9ecbc8a5624bd"
                        ]
                    },
                    {
                        "id": "15b4c241174921845eec4a54893e6e76",
                        "description": "It's time to build fluency in Python conditionals. In this next Pro Project, we're going to practice conditionals in Python so you can hone your skills and feel confident taking them to the real world.\nWhy? Given a certain input you want to return a certain output. It's time to harness \"\"If this than that.\"\"  What's next? Practicing conditionals with games and more Python. You got this! ",
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "rock-paper-scissors-python",
                        "title": "Rock, Paper, Scissors",
                        "time": 57,
                        "type": "project",
                        "standalone": false,
                        "project_information": {
                            "ein_config": {
                                "extensions": {
                                    "python": {
                                        "cmds": [
                                            "python {{ .fileName }}"
                                        ]
                                    },
                                    "py2": {
                                        "cmds": [
                                            "python {{ .fileName }}"
                                        ]
                                    },
                                    "python2": {
                                        "cmds": [
                                            "python {{ .fileName }}"
                                        ]
                                    }
                                },
                                "container_type": "python",
                                "server": "http"
                            },
                            "download_path": null,
                            "objective": "In this project, we'll build \u003ca href=\"https://en.wikipedia.org/wiki/Rock-paper-scissors\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eRock-Paper-Scissors\u003c/a\u003e!\n\nThe program should do the following:\n\n1. Prompt the user to select either Rock, Paper, or Scissors.\n2. Instruct the computer to randomly select either Rock, Paper, or Scissors.\n3. Compare the user's choice and the computer's choice.\n4. Determine a winner (the user or the computer).\n5. Inform the user who the winner is.\n\nHappy coding!\n\nIf you get stuck during this project, check out the **project walkthrough video** which can be found at the bottom of the page after the final step of the project.",
                            "preview_url": null,
                            "thumbnail_url": null,
                            "video_url": "https://www.youtube.com/watch?v=jxyrSodMJ0A",
                            "workspace": {
                                "id": "5c3490511d19727d7ef7e0ab",
                                "slug": "python-ext-prj_rock-paper-scissors",
                                "type": "python"
                            },
                            "self_assessments": [
                                {
                                    "heading": "Rock, Paper, Scissors",
                                    "tasks": [
                                        {
                                            "hint": "It's helpful to let other developers know what your program does. \n\n```py\n\"\"\"\nThis is a \nmulti-line\ncomment!\n\"\"\"\n```\n\nFor this program, you can write something like:\n```py\n\"\"\"\nCodecademy - Learn Python\nRock Paper Scissors\n\"\"\"\n```",
                                            "task_key": "0_0",
                                            "text": "Begin by writing a multi-line comment that describes what this program will do. "
                                        },
                                        {
                                            "hint": "This is the syntax for importing:\n\n```py\nfrom module import function\n```\n\n`random` is the module, whereas `randint` is the function inside of the module:\n\n```py\nfrom random import randint\n```",
                                            "task_key": "0_1",
                                            "text": "Since the computer will select Rock, Paper, or Scissors randomly, we will need the `randint` function – which is not built-in.\n\nUse a \u003ca href=\"https://www.codecademy.com/courses/learn-python/lessons/functions/exercises/function-imports\" target=\"_blank\" rel=\"noopener noreferrer\"\u003efunction import\u003c/a\u003e to import `randint` from the `random` module."
                                        },
                                        {
                                            "hint": "They represent the three choices:\n\n```py\noptions = [\"ROCK\", \"PAPER\", \"SCISSORS\"]\n```",
                                            "task_key": "0_3",
                                            "text": "We've imported the code that we will use later. Let's move on!\n\nCreate a list called `options` and store `\"ROCK\"`, `\"PAPER\"`, and `\"SCISSORS\"` as strings."
                                        },
                                        {
                                            "hint": "```py\nmessage = {\n  \"tie\": \"Yawn it's a tie!\",\n  \"won\": \"Yay you won!\",\n  \"lost\": \"Aww you lost!\"\n}\n```",
                                            "task_key": "0_4",
                                            "text": "The user will either win or lose in the game, so the program will need to print win/lose messages to the user later.\n\nCreate a dictionary called `message` with three key-value pairs:\n\n- key `\"tie\"` points to value `\"Yawn it's a tie!\"`\n- key `\"won\"` points to value `\"Yay you won!\"`\n- key `\"lost\"` points to value `\"Aww you lost!\"`"
                                        },
                                        {
                                            "hint": "```py\ndef decide_winner(user_choice, computer_choice):\n```\nDon't forget the colon `:`!",
                                            "task_key": "0_6",
                                            "text": "Let's write a function that decides who the winner is. \n\nCreate a function called `decide_winner`. The function should take two parameters: `user_choice` and `computer_choice`."
                                        },
                                        {
                                            "hint": "```py\ndef decide_winner(user_choice, computer_choice):\n  print \"You selected: %s\" % user_choice\n```\n\nMake sure this line is indented by hitting the \u003ckbd\u003espace\u003c/kbd\u003e twice.",
                                            "task_key": "0_7",
                                            "text": "Let's start building the `decide_winner` function. \n\nFirst, print the `user_choice`, the first parameter, using \u003ca href=\"https://www.codecademy.com/courses/learn-python/lessons/strings--console-output/exercises/string-formatting-with--part-\" target=\"_blank\" rel=\"noopener noreferrer\"\u003estring formatting\u003c/a\u003e. "
                                        },
                                        {
                                            "hint": "Similar to the last task:\n\n```py\ndef decide_winner(user_choice, computer_choice):\n  print \"You selected: %s\" % user_choice\n  print \"Computer selected: %s\" % computer_choice\n```",
                                            "task_key": "0_8",
                                            "text": "On the next line, print the `computer_choice`, the second parameter, use string formatting."
                                        },
                                        {
                                            "hint": "```py\ndef decide_winner(user_choice, computer_choice):\n  # ...\n  if user_choice == computer_choice:\n    print message[\"tie\"]\n```",
                                            "task_key": "0_12",
                                            "text": "How do we determine the result? \n\nStart by adding an `if` statement that checks if the `user_choice` is equal to the `computer_choice`. This means it's a tie!\n\nInside the `if` statement, print the message to the user informing them of the tie. The message is stored under the `\"tie\"` key in `message` dictionary."
                                        },
                                        {
                                            "hint": "In `options`, `\"ROCK\"` has an index of 0 and \"`SCISSORS`\" has an index of 2.\n\n```py\noptions = [\"ROCK\", \"PAPER\", \"SCISSORS\"]\n```\n\nThe code below translates to: *else if user's choice is equal to `\"ROCK\"` and computer's choice is equal to `\"SCISSORS\"`, then print the winning message.*\n\n```py\ndef decide_winner(user_choice, computer_choice):\n  # ...\n\n  if user_choice == computer_choice:\n    print message[\"tie\"]\n  elif user_choice == options[0] and computer_choice == options[2]:\n    print message[\"won\"]\n```\n",
                                            "task_key": "0_15",
                                            "text": "Now it's time to think of the scenarios in which the user wins: \n\n* **User:** Rock, **Computer:** Scissors\n* **User:** Paper, **Computer:** Rock\n* **User:** Scissors, **Computer:** Paper\n\nLet's take care of the first bullet point!\n\nAdd an `elif` statement that checks if the user selects Rock `and` the computer selects Scissors. \n\nRemember, we can compare `user_choice` and `computer_choice` with the items in `options` by their index.\n\nInside the statement, print the winning message, which is the value stored under the `\"won\"` key in `message` dictionary."
                                        },
                                        {
                                            "hint": "```py\ndef decide_winner(user_choice, computer_choice):\n  # ...\n\n  if user_choice == computer_choice:\n    print message[\"tie\"]\n  elif user_choice == options[0] and computer_choice == options[2]:\n    print message[\"won\"]\n  elif user_choice == options[1] and computer_choice == options[0]:\n    print message[\"won\"]\n  elif user_choice == options[2] and computer_choice == options[1]:\n    print message[\"won\"]\n```",
                                            "task_key": "0_16",
                                            "text": "Perfect! But that takes care of only one scenario where the user wins. \n\nAdd two more `elif` statements that print the winning message when the user wins. \n\nYou can use the scenarios from task 9 to help you."
                                        },
                                        {
                                            "hint": "```py\ndef decide_winner(user_choice, computer_choice):\n  # ...\n  if user_choice == computer_choice:\n    # ...\n  # An elif statement goes here\n    # ...\n  # An elif statement goes here\n    # ...\n  # An elif statement goes here\n    # ...\n  else:\n    print message[\"lost\"]\n```",
                                            "task_key": "0_18",
                                            "text": "Finally, we've taken care of all of the cases where the user could win. But what if none of these conditions are met? \n\nIf it's not a tie, and the user did not win, that only means the user lost!\n\nAdd an `else` block and print the losing message inside of it."
                                        },
                                        {
                                            "hint": "```py\ndef play_RPS():\n```",
                                            "task_key": "0_19",
                                            "text": "Great! We have the function that will decide who the winner is between the user and the computer, but we haven't written a function that actually starts the game. Let's do that now.\n\nCreate a new function called `play_RPS()`."
                                        },
                                        {
                                            "hint": "```py\ndef play_RPS():\n  user_choice = raw_input(\"Enter Rock, Paper, or Scissors: \")\n```",
                                            "task_key": "0_21",
                                            "text": "Inside the function, we'll have to prompt the user for their selection.\n\nPrompt them with the message: `\"Enter Rock, Paper, or Scissors: \"`\n\nStore their input in a variable called `user_choice`."
                                        },
                                        {
                                            "hint": "```py\ndef play_RPS():\n  print \"Rock, Paper, or Scissors?\"\n  user_choice = raw_input(\"Select Rock, Paper, or Scissors: \")\n  user_choice = user_choice.upper()\n```\n\nNow, lowercase will be converted to uppercase. For example:\n\n- `rock` → `ROCK`\n- `Rock` → `ROCK`",
                                            "task_key": "0_22",
                                            "text": "Convert the user's choice to uppercase in case they type in lowercase `rock`, `paper`, or `scissors`.\n"
                                        },
                                        {
                                            "hint": "```py\ndef play_RPS():\n  user_choice = raw_input(\"Enter Rock, Paper, or Scissors: \")\n  user_choice = user_choice.upper()\n  computer_choice = options[randint(0, 2)]\n```\n\n`randint(0, 2)` will return an integer that's either 0, 1, or 2.\n\nThe item in `options` at this random integer index will be either `\"ROCK\"`, `\"PAPER\"`, or `\"SCISSORS\"`.",
                                            "task_key": "0_23",
                                            "text": "The computer has to play too! Remember, the computer's choice has to be random, so we'll make use of `randint` to accomplish that.\n\nRemember, \u003ca href=\"https://docs.python.org/2/library/random.html#random.randint\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ethis\u003c/a\u003e is how the `randint` function works: `randint(low, high)`\n\nOn the next line, create a variable called `computer_choice`. \n\nSet the variable equal to an item in `options` at a random index (0 to 2).\n"
                                        },
                                        {
                                            "hint": "```py\ndef play_RPS():\n  # ...\n  decide_winner(user_choice, computer_choice)\n```\n\nIn the hint above, `# ...` simply indicates that the code has been abbreviated to avoid a lengthy hint. Actual code should not be removed or replaced.",
                                            "task_key": "0_26",
                                            "text": "Great! The user has now submitted their choice and the computer has also made a random choice. It's time to determine a winner. Thankfully, we already wrote a function that can do that.\n\nOn the next line, call the `decide_winner` function. Pass in `user_choice` as the first argument and `computer_choice` as the second argument."
                                        },
                                        {
                                            "hint": "```py\n# ...\n\ndef decide_winner(user_choice, computer_choice):\n  # ...\n\ndef play_RPS():\n  # ...\n\nplay_RPS()\n```\n\nIn the hint above, `# ...` simply indicates that the code has been abbreviated to avoid a lengthy hint. Actual code should not be removed or replaced.",
                                            "task_key": "0_27",
                                            "text": "Our program won't run unless we call the correct function! On the next line, call the `play_RPS()` function. Make sure it's outside of any other function."
                                        },
                                        {
                                            "hint": "Here is a sample output when there is a tie:\n\n```bash\n$ python RPS.py\nEnter Rock, Paper, or Scissors: Rock\nYou selected: ROCK\nComputer selected: ROCK\nYawn it's a tie!\n```\n\nHere is a sample output when the user wins:\n\n```bash\n$ python RPS.py\nEnter Rock, Paper, or Scissors: Rock\nYou selected: ROCK\nComputer selected: PAPER\nYay you won!\n```\n\n\u003cp\u003e\nIf you are feeling ambitious, try modifying your program so that it plays \u003ca href=\"http://bigbangtheory.wikia.com/wiki/Rock_Paper_Scissors_Lizard_Spock\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eRock, Paper, Scissors, Lizard, Spock\u003c/a\u003e!",
                                            "task_key": "0_28",
                                            "text": "You worked really hard to create this game. Now it's time to sit back and be amazed at how far you've come!\n\nFirst, click Save. Then, in the terminal, type the following command and press \u003ckbd\u003eEnter\u003c/kbd\u003e:\n\n```shell\npython RPS.py\n```\n\nYou have built a Rock, Paper, Scissors program. Congrats!"
                                        }
                                    ]
                                }
                            ],
                            "components": [
                                {
                                    "id": "5c3490511d19727d7ef7e0aa",
                                    "type": "PersistentCodeEditor",
                                    "files": [
                                        "RPS.py"
                                    ],
                                    "navigator_disabled": true,
                                    "no_run_button": null
                                },
                                {
                                    "id": "5c3490511d19727d7ef7e0a9",
                                    "type": "Terminal",
                                    "shell": "bash",
                                    "prevent_checkpoint_run": null,
                                    "fake_responses": []
                                }
                            ]
                        }
                    },
                    {
                        "id": "897ccb4ecdeee9c54c4760514f8da65e",
                        "description": null,
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "learn-python-python-unit-5",
                        "title": "Lists and Dictionaries",
                        "time": 6,
                        "type": "quiz",
                        "assessment_ids": [
                            "5b1da4741d176d7bdd04f9b1",
                            "5b1da4741d176d7bdd04f9b7",
                            "5b1da4741d176d7bdd04f9ba",
                            "5b1da4741d176d7bdd04f9bf",
                            "5b1da4741d176d7bdd04f9c5",
                            "5b1da4741d176d7bdd04f9cb"
                        ],
                        "assessments": [
                            {
                                "id": "5b1da4741d176d7bdd04f9b1",
                                "type": "multiple_choice",
                                "prompt": "What will be the value of `colors` after the following code is run?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`[\"light blue\", \"pink\"]`",
                                        "reason": "Correct! We are changing the value at index 1 from `\"yellow\"` to `\"pink\"`."
                                    },
                                    {
                                        "text": " `[\"pink\", \"yellow\"]`",
                                        "reason": "Oops, list indices begin with 0, not 1. This means that `colors[1]` is its second element."
                                    },
                                    {
                                        "text": "`[\"light blue\", \"yellow\"]`",
                                        "reason": "Oops, the value at index 1 was changed."
                                    },
                                    {
                                        "text": " `[\"light blue\", \"yellow\", \"pink\"]`",
                                        "reason": "We are not *adding* a new value to the end of the list. We are *replacing* what's at index 1 with a new value."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "colors = [\"light blue\", \"yellow\"]\n\ncolors[1] = \"pink\"\n"
                                }
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f9b7",
                                "type": "multiple_choice",
                                "prompt": "`list[a:b]` will return the portion of `list` starting with index a and ending *before* index b.",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "True",
                                        "reason": "We include the element with the first index, a, but we *exclude* the element with the second index, b."
                                    },
                                    {
                                        "text": "False",
                                        "reason": "We include the element with the first index, a, but we *exclude* the element with the second index, b."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": null
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f9ba",
                                "type": "multiple_choice",
                                "prompt": "What is the correct syntax to write a `for` loop to iterate through the list `grades`?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`for variable in grades:`",
                                        "reason": "Correct!"
                                    },
                                    {
                                        "text": "`for variable in grades`",
                                        "reason": "Oops, this is missing a colon `:`."
                                    },
                                    {
                                        "text": "`variable in grades:`",
                                        "reason": "Oops, this is missing the `for` keyword."
                                    },
                                    {
                                        "text": "`for variable:`",
                                        "reason": "Oops, missing the list name."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": null
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f9bf",
                                "type": "multiple_choice",
                                "prompt": "What will this code print?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`6`",
                                        "reason": "Correct! The key `\"pants\"` points to the value `6`."
                                    },
                                    {
                                        "text": "`\"pants\": 6`",
                                        "reason": "The key is not printed, only the value."
                                    },
                                    {
                                        "text": "`pants`",
                                        "reason": "The key `\"pants\"` points to the value `6`."
                                    },
                                    {
                                        "text": "1",
                                        "reason": "Oops, are you thinking of the index? A dictionary is similar to a list, but you access values by looking up a *key* instead of an index. "
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "closet = {\"shirts\": 12, \"pants\": 6, \"shoes\": 4}\n\nprint closet[\"pants\"]\n"
                                }
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f9c5",
                                "type": "multiple_choice",
                                "prompt": "What will be the value of `authors` after the following code is run?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`[\"Martin\", \"Rowling\", \"Tolkien\"]`",
                                        "reason": "Correct! `sort()` sort `authors` in alphabetical order. The correct order is `M`, `R`, `T`."
                                    },
                                    {
                                        "text": "`[\"Tolkien\", \"Rowling\", \"Martin\"]`",
                                        "reason": "Oops, this is the reverse alphabetical order."
                                    },
                                    {
                                        "text": "`[\"Rowling\"]`",
                                        "reason": "Oops, `sort()` does not delete any elements."
                                    },
                                    {
                                        "text": "`[\"Martin\"]`",
                                        "reason": "Oops, `sort()` does not delete any elements."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "authors = [\"Rowling\", \"Tolkien\", \"Martin\"]\n\nauthors.sort()"
                                }
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f9cb",
                                "type": "multiple_choice",
                                "prompt": "What will be the value of `last_jedi` after the following code is run?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`[\"kylo\", \"rey\", \"finn\"]`",
                                        "reason": "Correct! `remove()` removes the first item from `last_jedi` that matches the string `luke`."
                                    },
                                    {
                                        "text": "`[\"kylo\", \"rey\", \"finn\", \"luke\"]`",
                                        "reason": "`remove()` removes the first item from `last_jedi` that matches the string `luke`."
                                    },
                                    {
                                        "text": "`3`",
                                        "reason": "`remove()` does not return the index number."
                                    },
                                    {
                                        "text": "`4`",
                                        "reason": "`remove()` does not return the index number."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "last_jedi = [\"kylo\", \"rey\", \"finn\", \"luke\"]\n\nlast_jedi.remove(\"luke\")"
                                }
                            }
                        ]
                    },
                    {
                        "id": "0804bb91e51ecda5137d88413d8dfff6",
                        "description": "Use what you've learned so far to manage your own class.",
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "student-becomes-the-teacher",
                        "title": "Student Becomes the Teacher",
                        "time": 36,
                        "type": "lesson",
                        "published_exercise_ids": [
                            "9b7f5f124f1dd8a57d5957b5daafe40e",
                            "a9b377c8c6a8e1a00af323ed61a1a760",
                            "44f682f37aaf32334dcecbbf979b3c3d",
                            "823b9740d511507238e4648a5a0cf641",
                            "ff60835028cc2927c44376a98795111c",
                            "ff5837668f7e06b8b80e9066be07301a",
                            "a9864ea49d846888e9abe09f1b530dbf",
                            "168c0b7fa7654d82d32632eeb7a63da7",
                            "3e082bbdf504d7ed9bf80ceb1c409cf5"
                        ],
                        "exercise_ids": [
                            "9b7f5f124f1dd8a57d5957b5daafe40e",
                            "a9b377c8c6a8e1a00af323ed61a1a760",
                            "44f682f37aaf32334dcecbbf979b3c3d",
                            "823b9740d511507238e4648a5a0cf641",
                            "ff60835028cc2927c44376a98795111c",
                            "ff5837668f7e06b8b80e9066be07301a",
                            "a9864ea49d846888e9abe09f1b530dbf",
                            "168c0b7fa7654d82d32632eeb7a63da7",
                            "3e082bbdf504d7ed9bf80ceb1c409cf5"
                        ]
                    },
                    {
                        "id": "53cffc0b10bbf242bd8063328c674beb",
                        "description": "Now that you've learned about lists, let's turbo-charge them with functions.",
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "lists-and-functions",
                        "title": "Lists and Functions",
                        "time": 66,
                        "type": "lesson",
                        "published_exercise_ids": [
                            "cedb43a39a0190576dfcbb99123416e0",
                            "2712e5d5fbb0ca18121f2959dda00efd",
                            "ecafe048a674b434167b17d6685c737a",
                            "2774536135d4dae62003e33952b3c616",
                            "8eca94d7c3741b5bba29a9a549a97f08",
                            "46334e10ed0078993b3c8de48f5bddc9",
                            "d5f3a5f6ce14efa9122e53058276bc71",
                            "0018520b653ad60d3b5a18f399c0da4d",
                            "8f8d7ae29b8dcc0ab44c62c0496f1704",
                            "c030502f7415e75df969261cd0be9c29",
                            "2aa1804789c860b9c223f718d5d84712",
                            "ce926a4b34bc6d1bf05fb841a15b9726",
                            "73fab6c6f8761f5390bbb16500b3ce93",
                            "030201dae42b2f25ffa0a4247faac87d",
                            "4d9567657dafe469f8db80dfc807bd4a",
                            "308abe8dade751e02b47cc4173aff845",
                            "1e049fb0c67537c6825a703ba686c0e8",
                            "d4f747a0321f18e05a1ff0f6a2cacc89"
                        ],
                        "exercise_ids": [
                            "cedb43a39a0190576dfcbb99123416e0",
                            "2712e5d5fbb0ca18121f2959dda00efd",
                            "ecafe048a674b434167b17d6685c737a",
                            "2774536135d4dae62003e33952b3c616",
                            "8eca94d7c3741b5bba29a9a549a97f08",
                            "46334e10ed0078993b3c8de48f5bddc9",
                            "d5f3a5f6ce14efa9122e53058276bc71",
                            "0018520b653ad60d3b5a18f399c0da4d",
                            "8f8d7ae29b8dcc0ab44c62c0496f1704",
                            "c030502f7415e75df969261cd0be9c29",
                            "2aa1804789c860b9c223f718d5d84712",
                            "ce926a4b34bc6d1bf05fb841a15b9726",
                            "73fab6c6f8761f5390bbb16500b3ce93",
                            "030201dae42b2f25ffa0a4247faac87d",
                            "4d9567657dafe469f8db80dfc807bd4a",
                            "308abe8dade751e02b47cc4173aff845",
                            "1e049fb0c67537c6825a703ba686c0e8",
                            "d4f747a0321f18e05a1ff0f6a2cacc89"
                        ]
                    },
                    {
                        "id": "2dcc8d80c85678f66df3786f66ce737b",
                        "description": "In this lesson, we will make a simplified version of the classic board game Battleship!  We'll use functions, lists, and conditionals to make our game.",
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "battleship",
                        "title": "Battleship!",
                        "time": 82,
                        "type": "lesson",
                        "published_exercise_ids": [
                            "aa3b51efd7cdd7ca801023685a46b347",
                            "3740fea79e2d0048a4b7fe861cb9e439",
                            "c970007d5bfa000d170dd8082a74b0ba",
                            "c7c40ce1f88c3ddfc38a4de53e1af1ed",
                            "6e6e832308386f01fe42a6aba3f19be2",
                            "5f2bc37a24123c2a9d521f72f25adab4",
                            "78d221e647af55249f608e4b2bbc4fc0",
                            "249dddc8dc9cc9b21011cba9a3a23ef5",
                            "05b018c5c03de8b5a24f77367f1504e2",
                            "58c79ce16f6f4b1d6c61c1830e0693a1",
                            "80d8d2fe376975abd3ac315c5b5615cd",
                            "d7b99a12e9f4101852431ba3b88ea5aa",
                            "9a0cc24fb93494b91695ba323ca6ca39",
                            "045b9729addb25c2fb1bdef3cee77b6d",
                            "fe0dbb8e3dae99baadbee380ec686bc5",
                            "c581c3845a1fa01efea0b97905a5e027",
                            "b0dfc2a9835be1d2eeeaad13cd5f95af",
                            "19d1d818b97e428059a83770d4d0dc8b",
                            "f7da5551d1dcc3515062f015dd376b37"
                        ],
                        "exercise_ids": [
                            "aa3b51efd7cdd7ca801023685a46b347",
                            "3740fea79e2d0048a4b7fe861cb9e439",
                            "c970007d5bfa000d170dd8082a74b0ba",
                            "c7c40ce1f88c3ddfc38a4de53e1af1ed",
                            "6e6e832308386f01fe42a6aba3f19be2",
                            "5f2bc37a24123c2a9d521f72f25adab4",
                            "78d221e647af55249f608e4b2bbc4fc0",
                            "249dddc8dc9cc9b21011cba9a3a23ef5",
                            "05b018c5c03de8b5a24f77367f1504e2",
                            "58c79ce16f6f4b1d6c61c1830e0693a1",
                            "80d8d2fe376975abd3ac315c5b5615cd",
                            "d7b99a12e9f4101852431ba3b88ea5aa",
                            "9a0cc24fb93494b91695ba323ca6ca39",
                            "045b9729addb25c2fb1bdef3cee77b6d",
                            "fe0dbb8e3dae99baadbee380ec686bc5",
                            "c581c3845a1fa01efea0b97905a5e027",
                            "b0dfc2a9835be1d2eeeaad13cd5f95af",
                            "19d1d818b97e428059a83770d4d0dc8b",
                            "f7da5551d1dcc3515062f015dd376b37"
                        ]
                    },
                    {
                        "id": "6c33ac21a0783d024a27744fa333f256",
                        "description": null,
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "learn-python-python-unit-7",
                        "title": "Lists and Functions",
                        "time": 5,
                        "type": "quiz",
                        "assessment_ids": [
                            "5b1da4741d176d7bdd04f9d1",
                            "5b1da4741d176d7bdd04f9d7",
                            "5b1da4741d176d7bdd04f9dd",
                            "5b1da4741d176d7bdd04f9e3",
                            "5b1da4741d176d7bdd04f9e9"
                        ],
                        "assessments": [
                            {
                                "id": "5b1da4741d176d7bdd04f9d1",
                                "type": "multiple_choice",
                                "prompt": "What will be the value of `n` after the following code is run?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`[1, 5, 7]`",
                                        "reason": "Correct! We are removing the element `3` in `n`."
                                    },
                                    {
                                        "text": "`[1, 3, 5]`",
                                        "reason": "Oops, we are not removing the element at index 3. We are removing the element `3` in `n`."
                                    },
                                    {
                                        "text": "`[1, 3, 7]`",
                                        "reason": "Oops, we are removing the element `3` instead of `5`."
                                    },
                                    {
                                        "text": "`[3]`",
                                        "reason": "We are removing the element `3` from `n` and keeping the rest."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "n = [1, 3, 5, 7]\nn.remove(3)"
                                }
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f9d7",
                                "type": "multiple_choice",
                                "prompt": "What will be the value of `n` after the following code is run?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`[8, 4, 2]`",
                                        "reason": "Correct! We are removing the element `6` in `n`."
                                    },
                                    {
                                        "text": "`[8, 6, 4, 2, 1]`",
                                        "reason": "Oops, `n.pop(1)` does not add elements. It removes the item at index 1 from the list `n`."
                                    },
                                    {
                                        "text": "`[1, 8, 6, 4, 2]`",
                                        "reason": "Oops, `n.pop(1)` does not add elements. It removes the item at index 1 from the list `n`."
                                    },
                                    {
                                        "text": "`[6]`",
                                        "reason": "We are removing the item at index 1 from the list `n`. Not keeping it."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "n = [8, 6, 4, 2]\nn.pop(1)"
                                }
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f9dd",
                                "type": "multiple_choice",
                                "prompt": "What will be the value of `n` after the following code is run?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`[1, 2, 4, 5]`",
                                        "reason": "Correct! 3 + 1 = 4 so now the item at index 2 is `4`."
                                    },
                                    {
                                        "text": "`[1, 3, 3, 5]`",
                                        "reason": "Oops, the item at index 2 is the one that is being changed, not the item at index 1."
                                    },
                                    {
                                        "text": "`[2, 2, 3, 5]`",
                                        "reason": "Oops, the item at index 2 is the one that is being changed, not the item at index 0."
                                    },
                                    {
                                        "text": "`[2, 3, 4, 6]`",
                                        "reason": "Oops, we are not adding 1 to every single item in the list, just the one at index 2."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "n = [1, 2, 3, 5]\nn[2] = n[2] + 1"
                                }
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f9e3",
                                "type": "multiple_choice",
                                "prompt": "What does the following code do?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "It prints all numbers in `range(0, 6)` *separately.*",
                                        "reason": "It prints `0`, `1`, `2`, `3`, `4`, `5` on different lines."
                                    },
                                    {
                                        "text": "It prints all numbers in `range(0, 6)` *in a list*.",
                                        "reason": "Almost. This code will print each number on its own line."
                                    },
                                    {
                                        "text": "It prints `[0, 6]`.",
                                        "reason": "Oops, `0` and `6` are the lower and upper bounds."
                                    },
                                    {
                                        "text": "It prints `True` or `False`.",
                                        "reason": "Oops, it prints numbers, not boolean values."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "for i in range(0, 6):\n  print i"
                                }
                            },
                            {
                                "id": "5b1da4741d176d7bdd04f9e9",
                                "type": "multiple_choice",
                                "prompt": "Fill in the blank so that `print_list(x)` prints every other item in list `x`:",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`range(0, len(x), 2)`",
                                        "reason": "The `range(start, stop, step)` returns a list of numbers from `start` up to (but not including) `stop`. Each item increases by `step`."
                                    },
                                    {
                                        "text": "`range(0, len(x), 1)`",
                                        "reason": "Oops, this will print *every* item instead of *every other* item, because the `step` is 1 instead of 2."
                                    },
                                    {
                                        "text": "`range(0, x, 2)`",
                                        "reason": "Oops, this would give an error because the upper bound should be a number."
                                    },
                                    {
                                        "text": "`range(0, len(x), -2)`",
                                        "reason": "Oops, this would not return anything because the `step` is negative."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "def print_list(x):\n  for counter in __________________:\n    print x[counter]\n"
                                }
                            }
                        ]
                    },
                    {
                        "id": "15cb7060781fa45926ce732f2fc06ea1",
                        "description": "Loops allow you to quickly iterate over information in Python. In this lesson, we'll cover two types of loop: 'while' and 'for'.",
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "python-2-loops",
                        "title": "Loops",
                        "time": 74,
                        "type": "lesson",
                        "published_exercise_ids": [
                            "ba45677dde4f54369a0e713d35602801",
                            "4a995f87f56e7ccf239df3d14846ed1f",
                            "6625f1f864253e1ab6d1bd592beb30c0",
                            "50690c665a2c26a8a4ee4dd29adf02e0",
                            "56c9be0af800f37d1d3e34a58b31e858",
                            "9470fa13dc34ecacdfb09da37f4b4e16",
                            "ced968bfc5950f2f7392ce3fe3bf1fb1",
                            "a80af7573500b002848926b991910720",
                            "14fc772beb27be3cfa29f8fcab3c2b4b",
                            "0ed0a364296535e4c075699bd96caca0",
                            "605aa62f0bfc84dfc77bbb1739f7ddc1",
                            "c341575e577cb9efc6ba92e44aff0bb4",
                            "10f89aa2d0b18749badeac2a0b850f60",
                            "73ff048702a7e45f9ea4f9ae0ff01a98",
                            "431e03b653af4f8c3d98cf4a5eaae9ec",
                            "f4acc4297ef149cd254cd3285bb3eab0",
                            "6dd6797a8c859b9cd20b204a7937ed5c",
                            "16d7c59a78e0460a7868f8880ca6b0af",
                            "99a296fea2d5a60a0d35b6ed435711c0"
                        ],
                        "exercise_ids": [
                            "ba45677dde4f54369a0e713d35602801",
                            "4a995f87f56e7ccf239df3d14846ed1f",
                            "6625f1f864253e1ab6d1bd592beb30c0",
                            "50690c665a2c26a8a4ee4dd29adf02e0",
                            "56c9be0af800f37d1d3e34a58b31e858",
                            "9470fa13dc34ecacdfb09da37f4b4e16",
                            "ced968bfc5950f2f7392ce3fe3bf1fb1",
                            "a80af7573500b002848926b991910720",
                            "14fc772beb27be3cfa29f8fcab3c2b4b",
                            "0ed0a364296535e4c075699bd96caca0",
                            "605aa62f0bfc84dfc77bbb1739f7ddc1",
                            "c341575e577cb9efc6ba92e44aff0bb4",
                            "10f89aa2d0b18749badeac2a0b850f60",
                            "73ff048702a7e45f9ea4f9ae0ff01a98",
                            "431e03b653af4f8c3d98cf4a5eaae9ec",
                            "f4acc4297ef149cd254cd3285bb3eab0",
                            "6dd6797a8c859b9cd20b204a7937ed5c",
                            "16d7c59a78e0460a7868f8880ca6b0af",
                            "99a296fea2d5a60a0d35b6ed435711c0"
                        ]
                    },
                    {
                        "id": "0f2fd8035e9d2d284a24366a4bb094a9",
                        "description": "You know a lot of Python now. Let's do some practice problems!",
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "practice-makes-perfect",
                        "title": "Practice Makes Perfect",
                        "time": 50,
                        "type": "lesson",
                        "published_exercise_ids": [
                            "3258383661f60d6381e9f9deb84c69ce",
                            "7e92d6522cbf9278122da14f3435caae",
                            "77a950b2eee1d9a81a65812685b5f054",
                            "1969d4780360c2c0093bc456ea90867d",
                            "d4a1c0f5dd3c22275b2f8ec3b4b9646b",
                            "6f34898ec734a7b9fc64d2c1fc624360",
                            "2838d235b23e51cf6def08425e52496c",
                            "2b067c367d86bf4ec8e1230f1a89b9e3",
                            "85e995a8273a7d1762c20018c560df8a",
                            "8a3d349e564b7a5b1b3f99e3f250d390",
                            "e794a010b838c3732262ca4e961c2224",
                            "583c459bc10003e44e273c43b4bd2c61",
                            "4967292f07f68d4e0160a4f70503ab3e",
                            "94da4a2a1cf98f2036fd5a7b5ed2936b",
                            "d2a35fa1eec8de6ea0eaf304bca433d9"
                        ],
                        "exercise_ids": [
                            "3258383661f60d6381e9f9deb84c69ce",
                            "7e92d6522cbf9278122da14f3435caae",
                            "77a950b2eee1d9a81a65812685b5f054",
                            "1969d4780360c2c0093bc456ea90867d",
                            "d4a1c0f5dd3c22275b2f8ec3b4b9646b",
                            "6f34898ec734a7b9fc64d2c1fc624360",
                            "2838d235b23e51cf6def08425e52496c",
                            "2b067c367d86bf4ec8e1230f1a89b9e3",
                            "85e995a8273a7d1762c20018c560df8a",
                            "8a3d349e564b7a5b1b3f99e3f250d390",
                            "e794a010b838c3732262ca4e961c2224",
                            "583c459bc10003e44e273c43b4bd2c61",
                            "4967292f07f68d4e0160a4f70503ab3e",
                            "94da4a2a1cf98f2036fd5a7b5ed2936b",
                            "d2a35fa1eec8de6ea0eaf304bca433d9"
                        ]
                    },
                    {
                        "id": "63e0066552da33362f33af0398724871",
                        "description": "It's time to build fluency in Python functions. In this next Pro Project, we're going to practice functions and modules in Python so you can hone your skills and feel confident taking them to the real world.\nWhy? Python has a lot of really helpful built in modules. Let's use some new ones and solidify your knowledge with certain data structures.\nWhat's next? Calendars, modules, more Python. You got this! ",
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "calendar",
                        "title": "Command Line Calendar",
                        "time": 141,
                        "type": "project",
                        "standalone": false,
                        "project_information": {
                            "ein_config": {
                                "extensions": {
                                    "python": {
                                        "cmds": [
                                            "python {{ .fileName }}"
                                        ]
                                    },
                                    "py2": {
                                        "cmds": [
                                            "python {{ .fileName }}"
                                        ]
                                    },
                                    "python2": {
                                        "cmds": [
                                            "python {{ .fileName }}"
                                        ]
                                    }
                                },
                                "container_type": "python",
                                "server": "http"
                            },
                            "download_path": null,
                            "objective": "So far, you've used Python to build a variety of things, including calculators and games. In this project, we'll build a basic calendar that the user will be able to interact with from the command line. The user should be able to choose to:\n\n* View the calendar\n* Add an event to the calendar\n* Update an existing event\n* Delete an existing event\n\nThe program should behave in the following way:\n\n1. Print a welcome message to the user\n2. Prompt the user to view, add, update, or delete an event on the calendar\n3. Depending on the user's input: view, add, update, or delete an event on the calendar\n4. The program should never terminate unless the user decides to exit\n\nLet's begin!\n\nIf you get stuck during this project or would like to see an experienced developer work through it, click \"**Get Unstuck**\" to see a **project walkthrough video**.",
                            "preview_url": null,
                            "thumbnail_url": null,
                            "video_url": "https://www.youtube.com/watch?v=BTA2YGJCFKE",
                            "workspace": {
                                "id": "5c3490581d19727d7ef7e27a",
                                "slug": "python-ext-prj_calendar",
                                "type": "python"
                            },
                            "self_assessments": [
                                {
                                    "heading": "Command Line Calendar",
                                    "tasks": [
                                        {
                                            "hint": "```py\n\"\"\"\nThis is a \nmulti-line\ncomment!\n\"\"\"\n```",
                                            "task_key": "0_0",
                                            "text": "As in previous projects, it's good practice to let other developers know what your program does. \n\nBegin by including a multi-line comment that starts on line 1 that describes what your program will do. You can use the instructions above to help you write the comment."
                                        },
                                        {
                                            "hint": "```py\nfrom time import sleep\n```",
                                            "task_key": "0_1",
                                            "text": "On the next line, use a function import to import `sleep` from the `time` module."
                                        },
                                        {
                                            "hint": "```py\nfrom time import strftime\n```",
                                            "task_key": "0_2",
                                            "text": "Since this is a calendar program, we'll need to access date and time quite often. We've been using the familiar `datetime` function, but sometimes it's necessary to use other functions. Let's try a new function out.\n\nOn the next line, use a function import to import `strftime` from the `time` module."
                                        },
                                        {
                                            "hint": "```py\nfrom time import sleep, strftime\n```\n\nThat's how professionals do it!",
                                            "task_key": "0_3",
                                            "text": "Actually, it's repetitive to import two different functions from the same module on two different lines. Let's fix that.\n\nGo ahead and delete that last two lines of code you wrote (the function imports). Whenever possible, it's better to \u003ca href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\" target=\"_blank\"\u003enot repeat yourself\u003c/a\u003e when coding.\n\nUse a function import to import both `sleep` and `strftime` from the `time` module, all in one line of code."
                                        },
                                        {
                                            "hint": "```py\nUSER_FIRST_NAME = \"Gilberto\"\n```",
                                            "task_key": "0_4",
                                            "text": "Great, our program is a little more concise now. \n \nThe instructions ask to build a calendar that starts with a welcome message for the user. It'd be nice for the calendar to know who the user is.\n\nOn the next line, add a \u003ca href=\"https://www.python.org/dev/peps/pep-0008/#constants\" target=\"_blank\"\u003econstant variable\u003c/a\u003e that stores the user's first name as a string. Set it equal to your name (or another name)."
                                        },
                                        {
                                            "hint": null,
                                            "task_key": "0_5",
                                            "text": "What \u003ca href=\"https://en.wikipedia.org/wiki/Data_structure\" target=\"_blank\"\u003edata structure\u003c/a\u003e can we use to store calendar events? You learned about lists and dictionaries in the Python course, so we'll have to choose one of those two.\n\nTo decide, let's think about what a calendar requires. Ideally, a calendar allows users to at least \u003ca href=\"https://www.codecademy.com/en/courses/learn-python/lessons/python-lists-and-dictionaries/exercises/this-next-part-is-key\" target=\"_blank\"\u003eassociate\u003c/a\u003e an event with a date, as a pair. \n\nThat sounds a lot like the functionality that a dictionary provides, so we'll use a dictionary to build the calendar. Our calendar will store the dates as keys and the events as values."
                                        },
                                        {
                                            "hint": "```py\ncalendar = {}\n```",
                                            "task_key": "0_6",
                                            "text": "On the next line, create an empty dictionary called `calendar`."
                                        },
                                        {
                                            "hint": "```py\ndef welcome():\n```",
                                            "task_key": "0_7",
                                            "text": "Great! We have the structures in place that we'll use to build the rest of the program. Let's start by adding the welcome message.\n\nOn the next line, create a function called `welcome()`."
                                        },
                                        {
                                            "hint": "```py\ndef welcome():\n  print \"Welcome, \" + USER_FIRST_NAME + \".\"\n```",
                                            "task_key": "0_8",
                                            "text": "On the next line, inside of the function, print a welcome message to the user. Use \u003ca href=\"https://www.codecademy.com/en/courses/learn-python/lessons/strings--console-output/exercises/string-concatenation\" target=\"_blank\"\u003econcatenation\u003c/a\u003e to include the message and the user's first name."
                                        },
                                        {
                                            "hint": "```py\ndef welcome():\n  print \"Welcome, \" + USER_FIRST_NAME + \".\"\n  print \"Calendar starting...\"\n  sleep(1)\n```",
                                            "task_key": "0_9",
                                            "text": "Next, print a message to let the user know the calendar is opening. On the next line, sleep the program for 1 second."
                                        },
                                        {
                                            "hint": "```py\ndef welcome():\n  print \"Welcome, \" + USER_FIRST_NAME + \".\"\n  print \"Calendar starting...\"\n  sleep(1)\n  print \"Today is: \" + strftime(\"%A %B %d, %Y\") \n```",
                                            "task_key": "0_10",
                                            "text": "It's time to use the new `strftime` function we imported. The cool thing about the `strftime` function is that printing different units of time (months, days, years, hours, etc.) is simpler than having to call separate functions for each aspect (the way `datetime` works).\n\nLook at the `strftime` \u003ca href=\"https://docs.python.org/2/library/time.html#time.strftime\" target=\"_blank\"\u003edocumentation\u003c/a\u003e to understand how to use it (the \"Directive\" table is especially useful). Reviewing documentation is a common practice among professional software engineers.\n\nOn the next line, print the current date in the following format: `Full weekday name Month Day, Year`. Use concatenation and `strftime` to help you."
                                        },
                                        {
                                            "hint": "Use Step 11 and its hint to help you.",
                                            "task_key": "0_11",
                                            "text": "On the next line, print the current time in the following format: `H:M:S`. Use concatenation and `strftime` to help you. \n\nNext, sleep the program for 1 second."
                                        },
                                        {
                                            "hint": "```py\ndef welcome():\n  # ...\n  print \"What would you like to do?\"\n```\n\nIn the hint above, `# ...` simply indicates that the code has been abbreviated to avoid a lengthy hint. Actual code should not be removed or replaced.",
                                            "task_key": "0_12",
                                            "text": "You succesfully used a new function, congrats! On the next line, print `\"What would you like to do?\"` to the user."
                                        },
                                        {
                                            "hint": "```py\ndef start_calendar():\n```",
                                            "task_key": "0_13",
                                            "text": "Perfect! Our welcome message function is now complete. Let's start building the calendar's functionality.\n\nCreate a new function called `start_calendar()`."
                                        },
                                        {
                                            "hint": "```py\ndef start_calendar():\n  welcome()\n```",
                                            "task_key": "0_14",
                                            "text": "When the calendar starts, the first thing we'd like to do is welcome the user. On the next line, inside of `start_calendar()`, call the `welcome()` function."
                                        },
                                        {
                                            "hint": "```py\ndef start_calendar():\n  welcome()\n  start = True\n  while start:\n```",
                                            "task_key": "0_15",
                                            "text": "The project instructions ask that the project terminate only when the user voluntarily exits the program. In this case, we can use a `while` loop, since \u003ca href=\"https://www.codecademy.com/courses/learn-python/lessons/loops/exercises/while-youre-here?action=lesson_resume\" target=\"_blank\"\u003ewhile loops\u003c/a\u003e will continue running as long as a condition is true.\n\nOn the next line, create a variable called `start` and set it equal to `True`.  Next, add a `while` loop that uses `start` as the Boolean condition. \n\nSince `start` is `True`, we have ensured that this loop will continue to run, unless `start` changes value."
                                        },
                                        {
                                            "hint": "```py\ndef start_calendar():\n  # ...\n  while start:\n    user_choice = raw_input(\"A to Add, U to Update, V to View, D to Delete, X to Exit: \")\n    user_choice = user_choice.upper()\n```",
                                            "task_key": "0_16",
                                            "text": "Now we'll start building the most important part of this program, the actual calendar (along with its required behavior).\n\nInside of the `while` loop, prompt the user to enter `A to Add, U to Update, V to View, D to Delete, X to Exit: `. Store their input in a variable called `user_choice`.\n\nOn the next line, convert `user_choice` to upper case."
                                        },
                                        {
                                            "hint": null,
                                            "task_key": "0_17",
                                            "text": "Great! We now have the user's input. The instructions require that a user be able to:\n\n* View the calendar\n* Update the calendar\n* Add to the calendar\n* Delete from the calendar\n\nLet's start with the behavior that will be the easiest to implement: viewing the calendar."
                                        },
                                        {
                                            "hint": "```py\ndef start_calendar():\n  # ...\n  while start:\n      # ...\n      if user_choice == 'V':  \n```",
                                            "task_key": "0_18",
                                            "text": "Keeping inside the while loop, add an `if` statement that checks if the user's choice is `V` (for View)."
                                        },
                                        {
                                            "hint": "```py\ndef start_calendar():\n  # ...\n  while start:\n    # ...\n    if user_choice == 'V': \n      if len(calendar.keys()) \u003c 1:\n        print \"Calendar empty.\"  \n```",
                                            "task_key": "0_19",
                                            "text": "If the user would like to view the calendar, first we have to make sure the calendar contains events. Otherwise, we'll print the calendar for them.\n\nInside of the current `if` statement, add another `if` statement that checks  if there are no dates (keys) in the calendar (i.e. less than 1 key). \n\nYou can use the `.keys()` function on `calendar`, and use the `len()` function to check the length (size) of the keys.\n\nInside of the new `if` statement, print a message to the user letting them know the calendar is empty."
                                        },
                                        {
                                            "hint": "```py\ndef start_calendar():\n  # ...\n  while start:\n    # ...\n    if user_choice == 'V': \n      if len(calendar.keys()) \u003c 1:\n        print \"Calendar empty.\"\n      else:\n        print calendar\n```",
                                            "task_key": "0_21",
                                            "text": "That will take care of notifying the user if their calendar is empty. However, if it's not empty, we need to print the calendar for them.\n\nAdd an `else` block that corresponds to the `if` block you just added. Inside of the `else` block, print the calendar."
                                        },
                                        {
                                            "hint": "```py\ndef start_calendar():\n  # ...\n  while start:\n    # ...\n    if user_choice == 'V': \n      # ...\n    elif user_choice == 'U':\n```",
                                            "task_key": "0_22",
                                            "text": "Perfect - you just built a fifth of the functionality that's needed! Keep in mind that what you just coded represents the general flow of how each behavior will function. Now let's add functionality to update the calendar.\n\nAdd an `elif` block (corresponding to the first `if` block you coded) that checks if the user's choice is `U` (for Update)."
                                        },
                                        {
                                            "hint": "```py\ndef start_calendar():\n  # ...\n  while start:\n    # ...\n    if user_choice == 'V': \n      # ...\n    elif user_choice == 'U':\n      date = raw_input(\"What date? \")\n      update = raw_input(\"Enter the update: \")\n```",
                                            "task_key": "0_23",
                                            "text": "On the next line, prompt the user for the date with the following: `\"What date? \"`. Store their input into a variable called `date`.\n\nOn the line after that, prompt the user for the update with the following : `\"Enter the update:  \"`. Store their input into a variable called `update`."
                                        },
                                        {
                                            "hint": "```py\ndef start_calendar():\n  # ...\n  while start:\n    # ...\n    if user_choice == 'V': \n      # ...\n    elif user_choice == 'U':\n      date = raw_input(\"What date? \")\n      update = raw_input(\"Enter the update: \")\n      calendar[date] = update\n```\n\nNote: This a very powerful (and possibly dangerous) line of code. It blindly adds the update to the calendar, without checking if the date is valid or if it already exists (which could override things). Remember, this is a basic calendar with limited functionality. Feel free to add to its behavior after you complete the project.",
                                            "task_key": "0_24",
                                            "text": "On the next line, update `calendar` by \u003ca href=\"https://www.codecademy.com/en/courses/learn-python/lessons/python-lists-and-dictionaries/exercises/new-entries\" target=\"_blank\"\u003eadding\u003c/a\u003e the `update` to the `date` that the user specifies."
                                        },
                                        {
                                            "hint": "```py\ndef start_calendar():\n  # ...\n  while start:\n    # ...\n    if user_choice == 'V': \n      # ...\n    elif user_choice == 'U':\n      # ...\n      calendar[date] = update\n      # Print the message here\n      # Print the calendar here\n```",
                                            "task_key": "0_25",
                                            "text": "Now that we've made the update possible, print a message to the user on the next line about the update being successful.\n\nOn the line after that, print the calendar."
                                        },
                                        {
                                            "hint": "Use the hint from Step 23 to help you.",
                                            "task_key": "0_26",
                                            "text": "Great, we've built two of the five required calendar functionalities! It's time to add the next piece of behavior: adding to the calendar.\n\nAdd an `elif` block (again, corresponding to the first `if` block you coded) that checks if the user's choice is `A` (for Add)."
                                        },
                                        {
                                            "hint": "Use the hint from Step 24 to help you.",
                                            "task_key": "0_27",
                                            "text": "On the next line, prompt the user for their input with the following: `\"Enter event: \"`. Store their input into a variable called `event`.\n\nOn the line after that, prompt the user for their input with the following : `\"Enter date (MM/DD/YYYY):  \"`. Store their input into a variable called `date`."
                                        },
                                        {
                                            "hint": "```py\ndef start_calendar():\n  # ...\n  while start:\n    # ...\n    if user_choice == 'V': \n      # ...\n    elif user_choice == 'U':\n      # ...\n    elif user_choice == 'A':\n      # ...\n      if(len(date) \u003e 10):\n```",
                                            "task_key": "0_28",
                                            "text": "When the user inputs a date, they must format it as `MM/DD/YYYY`, including the forward slashes. But what if the date they enter doesn't match the format we've specified? We have to handle that possibility.\n\nOn the next line, add an `if` statement that checks if the length of `date` is greater than 10.\n\nNote: A date in the format `MM/DD/YYYY` contains 10 characters if you include the forward slashes."
                                        },
                                        {
                                            "hint": "```py\ndef start_calendar():\n  # ...\n  while start:\n    # ...\n    if user_choice == 'V': \n      # ...\n    elif user_choice == 'U':\n      # ...\n    elif user_choice == 'A':\n      # ...\n      if(len(date) \u003e 10 or int(date[6:]) \u003c int(strftime(\"%Y\"))):\n```",
                                            "task_key": "0_29",
                                            "text": "Great, but what if the user tries to schedule something for a year in the past? Calendars usually allow this, but our calendar won't.\n\nExpand the `if` statement by using Boolean `or` and checking if the year the user entered occurs before the year that the `strftime` function returns (in other words, the current year). You can use the `\u003c` operator to achieve this.\n\nSince characters in a string can be \u003ca href=\"https://www.codecademy.com/en/courses/learn-python/lessons/strings--console-output/exercises/access-by-index\" target=\"_blank\"\u003eaccessed by index\u003c/a\u003e, use \u003ca href=\"https://www.codecademy.com/en/courses/learn-python/lessons/python-lists-and-dictionaries/exercises/list-slicing\" target=\"_blank\"\u003elist slicing\u003c/a\u003e to retrieve the year from `date`. \n\nUse `%Y` to retrieve the year from `strftime`. \n\nBoth years retrieved will be in the form of string, but we need to compare integers, so convert both using `int()`."
                                        },
                                        {
                                            "hint": "Use the hint from Step 21 to help you.",
                                            "task_key": "0_30",
                                            "text": "On the next line, inside the `if` block, print a message to user indicating that an invalid date was entered."
                                        },
                                        {
                                            "hint": "```py\ndef start_calendar():\n  # ...\n  while start:\n    # ...\n    if user_choice == 'V': \n      # ...\n    elif user_choice == 'U':\n      # ...\n    elif user_choice == 'A':\n      # ...\n      if(len(date) \u003e 10 or int(date[6:]) \u003c int(strftime(\"%Y\"))):\n        # Print message here\n        try_again = raw_input(\"Try Again? Y for Yes, N for No: \")\n        try_again = try_again.upper()\n```",
                                            "task_key": "0_31",
                                            "text": "Next, still inside the `if` block, ask the user if they would like to try again by prompting them with: `\"Try Again? Y for Yes, N for No: \"`. Store their input in a variable called `try_again`.\n\nDirectly after that, convert `try_again` to uppercase."
                                        },
                                        {
                                            "hint": "```py\ndef start_calendar():\n  # ...\n  while start:\n    # ...\n    if user_choice == 'V': \n      # ...\n    elif user_choice == 'U':\n      # ...\n    elif user_choice == 'A':\n      # ...\n      if(len(date) \u003e 10 or int(date[6:]) \u003c int(strftime(\"%Y\"))):\n        # ...\n        if try_again == 'Y':\n          continue\n```",
                                            "task_key": "0_32",
                                            "text": "Next, add another `if` statement that checks if `try_again` is `Y` (for Yes). \n\nIf the user selects `Y`, we should allow the program to continue. On the next line use the `continue` keyword. The `continue` keyword will start the loop from the beginning again.\n\nLearn more about the `continue` keyword \u003ca href=\"https://docs.python.org/2/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops\" target=\"_blank\"\u003ehere\u003c/a\u003e."
                                        },
                                        {
                                            "hint": "```py\ndef start_calendar():\n  # ...\n  while start:\n    # ...\n    if user_choice == 'V': \n      # ...\n    elif user_choice == 'U':\n      # ...\n    elif user_choice == 'A':\n      # ...\n      if(len(date) \u003e 10 or int(date[6:]) \u003c int(strftime(\"%Y\"))):\n        # ...\n        if try_again == 'Y':\n          # ...\n        else:\n          start = False\n```",
                                            "task_key": "0_33",
                                            "text": "Otherwise, if they select `N`, we have to exit the program. \n\nAdd a corresponding `else` block. Inside the block, set `start` equal to `False` to exit the loop and quit the program."
                                        },
                                        {
                                            "hint": "```py\ndef start_calendar():\n  # ...\n  while start:\n    # ...\n    if user_choice == 'V': \n      # ...\n    elif user_choice == 'U':\n      # ...\n    elif user_choice == 'A':\n      # ...\n      if(len(date) \u003e 10 or int(date[6:]) \u003c int(strftime(\"%Y\"))):\n        # ...\n        if:\n          # ...\n        else:\n          # ...\n      else:\n        calendar[date] = event\n        # Print a success message\n        # Print the calendar\n```\n\nNote: This a very powerful (and possibly dangerous) line of code. It blindly adds the event to the calendar, without checking if the date already exists (which could override things). Remember, this is a basic calendar with limited functionality. Feel free to add to its behavior after you complete the project.",
                                            "task_key": "0_34",
                                            "text": "Great! That takes care of invalid years. Let's let the user add events to the calendar now.\n\nAdd an `else` block that corresponds to the `if` block. On the next line, \u003ca href=\"https://www.codecademy.com/en/courses/learn-python/lessons/python-lists-and-dictionaries/exercises/new-entries\" target=\"_blank\"\u003eadd\u003c/a\u003e to `calendar` by adding the `event` to the `date`  the user specifies.\n\nThen, on the next line, print a message saying the event was successfully added. After that, print the calendar."
                                        },
                                        {
                                            "hint": "Use the hint from Step 23 to help you.",
                                            "task_key": "0_35",
                                            "text": "We're almost there! Only one more piece of functionality needs to be added: deleting an event.\n\nAdd an `elif` block (corresponding to the first `if` block you coded) that checks if the user's choice is `\"D\"` (for Delete)."
                                        },
                                        {
                                            "hint": "Use the hints from Steps 21 and 22 to help you.",
                                            "task_key": "0_36",
                                            "text": "It doesn't make sense to delete from a calendar that's already empty! Let's make sure the user knows that.\n\nOn the next line, inside of the block, add an `if` statement that checks if there are no dates in the calendar (i.e. less than 1 key). You can use the `.keys()` function on our `calendar`, and use the `len()` function to check the length of the keys.\n\nInside of the `if` statement, print a message to the user letting them know the calendar is empty."
                                        },
                                        {
                                            "hint": "```py\ndef start_calendar():\n  # ...\n  while start:\n    # ...\n    if user_choice == 'V': \n      # ...\n    # ...\n      # ...\n    elif user_choice == 'D':\n      # If statement checking for emptiness\n        # ...\n      else:\n        # Prompt user for event\n```",
                                            "task_key": "0_37",
                                            "text": "Otherwise, we should let the user delete an event. \n\nAdd an `else` block. Then, on the next line, prompt the user for their input with the following: `\"What event?\" `. Store their input into a variable called `event`."
                                        },
                                        {
                                            "hint": "```py\nfor date in calendar.keys():\n```",
                                            "task_key": "0_38",
                                            "text": "In order to delete the event, we're going to have to search for it in the calendar. This will involve \u003ca href=\"https://www.codecademy.com/en/courses/learn-python/lessons/loops/exercises/for-your-lists\" target=\"_blank\"\u003eiterating\u003c/a\u003e through the dates (keys) and finding the matching event (value).\n\nOn the next line, still inside the `else` block, add a `for` loop that iterates through the keys using a `date` variable. Use `.keys()` to help you."
                                        },
                                        {
                                            "hint": "```py\n\n# ...\n\nfor date in calendar.keys():\n  if event == calendar[date]:\n```",
                                            "task_key": "0_39",
                                            "text": "Now it's time to decide whether or not the event should be deleted. It should be deleted if we encounter the event during the iteration.\n\nOn the next line, add an `if` statement that checks if `event` is equal to `calendar[date]`. This statement checks if the event exists."
                                        },
                                        {
                                            "hint": "```py\n\n# ...\n\nfor date in calendar.keys():\n  if event == calendar[date]:\n    del calendar[date]\n```\n\nOr\n\n```py\n\n# ...\n\nfor date in calendar.keys():\n  if event == calendar[date]:\n    del(calendar[date])\n```\n\nNote: This a very powerful (and possibly dangerous) line of code. This will obliterate the entire entry, including both the date and the event.  Remember, this is a basic calendar with limited functionality. Feel free to add to its behavior after you complete the project.",
                                            "task_key": "0_40",
                                            "text": "Great! If the event does exists, we should delete it.\n\nOn the next line, use the `del` statement to delete `calendar[date]`. Learn more about the `del` statement \u003ca href=\"https://docs.python.org/2/tutorial/datastructures.html#the-del-statement\" target=\"_blank\"\u003ehere\u003c/a\u003e."
                                        },
                                        {
                                            "hint": "Use the hint from Step 22 to help you.",
                                            "task_key": "0_41",
                                            "text": "On the next line, print a message to the user indicating that the event was successfully deleted. Then, directly after, print the calendar."
                                        },
                                        {
                                            "hint": "```py\n\n# ...\n\nelif user_choice == 'D':\n  # ...\n  else:\n    # ...\n    for date in calendar.keys():\n      if event == calendar[date]:\n        # ...\n      else:\n        # Print a message\n```",
                                            "task_key": "0_42",
                                            "text": "Oh right! We also have to check if a valid event was entered by the user.\n\nAdd a corresponding `else` block. Inside, print a message indicating that an incorrect event was specified."
                                        },
                                        {
                                            "hint": "Use the hint from Step 23 to help you.",
                                            "task_key": "0_43",
                                            "text": "Finally, let's add some functionality that will let the user exit the program. \n\nAdd an `elif` block (again, corresponding to the very first `if` block you coded) that checks if the user's choice is `\"X\"` (for Exit). On the next line, inside the block, exit the program by changing the value of `start`."
                                        },
                                        {
                                            "hint": "```py\ndef start_calendar():\n  # ...\n  while start:\n    # ...\n    if user_choice == 'V': \n      # ...\n    # ...\n      # ...\n    else: \n      # Print a message\n      # Exit the program\n```",
                                            "task_key": "0_44",
                                            "text": "The \u003ca href=\"https://en.wiktionary.org/wiki/homestretch\" target=\"_blank\"\u003ehomestretch\u003c/a\u003e! If a user enters garbage when prompted by the program, we should exit.\n\nThis time, add an `else` block (again, corresponding to the very first `if` block you coded).\n\nInside of the block, print a message indicating that an invalid command was entered. On the next line, exit the program."
                                        },
                                        {
                                            "hint": "```py\n# ...\n\ndef welcome():\n  # ...\n\ndef start_calendar():\n  # ...\n\nstart_calendar()\n```",
                                            "task_key": "0_45",
                                            "text": "The program won't run unless we call it. For the grand finale, call the `start_calendar()` function on the next line (outside of any function)."
                                        },
                                        {
                                            "hint": null,
                                            "task_key": "0_46",
                                            "text": "Let's see if the calendar works! \n\nFirst, click Save. Then, in the terminal, type the following command and press \"Enter\" on your keyboard:\n\n```shell\npython Calendar.py\n```\n\nInteract with the calendar, making sure to test all the functionality. If there is something that didn't work, check the step associated with that part of the project and see if you can \u003ca href=\"https://en.wikipedia.org/wiki/Debugging\" target=\"_blank\"\u003edebug\u003c/a\u003e it.\n\nCan you think of ways to improve or add to the calendar? Happy coding!"
                                        }
                                    ]
                                }
                            ],
                            "components": [
                                {
                                    "id": "5c3490581d19727d7ef7e279",
                                    "type": "PersistentCodeEditor",
                                    "files": [
                                        "Calendar.py"
                                    ],
                                    "navigator_disabled": true,
                                    "no_run_button": null
                                },
                                {
                                    "id": "5c3490581d19727d7ef7e278",
                                    "type": "Terminal",
                                    "shell": "bash",
                                    "prevent_checkpoint_run": null,
                                    "fake_responses": []
                                }
                            ]
                        }
                    },
                    {
                        "id": "a543dda4405b5d754b5acabf1028ebc6",
                        "description": null,
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "learn-python-python-unit-8",
                        "title": "Loops",
                        "time": 3,
                        "type": "quiz",
                        "assessment_ids": [
                            "5b1da4751d176d7bdd04f9ef",
                            "5b1da4751d176d7bdd04f9f5",
                            "5b1da4751d176d7bdd04f9fa"
                        ],
                        "assessments": [
                            {
                                "id": "5b1da4751d176d7bdd04f9ef",
                                "type": "multiple_choice",
                                "prompt": "How many lines will the code below print to the console?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "2",
                                        "reason": null
                                    },
                                    {
                                        "text": "3",
                                        "reason": null
                                    },
                                    {
                                        "text": "4",
                                        "reason": null
                                    },
                                    {
                                        "text": "5",
                                        "reason": null
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "count = 4\nwhile count \u003e 0:\n\n  count -= 2\n\n  print count\n"
                                }
                            },
                            {
                                "id": "5b1da4751d176d7bdd04f9f5",
                                "type": "multiple_choice",
                                "prompt": "Which function can be used to supply an index to each element of a list as you iterate through it?",
                                "correct_answer": 2,
                                "answers": [
                                    {
                                        "text": "`index()`",
                                        "reason": null
                                    },
                                    {
                                        "text": "`track()`",
                                        "reason": null
                                    },
                                    {
                                        "text": "`enumerate()`",
                                        "reason": null
                                    },
                                    {
                                        "text": "`itemize()`",
                                        "reason": null
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": null
                            },
                            {
                                "id": "5b1da4751d176d7bdd04f9fa",
                                "type": "multiple_choice",
                                "prompt": "What does the zip function do?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "It creates pairs of elements when passed two lists",
                                        "reason": null
                                    },
                                    {
                                        "text": "It passes more lists into a function",
                                        "reason": null
                                    },
                                    {
                                        "text": "It creates pairs of elements when passed integers",
                                        "reason": null
                                    },
                                    {
                                        "text": "It pairs integers in dictionary values",
                                        "reason": null
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": null
                            }
                        ]
                    },
                    {
                        "id": "617555536da3f2ef512d86fef98b6312",
                        "description": "Your students just took their first test. It's time to see how everyone did. Let's write a program to compute the mean, variance, and standard deviation of the test scores.",
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "exam-statistics",
                        "title": "Exam Statistics",
                        "time": 34,
                        "type": "lesson",
                        "published_exercise_ids": [
                            "366accd30f519b89c3fd11a974b59c71",
                            "1b37551db0204887631757c674a902f2",
                            "0a1b60a629601072b2a21086bc027d66",
                            "7b98206a8bc48e2de6b530ef79164c9a",
                            "8bf4208fd1ddafb09500a749046deca0",
                            "6723373224fe32a59d8a9acf3aee98b8",
                            "01aeb33d6e93a15f5ed3dc262b0b9dd2",
                            "430dfd1258d56619b3d8b51be124d48e",
                            "51c0114601e74221836d68a540356ae8"
                        ],
                        "exercise_ids": [
                            "366accd30f519b89c3fd11a974b59c71",
                            "1b37551db0204887631757c674a902f2",
                            "0a1b60a629601072b2a21086bc027d66",
                            "7b98206a8bc48e2de6b530ef79164c9a",
                            "8bf4208fd1ddafb09500a749046deca0",
                            "6723373224fe32a59d8a9acf3aee98b8",
                            "01aeb33d6e93a15f5ed3dc262b0b9dd2",
                            "430dfd1258d56619b3d8b51be124d48e",
                            "51c0114601e74221836d68a540356ae8"
                        ]
                    },
                    {
                        "id": "6eed0e389bb7daf8bad6d35e262523aa",
                        "description": "In this lesson, we'll cover some of the more complex aspects of Python, including iterating over data structures, list comprehensions, list slicing, and lambda expressions.",
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "advanced-topics-in-python",
                        "title": "Advanced Topics in Python",
                        "time": 71,
                        "type": "lesson",
                        "published_exercise_ids": [
                            "c1b8a9bad11e4a89f1264486f8bee1db",
                            "7dc70262e0be5995efbf1497ad694b44",
                            "853006ea19ea6e554f34187dcf1b93b9",
                            "9f2cda86352c90630c553831436454e6",
                            "b23b77ed2f7b32ea7a5fc7812148fa85",
                            "9e5cd394386fafe1559a81d03d3606f6",
                            "dcac3a7a178cac2822fc08cda9462e2d",
                            "fcfab983a8002c9388c8759296ad49c6",
                            "9ac5cc8b1a84976c500817581474892e",
                            "5e2a573c5eef80f3ae666935e371874e",
                            "741b32c5c27c21c444309d6820868d36",
                            "0b7f0c9eaa427025273cfbe264f1fa76",
                            "8b844413a73d9afaa0238de935aaf3d8",
                            "0936f681cbdca72b0f3f65f3e45b4f89",
                            "d53b32eeb5807d6764dc45660687f6a7",
                            "8e34d57a8cd9dfa997933ef014d07021",
                            "b09e116fcdc2adae3e4d085b16c877a9",
                            "e741a5e5a32b9010fdb6be0c1e1cee1d"
                        ],
                        "exercise_ids": [
                            "c1b8a9bad11e4a89f1264486f8bee1db",
                            "7dc70262e0be5995efbf1497ad694b44",
                            "853006ea19ea6e554f34187dcf1b93b9",
                            "9f2cda86352c90630c553831436454e6",
                            "b23b77ed2f7b32ea7a5fc7812148fa85",
                            "9e5cd394386fafe1559a81d03d3606f6",
                            "dcac3a7a178cac2822fc08cda9462e2d",
                            "fcfab983a8002c9388c8759296ad49c6",
                            "9ac5cc8b1a84976c500817581474892e",
                            "5e2a573c5eef80f3ae666935e371874e",
                            "741b32c5c27c21c444309d6820868d36",
                            "0b7f0c9eaa427025273cfbe264f1fa76",
                            "8b844413a73d9afaa0238de935aaf3d8",
                            "0936f681cbdca72b0f3f65f3e45b4f89",
                            "d53b32eeb5807d6764dc45660687f6a7",
                            "8e34d57a8cd9dfa997933ef014d07021",
                            "b09e116fcdc2adae3e4d085b16c877a9",
                            "e741a5e5a32b9010fdb6be0c1e1cee1d"
                        ]
                    },
                    {
                        "id": "42a832e6fc254a11dc3620877b03ccc0",
                        "description": "Bitwise operations directly manipulate bits—patterns of 0s and 1s. Though they can be tricky to learn at first, their speed makes them a useful addition to any programmer's toolbox.",
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "introduction-to-bitwise-operators",
                        "title": "Introduction to Bitwise Operators",
                        "time": 79,
                        "type": "lesson",
                        "published_exercise_ids": [
                            "c2014b6ba458f2a844d0378e764064d0",
                            "e06ad8f6ac7c887b171004334d2774d4",
                            "2b7b403b0a1c0f794b8dd041ebb6b253",
                            "f733d4f558d3a53ddd67ca5cafaa353a",
                            "1d270d20075262810d52bb9ab80ad153",
                            "8dd2a61f7f35ee251c4c1b03f74bbc89",
                            "c55cab5609e242686f02730cfe5e048a",
                            "45b3daba46eff35944eb2dfaee2eb082",
                            "1d4a0721ae209f98ad6a6aeb65074849",
                            "64a60fef6cf0dcdb1d9537e0a3122d6a",
                            "1151c9f147b985e78b1aef70156737e1",
                            "d7e6fc62ee7be5539a46bf1dabd33c73",
                            "70433bf92b3a60d2ce355d08ff2057de",
                            "3ef84c8e9418c6da45c694b3e7dfd483"
                        ],
                        "exercise_ids": [
                            "c2014b6ba458f2a844d0378e764064d0",
                            "e06ad8f6ac7c887b171004334d2774d4",
                            "2b7b403b0a1c0f794b8dd041ebb6b253",
                            "f733d4f558d3a53ddd67ca5cafaa353a",
                            "1d270d20075262810d52bb9ab80ad153",
                            "8dd2a61f7f35ee251c4c1b03f74bbc89",
                            "c55cab5609e242686f02730cfe5e048a",
                            "45b3daba46eff35944eb2dfaee2eb082",
                            "1d4a0721ae209f98ad6a6aeb65074849",
                            "64a60fef6cf0dcdb1d9537e0a3122d6a",
                            "1151c9f147b985e78b1aef70156737e1",
                            "d7e6fc62ee7be5539a46bf1dabd33c73",
                            "70433bf92b3a60d2ce355d08ff2057de",
                            "3ef84c8e9418c6da45c694b3e7dfd483"
                        ]
                    },
                    {
                        "id": "7e202b6204f4a29f4485f849aa5743d5",
                        "description": "It's time to build fluency in Python fundamentals. In this next Pro Project, we're going to practice functions and conditionals in Python so you can hone your skills and feel confident taking them to the real world.\nWhy? You've learned the basics—now, let's build something fun and practical.\nWhat's next? A color converter, conditionals, more Python. You got this! ",
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "rgb-hex",
                        "title": "RGB-HEX Converter",
                        "time": 105,
                        "type": "project",
                        "standalone": false,
                        "project_information": {
                            "ein_config": {
                                "extensions": {
                                    "python": {
                                        "cmds": [
                                            "python {{ .fileName }}"
                                        ]
                                    },
                                    "py2": {
                                        "cmds": [
                                            "python {{ .fileName }}"
                                        ]
                                    },
                                    "python2": {
                                        "cmds": [
                                            "python {{ .fileName }}"
                                        ]
                                    }
                                },
                                "container_type": "python",
                                "server": "http"
                            },
                            "download_path": null,
                            "objective": "In this project, we'll use Bitwise operators to build a calculator that can convert \u003ca href=\"https://en.wikipedia.org/wiki/RGB_color_model\" target=\"_blank\"\u003eRGB values\u003c/a\u003e to \u003ca href=\"https://en.wikipedia.org/wiki/Hexadecimal\" target=\"_blank\"\u003eHexadecimal (hex) values\u003c/a\u003e, and vice-versa.\n\nWe'll add three methods to the project:\n\n* A method to convert RGB to Hex\n* A method to convert Hex to RGB\n* A method that starts the prompt cycle\n\nThe program should do the following:\n\n1. Prompt the user for the type of conversion they want\n2. Ask the user to input the RGB or Hex value\n3. Use Bitwise operators and shifting in order to convert the value\n4. Print the converted value to the user\n\nIt's useful to know some background on RGB and hex values, so we recommend reading the resources we linked to.\n\nNote: As with professional software development, you should be saving your code very often. As you code, make sure you click the \"Save\" button below to save your code/changes. Otherwise, you run the risk of losing all your code.\n\nLet's begin!\n\nIf you get stuck during this project or would like to see an experienced developer work through it, click \"**Get Unstuck**\" to see a **project walkthrough video**.",
                            "preview_url": null,
                            "thumbnail_url": null,
                            "video_url": "https://www.youtube.com/watch?v=1PpV-Qe6Qdo",
                            "workspace": {
                                "id": "5c34905c1d19727d7ef7e36f",
                                "slug": "python-ext-prj_rgb-hex",
                                "type": "python"
                            },
                            "self_assessments": [
                                {
                                    "heading": "RGB-HEX Converter",
                                    "tasks": [
                                        {
                                            "hint": "```py\ndef rgb_hex():\n```",
                                            "task_key": "0_0",
                                            "text": "First, we'll create the RGB to Hex method.\n\nOn line 1, add a method called `rgb_hex()`."
                                        },
                                        {
                                            "hint": "```py\ndef rgb_hex():\n  invalid_msg = \"Some error message goes here...\"\n```",
                                            "task_key": "0_1",
                                            "text": "We should expect users to make accidental errors as they input RGB values. Let's create a constant error message that will store the message we will display to users when they make an accidental error.\n\nInside the method, create a variable called `invalid_msg` and set it equal to an appropriate error message. The message should say something about invalid values being entered."
                                        },
                                        {
                                            "hint": "```py\ndef rgb_hex():\n  invalid_msg = \"Some error message goes here...\"\n\n  red = int(raw_input(\"Enter red (R) value: \"))\n```",
                                            "task_key": "0_2",
                                            "text": "To convert RGB values, we'll have to prompt the user to enter values for red (R), green (G), and blue (B). Let's start by asking them enter a value for red.\n\nOn the next line, still inside of the method, prompt the user to enter a red value using `raw_input`. Wrap their input using`int()`. Finally, set the result equal to a variable called `red`."
                                        },
                                        {
                                            "hint": "```py\ndef rgb_hex():\n  invalid_msg = \"Some error message goes here...\"\n\n  red = int(raw_input(\"Enter red (R) value: \"))\n  if (red \u003c 0 or red \u003e 255):\n```",
                                            "task_key": "0_3",
                                            "text": "We know that an RGB value contains three separate values, with each value representing an amount of red (R), green (G), and blue (B). Acceptable values are within the range of 0 to 255. Let's add error checking to make sure acceptable values are entered.\n\nOn the next line, add an `if` statement that checks if the value of `red` is less than 0, `or` greater than 255."
                                        },
                                        {
                                            "hint": "```py\ndef rgb_hex():\n\n  invalid_msg = \"Invalid value. Try again.\"\n\n  red = int(raw_input(\"Enter red (R) value: \"))\n  if (red \u003c 0 or red \u003e 255):\n    print invalid_msg\n    return\n```",
                                            "task_key": "0_4",
                                            "text": "Inside of the `if` statement, we should inform the user that an invalid value has been entered.\n\nInside of the statement, print the error message that you created earlier. Then, on the next line, return."
                                        },
                                        {
                                            "hint": "Use the hint from Step 3 to help you.",
                                            "task_key": "0_5",
                                            "text": "Now, just as in Step 3, prompt the user to enter a value for green (G). Wrap the input using `int()` and set the result equal to a variable called `green`."
                                        },
                                        {
                                            "hint": "Use the hints from Steps 4 and 5 to help you.",
                                            "task_key": "0_6",
                                            "text": "Next, add error checking to make sure that the value the user enters for the color green is valid. Inside of the `if` statement, print the error message and then return on the next line."
                                        },
                                        {
                                            "hint": "Use the hint from Step 3 to help you.",
                                            "task_key": "0_7",
                                            "text": "We'll have to follow the same process to prompt the user to enter a value for the color blue (B).\n\nPrompt the user, wrap their input with `int()`, and set it equal to a variable called `blue`."
                                        },
                                        {
                                            "hint": "Use the hints from Steps 4 and 5 to help you.",
                                            "task_key": "0_8",
                                            "text": "Again, add error checking make sure the value entered for the color blue is valid. Inside of the `if` statement, print the error message and then return."
                                        },
                                        {
                                            "hint": null,
                                            "task_key": "0_9",
                                            "text": "Now it's time to use \u003ca href=\"https://www.codecademy.com/courses/learn-python/lessons/introduction-to-bitwise-operators/exercises/just-a-little-bit-\" target=\"_blank\"\u003eBitwise operators\u003c/a\u003e to build the rest of our method. We recommend becoming more familiar with \u003ca href=\"https://en.wikipedia.org/wiki/Hexadecimal\" target=\"_blank\"\u003ehexadecimal numbers\u003c/a\u003e first so that you can understand what the Bitwise operators in the method do."
                                        },
                                        {
                                            "hint": "```py\ndef rgb_hex():\n\n  invalid_msg = \"Invalid value. Try again.\"\n\n  red = int(raw_input(\"Enter red (R) value: \"))\n  if (red \u003c 0 or red \u003e 255):\n    print invalid_msg\n    return\n\n  # green\n\n  # blue\n\n  val = (red \u003c\u003c 16) + (green \u003c\u003c 8) + blue\n```\nA hexadecimal number can be represented with 3 \u003ca href=\"#\"\u003ebytes\u003c/a\u003e, a byte for each part of R, G, and B. A byte is composed of two nibbles (4 bit numbers). Hexadecimal numbers have 6 characters and each nibble represents a hex character. \n\nShifting red to the left by 16 bits will insert 16 bits that will hold the place of green (shifted 8 bits to the left) and blue (no shift).\n\nBecome familiar with bits by reading more \u003ca href=\"https://en.wikipedia.org/wiki/Byte\" target=\"_blank\"\u003ehere\u003c/a\u003e.\n\nIn the hint above, `# green` (or `# blue`) simply indicates that the code has been abbreviated to avoid a lengthy hint. Actual code should not be removed or replaced.",
                                            "task_key": "0_10",
                                            "text": "On the next line, outside of any `if` statement, create a variable called `val`. Set it equal to the sum of shifting `red` to left by 16 bits, shifting `green` to left by 8 bits, and blue."
                                        },
                                        {
                                            "hint": "```py\ndef rgb_hex():\n\n  invalid_msg = \"Invalid value. Try again.\"\n\n  red = int(raw_input(\"Enter red (R) value: \"))\n  if (red \u003c 0 or red \u003e 255):\n    print invalid_msg\n    return\n\n  # green\n\n  # blue\n\n  val = (red \u003c\u003c 16) + (green \u003c\u003c 8) + blue\n  print \"%s\" % (hex(val)[2:]).upper()\n```",
                                            "task_key": "0_11",
                                            "text": "Finally, call the `hex()` method and pass `value` in as the argument. Use list slicing to print out everything except the first two characters of that string. Also, call the `upper()` method on the result.\n\nSee if you can use string formatting to complete all of this in one line of code.\n\nClick \u003ca href=\"https://docs.python.org/2/library/functions.html#hex\" target=\"_blank\"\u003ehere\u003c/a\u003e to learn more about how `hex()` works."
                                        },
                                        {
                                            "hint": "Use the hint from Step 1 to help you.",
                                            "task_key": "0_12",
                                            "text": "Great! This method will convert an RGB value to a hex value.\n\nNow, add a method called `hex_rgb()`. This is the method we'll use to convert the opposite way (from Hex to RGB)."
                                        },
                                        {
                                            "hint": "```py\ndef rgb_hex():\n  # Code\n\ndef hex_rgb():\n  hex_val = raw_input(\"Enter the color (six hexadecimal digits): \")\n```",
                                            "task_key": "0_13",
                                            "text": "Inside of the method, prompt the user to enter a hexadecimal value using `raw_input()`. Set the result equal to a variable called `hex_val`."
                                        },
                                        {
                                            "hint": "```py\ndef rgb_hex():\n  # Code\n\ndef hex_rgb():\n  hex_val = raw_input(\"Enter the color (six hexadecimal digits): \")\n  if len(hex_val) != 6:\n```",
                                            "task_key": "0_14",
                                            "text": "Let's add some error checking that will make sure the user inputs a valid hexadecimal value. Valid hexadecimal values are six characters long, so let's check for that first.\n\nAdd an `if` statement that checks if the length of `hex_val` is not equal to six."
                                        },
                                        {
                                            "hint": "```py\ndef rgb_hex():\n  # Code\n\ndef hex_rgb():\n  hex_val = raw_input(\"Enter the color (six hexadecimal digits): \")\n  if len(hex_val) != 6:\n    print \"Invalid hexidecimal value. Try again.\"\n    return\n```",
                                            "task_key": "0_15",
                                            "text": "Inside of the `if` statement, print a message to the user indicating that an invalid value was entered. On the next line, return."
                                        },
                                        {
                                            "hint": "```py\ndef rgb_hex():\n    # Code\n\ndef hex_rgb():\n  hex_val = raw_input(\"Enter the color (six hexadecimal digits): \")\n  if len(hex_val) != 6:\n    print \"Invalid hexidecimal value. Try again.\"\n    return\n  else:\n    hex_val = int(hex_val, 16)\n```\n\nThe `16` indicates to the `int()` function that `hex_val` is in base 16 (a hexadecimal number).",
                                            "task_key": "0_16",
                                            "text": "Otherwise, we should accept the hex value as an integer. \n\nAdd a corresponding `else` block that sets `hex_val` equal to calling `int()` with the arguments `hex_val` and `16`."
                                        },
                                        {
                                            "hint": "```py\ndef rgb_hex():\n  # Code\n\ndef hex_rgb():\n  hex_val = raw_input(\"Enter the color (six hexadecimal digits): \")\n  if len(hex_val) != 6:\n    print \"Invalid hexidecimal value. Try again.\"\n    return\n  else:\n    hex_val = int(hex_val, 16)\n\n  two_hex_digits = 2**8\n```",
                                            "task_key": "0_17",
                                            "text": "Next, outside of the `else` block, but still within the method, create a variable called `two_hex_digits` and set it equal to 2 raised to the power of 8."
                                        },
                                        {
                                            "hint": "```py\ndef rgb_hex():\n  # Code\n\ndef hex_rgb():\n  hex_val = raw_input(\"Enter the color (six hexadecimal digits): \")\n  if len(hex_val) != 6:\n    print \"Invalid hexidecimal value. Try again.\"\n    return\n  else:\n    hex_val = int(hex_val, 16)\n\n  two_hex_digits = 2**8\n  blue = hex_val % two_hex_digits\n```\n\nThe variable `two_hex_digits` represents two hexadecimal digits. This will return the first RGB value (from right to left) of blue (B).",
                                            "task_key": "0_18",
                                            "text": "Next, we'll start calculating the RGB values.\n\nCreate a variable called `blue` and set it equal to `hex_val` modulo `two_hex_digits`."
                                        },
                                        {
                                            "hint": "```py\ndef rgb_hex():\n  # Code\n\ndef hex_rgb():\n  hex_val = raw_input(\"Enter the color (six hexadecimal digits): \")\n  if len(hex_val) != 6:\n    print \"Invalid hexidecimal value. Try again.\"\n    return\n  else:\n    hex_val = int(hex_val, 16)\n\n  two_hex_digits = 2**8\n  blue = hex_val % two_hex_digits\n  hex_val = hex_val \u003e\u003e 8\n```\n\nThis line does just the opposite of what we did in the previous method. It moves `hex_val` 8 bits to the right, preparing us to modulo for the next value (G).",
                                            "task_key": "0_19",
                                            "text": "Next, shift `hex_val` to the right by 8 bits."
                                        },
                                        {
                                            "hint": "Use the hint from Step 19 to help you.",
                                            "task_key": "0_20",
                                            "text": "Now, just as you did in Step 19, create a variable called `green` and set it equal to `hex_val` modulo `two_hex_digits`."
                                        },
                                        {
                                            "hint": "Use the hint from Step 20 to help you.",
                                            "task_key": "0_21",
                                            "text": "On the next line, shift `hex_val` once more to the right by 8 bits."
                                        },
                                        {
                                            "hint": "Use the hint from Step 19 to help you.",
                                            "task_key": "0_22",
                                            "text": "Finally, calculate the red value by creating a variable called `red` and setting it equal to `hex_val` modulo `two_hex_digits`."
                                        },
                                        {
                                            "hint": "```py\ndef rgb_hex():\n  # Code\n\ndef hex_rgb():\n  hex_val = raw_input(\"Enter the color (six hexadecimal digits): \")\n  if len(hex_val) != 6:\n    print \"Invalid hexidecimal value. Try again.\"\n    return\n  else:\n    hex_val = int(hex_val, 16)\n\n  two_hex_digits = 2**8\n  blue = hex_val % two_hex_digits\n  hex_val = hex_val \u003e\u003e8\n  # modulo green\n  # shift to the right 8 bits\n  # modulo red\n\n  print \"Red: %s Green: %s Blue: %s\" % (red, green, blue)\n```",
                                            "task_key": "0_23",
                                            "text": "Let's write the last line of code for this method.\n\nOn the next line, use string formatting to print out the RGB values on one line. There should be no space between the individual values.\n"
                                        },
                                        {
                                            "hint": "Use the hint from Step 1 to help you.",
                                            "task_key": "0_24",
                                            "text": "Fantastic! The method you just wrote will convert a hexadecimal value to an RGB value.\n\nLet's add the last method that will run our program. Create a new method called `convert()`."
                                        },
                                        {
                                            "hint": "```py\ndef convert():\n  while True:\n```",
                                            "task_key": "0_25",
                                            "text": "Inside the method, add a `while` loop with the Boolean `True` as the condition."
                                        },
                                        {
                                            "hint": "```py\ndef convert():\n  while True:\n    option = raw_input(\"Enter 1 to convert RGB to HEX. Enter 2 to convert HEX to RGB. Enter X to Exit: \")\n```",
                                            "task_key": "0_26",
                                            "text": "On the next line, inside of the `while` loop, prompt the user for input with the following message: `Enter 1 to convert RGB to HEX. Enter 2 to convert HEX to RGB. Enter X to Exit: `.\n\nSet the result equal to a variable called `option`."
                                        },
                                        {
                                            "hint": "```py\ndef convert():\n  while True:\n    option = raw_input(\"Enter 1 to convert RGB to HEX. Enter 2 to convert HEX to RGB. Enter X to Exit: \")\n    \n    if option == '1':\n```",
                                            "task_key": "0_27",
                                            "text": "Now let's handle all the cases of user input. \n\nStart an `if` statement that checks if `option` is equal to `'1'` (as a string)."
                                        },
                                        {
                                            "hint": "```py\ndef convert():\n  while True:\n    option = raw_input(\"Enter 1 to convert RGB to HEX. Enter 2 to convert HEX to RGB. Enter X to Exit: \")\n    \n    if option == '1':\n      print \"RGB to Hex...\"\n      rgb_hex()\n```",
                                            "task_key": "0_28",
                                            "text": "Inside of the `if` statement, print the message `RGB to Hex...` to the user.\n\nOn the following line, call the `rgb_hex()` method."
                                        },
                                        {
                                            "hint": "```py\ndef convert():\n  while True:\n    option = raw_input(\"Enter 1 to convert RGB to HEX. Enter 2 to convert HEX to RGB. Enter X to Exit: \")\n    \n    if option == '1':\n      print \"RGB to Hex...\"\n      rgb_hex()\n    elif option == '2':\n      # Print the message\n      # Call the method\n```\n\nUse the hint from Step 29 to help you if you need more help.",
                                            "task_key": "0_29",
                                            "text": "Add a corresponding `elif` block that checks if the option is `'2'`. If it is, print `Hex to RGB...` first. Then, on the next line, call the `hex_rgb()` method."
                                        },
                                        {
                                            "hint": "```py\ndef convert():\n  while True:\n    option = raw_input(\"Enter 1 to convert RGB to HEX. Enter 2 to convert HEX to RGB. Enter X to Exit: \")\n    \n    if option == '1':\n      print \"RGB to Hex...\"\n      rgb_hex()\n    # elif block\n      # Print here\n      # Call the method\n    elif option == 'X' or option == 'x':\n      break\n```",
                                            "task_key": "0_30",
                                            "text": "Add another `elif` statement that checks if the option is `'X'` or `'x'`. If it is, exit the loop with the `break` keyword."
                                        },
                                        {
                                            "hint": null,
                                            "task_key": "0_31",
                                            "text": "Finally, finish the `if` statement by adding an `else` block. This part of the statement will handle any other input from the user. Inside of the `else` block, print `Error.`."
                                        },
                                        {
                                            "hint": "```py\ndef rgb_hex():\n  # Code\n\ndef hex_rgb():\n  # Code\n\ndef convert():\n  # Code\n\nconvert()\n```\n\nIn the hint above, `# Code` simply indicates that the code has been abbreviated to avoid a lengthy hint. Actual code should not be removed or replaced.",
                                            "task_key": "0_32",
                                            "text": "You're nearly done - great job! The next step is to actually call the method that will run our program.\n\nAs the final line of your code (outside of any method), call the `convert()` method."
                                        },
                                        {
                                            "hint": "If you correctly completed this project, then:\n\nEntering `255, 40, 123` as an RGB value will output `FF287B` as the hex value.\n\nEntering `FF40AB` as a hex value will output `255, 64, 171` as the RGB value.",
                                            "task_key": "0_33",
                                            "text": "Great! Let's test out the converter.\n\nIn the terminal, type the following and hit \"Enter\" on your keyboard:\n\n```bash\npython rgb2hex.py\n```\n\nFeel free to expand the functionality. Happy coding!"
                                        }
                                    ]
                                }
                            ],
                            "components": [
                                {
                                    "id": "5c34905c1d19727d7ef7e36e",
                                    "type": "Terminal",
                                    "shell": "bash",
                                    "prevent_checkpoint_run": null,
                                    "fake_responses": []
                                },
                                {
                                    "id": "5c34905c1d19727d7ef7e36d",
                                    "type": "PersistentCodeEditor",
                                    "files": [
                                        "rgb2hex.py"
                                    ],
                                    "navigator_disabled": true,
                                    "no_run_button": null
                                }
                            ]
                        }
                    },
                    {
                        "id": "181097d18a5315cb6b69bf674ebffb50",
                        "description": "Classes are a crucial part of object-oriented programming (OOP). In this lesson, we'll explain what classes are, why they're important, and how to use them effectively.",
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "introduction-to-classes",
                        "title": "Introduction to Classes",
                        "time": 83,
                        "type": "lesson",
                        "published_exercise_ids": [
                            "f9934229bbb170d32a7d7785be1f78b2",
                            "28c60ef449c2b2ec9983601aab07f981",
                            "a19c1811dd8595a769dfbc4634a917b4",
                            "5f69167dcbbf3360c371d2040c41fb42",
                            "dc0e86272605d34f3429461dea69361b",
                            "3cda352d0a9400df35b38b60a84c930a",
                            "a3d34668390ec542d3bdfc17610a7743",
                            "ed6536f705628286d90d15e0c7f94c68",
                            "6c70472d0e55a5214c226f1d47ee8408",
                            "0f5c1692d99d8fba4c46fbe20a3f3e89",
                            "1a4640709c32e67955b86a553aefcd99",
                            "f963cbd99bca8f71f95ea8764324ede8",
                            "a71614d4cefc814f51cc9a3ac86958d1",
                            "06f6fb216be72940fe489c1b3b07fd6d",
                            "337d1d8181649ed0b7a92af5cefbd824",
                            "ecbed79ec172e5d7790e3ebd5ad7e8d4",
                            "109ecb374896c5a3aed0e81a3227e9c6",
                            "77909664971a632a80acd4045dbd9556"
                        ],
                        "exercise_ids": [
                            "f9934229bbb170d32a7d7785be1f78b2",
                            "28c60ef449c2b2ec9983601aab07f981",
                            "a19c1811dd8595a769dfbc4634a917b4",
                            "5f69167dcbbf3360c371d2040c41fb42",
                            "dc0e86272605d34f3429461dea69361b",
                            "3cda352d0a9400df35b38b60a84c930a",
                            "a3d34668390ec542d3bdfc17610a7743",
                            "ed6536f705628286d90d15e0c7f94c68",
                            "6c70472d0e55a5214c226f1d47ee8408",
                            "0f5c1692d99d8fba4c46fbe20a3f3e89",
                            "1a4640709c32e67955b86a553aefcd99",
                            "f963cbd99bca8f71f95ea8764324ede8",
                            "a71614d4cefc814f51cc9a3ac86958d1",
                            "06f6fb216be72940fe489c1b3b07fd6d",
                            "337d1d8181649ed0b7a92af5cefbd824",
                            "ecbed79ec172e5d7790e3ebd5ad7e8d4",
                            "109ecb374896c5a3aed0e81a3227e9c6",
                            "77909664971a632a80acd4045dbd9556"
                        ]
                    },
                    {
                        "id": "7f25929af733c51caa8564b127768c82",
                        "description": "Make your own Car and learn how to driveCar()!",
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "python-2-classes",
                        "title": "Classes",
                        "time": 48,
                        "type": "lesson",
                        "published_exercise_ids": [
                            "c5b2d97feecbc318b12f602f317ff350",
                            "cd94e6edcf7def3775f8398003f69004",
                            "5b142eea6959e0e0dfc02f3ebbc81497",
                            "4db5fd390183ac0ef3da8b88fef908d7",
                            "219b29bad1cb257b8b87ab1d0cabf2a5",
                            "b3fd9e0af5b0d2e432bb071bfd92bd12",
                            "e986b6ee4e45837fe4c7b0943366df6a",
                            "e03481796de080dd7bc43dc0ed0b958e",
                            "f7e77a1b13f460b0b628b24764b2cfc9",
                            "717d69fec3fa5d81a1ecf769451394b7",
                            "59dbea62d9aad348df47281ec24c8c1c"
                        ],
                        "exercise_ids": [
                            "c5b2d97feecbc318b12f602f317ff350",
                            "cd94e6edcf7def3775f8398003f69004",
                            "5b142eea6959e0e0dfc02f3ebbc81497",
                            "4db5fd390183ac0ef3da8b88fef908d7",
                            "219b29bad1cb257b8b87ab1d0cabf2a5",
                            "b3fd9e0af5b0d2e432bb071bfd92bd12",
                            "e986b6ee4e45837fe4c7b0943366df6a",
                            "e03481796de080dd7bc43dc0ed0b958e",
                            "f7e77a1b13f460b0b628b24764b2cfc9",
                            "717d69fec3fa5d81a1ecf769451394b7",
                            "59dbea62d9aad348df47281ec24c8c1c"
                        ]
                    },
                    {
                        "id": "8a8add0c9853f626625817e46ccaac21",
                        "description": "It's time to build fluency in Python classes. In this next Pro Project, we're going to practice classes in Python so you can hone your skills and feel confident taking them to the real world.\nWhy? Classes provide a means of bundling data and functionality together. You need to master these in order to master Python.   What's next? Bank acounts, classes, more Python. You got this! ",
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "bank-account",
                        "title": "Bank Account",
                        "time": 78,
                        "type": "project",
                        "standalone": false,
                        "project_information": {
                            "ein_config": {
                                "extensions": {
                                    "python": {
                                        "cmds": [
                                            "python {{ .fileName }}"
                                        ]
                                    },
                                    "py2": {
                                        "cmds": [
                                            "python {{ .fileName }}"
                                        ]
                                    },
                                    "python2": {
                                        "cmds": [
                                            "python {{ .fileName }}"
                                        ]
                                    }
                                },
                                "container_type": "python",
                                "server": "http"
                            },
                            "download_path": null,
                            "objective": "In this project, we'll create a Python class that can be used to create and manipulate a personal bank account.\n\nThe bank account class you'll create should have methods for each of the following:\n\n* Accepting deposits\n* Allowing withdrawals\n* Showing the balance\n* Showing the details of the account\n\nNote: As with professional software development, you should be saving your code very often. As you code, make sure you click the \"Save\" button below to save your code/changes. Otherwise, you run the risk of losing all your code!\n\nLet's begin!\n\nIf you get stuck during this project or would like to see an experienced developer work through it, click \"**Get Unstuck**\" to see a **project walkthrough video**.",
                            "preview_url": null,
                            "thumbnail_url": null,
                            "video_url": "https://www.youtube.com/watch?v=vr8iYUt8QAU",
                            "workspace": {
                                "id": "5c34905e1d19727d7ef7e41f",
                                "slug": "python-ext-prj_bank-account",
                                "type": "python"
                            },
                            "self_assessments": [
                                {
                                    "heading": "Bank Account",
                                    "tasks": [
                                        {
                                            "hint": "```py\nclass BankAccount(object):\n```",
                                            "task_key": "0_0",
                                            "text": "On line 1, create a `BankAccount` class."
                                        },
                                        {
                                            "hint": "```py\nclass BankAccount(object):\n  balance = 0\n```",
                                            "task_key": "0_1",
                                            "text": "Next, add a \u003ca href=\"https://www.codecademy.com/en/courses/learn-python/lessons/introduction-to-classes/exercises/class-scope\" target=\"_blank\"\u003emember variable\u003c/a\u003e called `balance` and set it equal to `0`. This will represent the starting balance of any new `BankAccount` object."
                                        },
                                        {
                                            "hint": "```py\nclass BankAccount(object):\n  balance = 0\n  def __init__(self, name):\n```",
                                            "task_key": "0_2",
                                            "text": "Add the `__init__()` method that takes the default `self` parameter and an additional `name` parameter. Later, we'll use the `name` parameter to specify who the account belongs to."
                                        },
                                        {
                                            "hint": "Use \u003ca href=\"https://www.codecademy.com/en/courses/learn-python/lessons/introduction-to-classes/exercises/lets-not-get-too-selfish\" target=\"_blank\"\u003ethis exercise\u003c/a\u003e to help you.",
                                            "task_key": "0_3",
                                            "text": "Inside the `__init__()` method, assign the `self.name` property to the `name` parameter that the method accepts."
                                        },
                                        {
                                            "hint": "```py\nclass BankAccount(object):\n  balance = 0\n  def __init__(self, name):\n    self.name = name\n\n  def __repr__(self):\n```",
                                            "task_key": "0_4",
                                            "text": "Well done. This method will make sure that whatever name the user types (when creating an object of this class) will be attributed to that object.\n\nNext, add a `__repr__()` method that takes the default `self` parameter."
                                        },
                                        {
                                            "hint": "```py\nclass BankAccount(object):\n  balance = 0\n  def __init__(self, name):\n    self.name = name\n\n  def __repr__(self):\n    return \"%s's account. Balance: $%.2f\" % (self.name, self.balance)\n```\n\nNote: The `__repr__()` method requires `return` (instead of `print`) to display the information associated with an object. ",
                                            "task_key": "0_5",
                                            "text": "The `__repr__()` method defines what represents the object when a user tries to print that object using `print`. Let's add to this method and make it descriptive.\n\nIn the `__repr__()` method, return a message stating who the account belongs to. The message should also include the balance, limited to two decimal places. Use string formatting to complete the message."
                                        },
                                        {
                                            "hint": "```py\nclass BankAccount(object):\n  balance = 0\n  def __init__(self, name):\n    self.name = name\n\n  def __repr__(self):\n    return \"%s's account. Balance: $%.2f\" % (self.name, self.balance)\n\n  def show_balance(self):\n```",
                                            "task_key": "0_6",
                                            "text": "Cool! The method you just added will return the bank account's information if a user tries to `print` a `BankAccount` object.\n\nSince printing an object isn't always useful, let's add a method called `show_balance()` that will print just the balance. It should accept the default `self` parameter."
                                        },
                                        {
                                            "hint": "Use the hint from Step 6 to help you. Use `print` instead of `return`.",
                                            "task_key": "0_7",
                                            "text": "On the next line, use string formatting to print the user's balance to two decimal places."
                                        },
                                        {
                                            "hint": "```py\nclass BankAccount(object):\n  balance = 0\n  def __init__(self, name):\n    # Code\n\n  def __repr__(self):\n    # Code\n\n  def show_balance(self):\n    # Code\n\n  def deposit(self, amount):\n```\n\nIn the hint above, `# Code` simply indicates that the code has been abbreviated to avoid a lengthy hint. Actual code should not be removed or replaced.",
                                            "task_key": "0_8",
                                            "text": "Great! We can use that method to print the user's balance.\n\nNext, let's add a method that allows deposits to the bank account. Add a method called `deposit()` that takes the default parameter, as well as an `amount` parameter."
                                        },
                                        {
                                            "hint": "```py\nclass BankAccount(object):\n  balance = 0\n  def __init__(self, name):\n    # Code\n\n  def __repr__(self):\n    # Code\n\n  def show_balance(self):\n    # Code\n\n  def deposit(self, amount):\n    if amount \u003c= 0:\n      print \"Some error message here\"\n      return\n```",
                                            "task_key": "0_10",
                                            "text": "Inside of the `deposit()` method, let's do some error checking. We shouldn't allow a user to deposit less than or equal to zero dollars (that doesn't make sense).\n\nAdd an `if` statement that checks if `amount` is less than or equal to zero. Inside of the statement, print an appropriate error message. Then, on the next line, return."
                                        },
                                        {
                                            "hint": "```py\nclass BankAccount(object):\n  balance = 0\n  def __init__(self, name):\n    # Code\n\n  def __repr__(self):\n    # Code\n\n  def show_balance(self):\n    # Code\n\n  def deposit(self, amount):\n    if amount \u003c= 0:\n      print \"Some error message here\"\n    else:\n      # Print the amount deposited\n```\n\nUse the hint from Step 6 to help you. Use `print` instead of `return`.",
                                            "task_key": "0_11",
                                            "text": "Otherwise, we should print out the amount of the deposit and then increment the user's balance. \n\nAdd a corresponding `else` block. Inside of the `else` block, print a message that displays the amount that the user is depositing. Use string formatting and print only to two decimal places."
                                        },
                                        {
                                            "hint": "```py\nclass BankAccount(object):\n  balance = 0\n  def __init__(self, name):\n    # Code\n\n  def __repr__(self):\n    # Code\n\n  def show_balance(self):\n    # Code\n\n  def deposit(self, amount):\n    if amount \u003c= 0:\n      print \"Some error message here\"\n    else:\n      # Print the amount deposited\n      self.balance += amount\n```",
                                            "task_key": "0_9",
                                            "text": "On the next line, we should increment the user's balance. \n\nIncrement the user's balance using the `+=` operator."
                                        },
                                        {
                                            "hint": "```py\nclass BankAccount(object):\n  balance = 0\n  def __init__(self, name):\n    # Code\n\n  def __repr__(self):\n    # Code\n\n  def show_balance(self):\n    # Code\n\n  def deposit(self, amount):\n    if amount \u003c= 0:\n      print \"Some error message here\"\n    else:\n      # Print the amount deposited\n      self.balance += amount\n      self.show_balance()\n```",
                                            "task_key": "0_12",
                                            "text": "On the next line, display the new balance to the user by calling the `show_balance()` method.\n\nMethods can be called on objects - try to figure out which object the method is called on."
                                        },
                                        {
                                            "hint": "Use the hint from Step 9 to help you.",
                                            "task_key": "0_13",
                                            "text": "If a user can deposit, we should also allow them to withdraw. \n\nAdd a new method called `withdraw()`. It should take the default parameter, as well as an `amount` parameter."
                                        },
                                        {
                                            "hint": "```py\nclass BankAccount(object):\n  balance = 0\n  def __init__(self, name):\n    # Code\n\n  def __repr__(self):\n    # Code\n\n  def show_balance(self):\n    # Code\n\n  def deposit(self, amount):\n    # Code\n\n  def withdraw(self, amount):\n    # The if statement\n      # Print an error message\n      # Return\n```\n\nThis step is similar to Step 10.",
                                            "task_key": "0_15",
                                            "text": "Let's do some error checking again. The user should not be allowed to withdraw more than what is currently in their bank account.\n\nOn the next line, add an `if` statement that checks if `amount` is greater than the balance. Inside the statement, print an appropriate error message. Then on the next line, return."
                                        },
                                        {
                                            "hint": "Use the hint from Step 6 to help you. Use `print` instead of `return`.",
                                            "task_key": "0_14",
                                            "text": "Otherwise, we should allow the user to withdraw the funds. \n\nFirst, add a corresponding `else` block. Then, add a line that prints the amount that the user is withdrawing. Use string formatting and print the amount to two decimal places."
                                        },
                                        {
                                            "hint": "Use the hint from Step 12 to help you.",
                                            "task_key": "0_16",
                                            "text": "Next, we should update the user's balance.\n\nOn the next line, \u003ca href=\"http://www.merriam-webster.com/dictionary/decrement\" target=\"_blank\"\u003edecrement\u003c/a\u003e the balance by the `amount` using the `-=` operator."
                                        },
                                        {
                                            "hint": "Use the hint from Step 13 to help you.",
                                            "task_key": "0_17",
                                            "text": "On the next line, display the user's balance by calling the `show_balance()` method."
                                        },
                                        {
                                            "hint": "```py\nclass BankAccount(object):\n  balance = 0\n  def __init__(self, name)__:\n    # Code\n\n  def __repr__(self):\n    # Code\n\n  def show_balance(self):\n    # Code\n\n  def deposit(self, amount):\n    # Code\n\n  def withdraw(self, amount):\n    # Code\n\nmy_account = BankAccount(\"Your-name-here\")\n```\n\nNote: Our code will not yet display anything in the terminal. For anything to happen, we first have to create objects of the class that we've created, and then manipulate those objects using the methods we've defined. We'll do that first, then we'll see the results at the end, in the terminal.",
                                            "task_key": "0_18",
                                            "text": "Perfect. We have minimal functionality and error checking that will allow a user to create an account, deposit to it, and withdraw from it. Let's test it out. \n\nOutside of any function, at the bottom of your file, create a `BankAccount` object called `my_account` and specify a name (as a string) for the argument."
                                        },
                                        {
                                            "hint": null,
                                            "task_key": "0_19",
                                            "text": "What happens if we try to print the `my_account` object? The `__repr__()` method should handle that case.\n\nOn the next line, print the `my_account` object."
                                        },
                                        {
                                            "hint": null,
                                            "task_key": "0_20",
                                            "text": "Let's look at the difference between `__repr__()` and `show_balance()`.\n\nOn the next line, call the `show_balance()` method on `my_account`."
                                        },
                                        {
                                            "hint": null,
                                            "task_key": "0_21",
                                            "text": "Next, deposit 2000 dollars to `my_account` using the `deposit()` method."
                                        },
                                        {
                                            "hint": null,
                                            "task_key": "0_22",
                                            "text": "Let's make sure the `withdraw()` function works. On the next line, withdraw 1000 dollars from `my_account` using the `withdraw()` method."
                                        },
                                        {
                                            "hint": null,
                                            "task_key": "0_23",
                                            "text": "Finally, let's see if the `__repr__()` method accurately reflects the changes that have happened to the `my_account` object.\n\nAs the last line of code, print the `my_account` object once again."
                                        },
                                        {
                                            "hint": null,
                                            "task_key": "0_24",
                                            "text": "Now it's time to see the results of our class. Make sure that you have saved your code. Then, in the terminal, type the following and hit \"Enter\" on your keyboard:\n\n```bash\npython bankaccount.py\n```\n\nThe console should show, in order:\n\n* The bank account's initial information\n* The balance\n* The deposit (along with the balance)\n* The withdrawal (along with the balance)\n* The bank account's most recent information\n\nFeel free to add or expand the functionality of the `BankAccount` class. Happy coding!"
                                        }
                                    ]
                                }
                            ],
                            "components": [
                                {
                                    "id": "5c34905e1d19727d7ef7e41d",
                                    "type": "PersistentCodeEditor",
                                    "files": [
                                        "bankaccount.py"
                                    ],
                                    "navigator_disabled": true,
                                    "no_run_button": null
                                },
                                {
                                    "id": "5c34905e1d19727d7ef7e41e",
                                    "type": "Terminal",
                                    "shell": "bash",
                                    "prevent_checkpoint_run": null,
                                    "fake_responses": []
                                }
                            ]
                        }
                    },
                    {
                        "id": "932b515d8de0e0fd4edcc557db7d392f",
                        "description": null,
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "learn-python-python-unit-11",
                        "title": "Introduction to Classes",
                        "time": 10,
                        "type": "quiz",
                        "assessment_ids": [
                            "5b1da4751d176d7bdd04f9ff",
                            "5b1da4751d176d7bdd04fa04",
                            "5b1da4751d176d7bdd04fa07",
                            "5b1da4751d176d7bdd04fa0d",
                            "5b1da4751d176d7bdd04fa13",
                            "5b1da4751d176d7bdd04fa19",
                            "5b1da4751d176d7bdd04fa1e",
                            "5b1da4751d176d7bdd04fa24",
                            "5b1da4751d176d7bdd04fa29",
                            "5b1da4751d176d7bdd04fa2f"
                        ],
                        "assessments": [
                            {
                                "id": "5b1da4751d176d7bdd04f9ff",
                                "type": "multiple_choice",
                                "prompt": "What is a general benefit of using classes in Python? ",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "Classes allow you to create instances of that class object that can be re-used in your code. ",
                                        "reason": "Correct! This is refers to a principle called D.R.Y. (Don't Repeat Yourself), it keeps your code clean and avoids redundancies. "
                                    },
                                    {
                                        "text": "A class can check the length of a string faster. ",
                                        "reason": "While you can try to implement a method to do this, there are more general benefits to creating a class."
                                    },
                                    {
                                        "text": "It can remove all the bugs on the page.",
                                        "reason": "Classes can be used to keep code cleaner which could reduce bugs, but it would not simply remove all of the bugs. "
                                    },
                                    {
                                        "text": "It allows for you to import more libraries than you could without classes.",
                                        "reason": "Classes do not give you that type of ability. "
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": null
                            },
                            {
                                "id": "5b1da4751d176d7bdd04fa04",
                                "type": "multiple_choice",
                                "prompt": "True or False: Python is an object-oriented programming(OOP) language.",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "True",
                                        "reason": "It's true! This means Python allows the user to manipulate programming constructs called objects."
                                    },
                                    {
                                        "text": "False",
                                        "reason": "Python is an OOP language, constructed classes inherit from the `object` class. "
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": null
                            },
                            {
                                "id": "5b1da4751d176d7bdd04fa07",
                                "type": "multiple_choice",
                                "prompt": "Fill in the following code (what should be the first argument):",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`self`",
                                        "reason": "Correct! `self` references the object that is being created and should be the first argument in a method. "
                                    },
                                    {
                                        "text": "`this`",
                                        "reason": "Python does not have a `this` keyword. "
                                    },
                                    {
                                        "text": "`pass`",
                                        "reason": "`pass` doesn't do anything, but it's useful as a placeholder in areas of your code where Python expects an expression. "
                                    },
                                    {
                                        "text": "`__init__()`",
                                        "reason": "`__init__()` will initialize the objects that is created and will take in one or more arguments. "
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "class NewClass(object):\n  def __init__( ______ ):\n    pass"
                                }
                            },
                            {
                                "id": "5b1da4751d176d7bdd04fa0d",
                                "type": "multiple_choice",
                                "prompt": "In the following code, what is the expected print statement? ",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`\"The Cap goes on your head!\"`",
                                        "reason": "Excellent! Since `cap` has a `name` attribute, it will interpolate the `name` into the string. "
                                    },
                                    {
                                        "text": "`\"The Hat goes on your head!\"`",
                                        "reason": "`Hat` is the name of the object, but that is not the attribute we're accessing."
                                    },
                                    {
                                        "text": "`\"The cap.name goes on your head!\"`",
                                        "reason": "`cap.name` has a value, which will be interpolated into the string. "
                                    },
                                    {
                                        "text": "`\"The self.name goes on your head!\"`",
                                        "reason": "`self` is a keyword that references the object, you will see this inside a class method. "
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "class Hat(object):\n  def __init__(self, name):\n    self.name = name \n    \ncap = Hat(\"Cap\")\nprint(\"The %s goes on your head!\" % cap.name)"
                                }
                            },
                            {
                                "id": "5b1da4751d176d7bdd04fa13",
                                "type": "multiple_choice",
                                "prompt": "Using the following code, how would you access `name` attribute of `cap`?  ",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`cap.name`",
                                        "reason": "Well done! Dot notation allows  the `name` attribute of `cap` to be accessed as `cap.name`."
                                    },
                                    {
                                        "text": "`self.name`",
                                        "reason": "`self` is a keyword that references the object, you will see this inside a class method. "
                                    },
                                    {
                                        "text": "`cap[name]`",
                                        "reason": "Python uses dot notation to access attributes, not brackets. "
                                    },
                                    {
                                        "text": "`Hat.name`",
                                        "reason": "`Hat` is the name of the class, `cap` is the variable that we've assigned to the new `Hat` object that was created."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "class Hat(object):\n  def __init__(self, name):\n    self.name = name \n\ncap = Hat(\"Cap\")"
                                }
                            },
                            {
                                "id": "5b1da4751d176d7bdd04fa19",
                                "type": "multiple_choice",
                                "prompt": "What type of variable is only available to instances of a particular class? ",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "member variables",
                                        "reason": "Member variables are available to all instances of a class. "
                                    },
                                    {
                                        "text": "global variables",
                                        "reason": "Global variables are available anywhere within the code.  "
                                    },
                                    {
                                        "text": "instance variables",
                                        "reason": "Instance variables refer to one specific object that was created from the class. "
                                    },
                                    {
                                        "text": "unknown variables ",
                                        "reason": "`unknown variables` are not actually a variable type in Python. "
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": null
                            },
                            {
                                "id": "5b1da4751d176d7bdd04fa1e",
                                "type": "multiple_choice",
                                "prompt": "Using the following code snippet, how could you create a new instance of a `Flower` and save it to the variable `hibiscus`?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`hibiscus = Flower(\"Hibiscus\", 5, \"red\")`",
                                        "reason": "This is the correct format to creating a new instance of a class."
                                    },
                                    {
                                        "text": "`hibiscus = Flower()`",
                                        "reason": "You need the right amount of arguments, in this case, we're expecting 3 arguments. "
                                    },
                                    {
                                        "text": "`hibiscus = new Flower(\"Hibiscus\", 5, \"red\")`",
                                        "reason": "Python does not use `new` as a keyword."
                                    },
                                    {
                                        "text": "`hibiscus = Flower(self, \"Hibiscus\", 5, \"red\")`",
                                        "reason": "`self` is not defined here, nor do you need to use it when creating a new instance of a class object. "
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "class Flower(object):\n  def __init__(self, name, petal_num, color):\n    self.name = name \n    self.petal_num = petal_num\n    self.color = color  "
                                }
                            },
                            {
                                "id": "5b1da4751d176d7bdd04fa24",
                                "type": "multiple_choice",
                                "prompt": "Identify the base class, derived class, and their relationship from the follow code snippet:",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`Shape` is the base class, `Rectangle` is the derived class, and `Rectangle` inherits from `Shape`. ",
                                        "reason": null
                                    },
                                    {
                                        "text": "`Rectangle` is the base class, `Shape` is the derived class, and `Shape` inherits from `Rectangle`. ",
                                        "reason": "`Rectangle` inherits from `Shape`, not the other way around. "
                                    },
                                    {
                                        "text": "There is no inheritance.  ",
                                        "reason": "There is inheritance , `Rectangle` is the derived class and it inherits from `Shape`. "
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "class Shape(object):\n  def __init__(self, number_of_sides):\n    self.number_of_sides = number_of_sides\n\nclass Rectangle(Shape):\n  def __init__(self, side1, side2, side3, side4):\n    self.side1 = side1\n    self.side1 = side1\n    self.side3 = side3\n    self.side4 = side4"
                                }
                            },
                            {
                                "id": "5b1da4751d176d7bdd04fa29",
                                "type": "multiple_choice",
                                "prompt": "What should the following code print? ",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`[\"walk\", \"run\", \"swim\", \"fly\", \"teleport\"]`",
                                        "reason": "The `SuperHero`'s `modes_of_transport` overrides that of `Human`'s."
                                    },
                                    {
                                        "text": "`[ ]`",
                                        "reason": "Even though there are two `modes_of_transport`, the derived class's method will override the base class's method."
                                    },
                                    {
                                        "text": "`[\"walk\", \"run\", \"swim\"]`",
                                        "reason": "Even though there are two `modes_of_transport`, the derived class's method will override the base class's method."
                                    },
                                    {
                                        "text": "`null`",
                                        "reason": "Even though there are two `modes_of_transport`, the derived class's method will override the base class's method."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "class Human(object):\n  def __init__(self, name):\n    self.name = name \n  \n  def modes_of_transport(self):\n    modes = [\"walk\", \"run\", \"swim\"]\n    print(modes)\n    \nclass SuperHero(Human):\n  def modes_of_transport(self):\n    modes = [\"walk\", \"run\", \"swim\", \"fly\", \"teleport\"]\n    print(modes)\n\nclark = SuperHero(\"Clark\")\nclark.modes_of_transport()"
                                }
                            },
                            {
                                "id": "5b1da4751d176d7bdd04fa2f",
                                "type": "multiple_choice",
                                "prompt": "Identify the error in the following code:",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`Seagull` is inheriting from the `object` class, instead, it should be inheriting from the `Bird` class. ",
                                        "reason": "In `Seagull` we're calling a reference to its base class and providing a `name` argument. The `object` class will not take an argument and thus throw an error. "
                                    },
                                    {
                                        "text": "The class `Seagull` does not need indentations because it is a derived class.",
                                        "reason": "Derived classes still require indentation."
                                    },
                                    {
                                        "text": "`super()` should be `Super()`.",
                                        "reason": "The `super` call is supposed to be lowercased. "
                                    },
                                    {
                                        "text": "`seagull = Seagull()` should be `seagull = Seagull(self)`",
                                        "reason": "You don't need to include `self` when declaring a new instance of a class. "
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "class Bird(object):\n  def __init__(self, name):\n    self.name = name\n    print(\"A %s has feathers\" % self.name)\n\nclass Seagull(object):\n  def __init__(self):\n    print(\"Seagulls can fly\")\n    super().__init__('Seagull')\n\nseagull = Seagull()"
                                }
                            }
                        ]
                    },
                    {
                        "id": "2dc703191f241e2472ba99939d44918e",
                        "description": "Now that you understand Python syntax and have been introduced to some Python best practices, let's apply what you've learned to a real-world application: writing data to a file.",
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "file-inputoutput",
                        "title": "File Input/Output",
                        "time": 40,
                        "type": "lesson",
                        "published_exercise_ids": [
                            "27dab19beea0ca094cec168bf6705896",
                            "be836bfaf0e35bb95614cfee61644b34",
                            "980de3c634ba2ce8beda80e15e1450e9",
                            "4873125f2fdfdd11057de4703950bf11",
                            "9ed8e7e4c3f32336ac7289649f26b62f",
                            "91d372f224c432e81f2f65f24effb397",
                            "d28f6810f100fd1d8ec1a679e297ae07",
                            "69e56fc76ec2b2de9f5b8154a52aae3f",
                            "7a77ddc06694d523322ed07ed0bc2d4b"
                        ],
                        "exercise_ids": [
                            "27dab19beea0ca094cec168bf6705896",
                            "be836bfaf0e35bb95614cfee61644b34",
                            "980de3c634ba2ce8beda80e15e1450e9",
                            "4873125f2fdfdd11057de4703950bf11",
                            "9ed8e7e4c3f32336ac7289649f26b62f",
                            "91d372f224c432e81f2f65f24effb397",
                            "d28f6810f100fd1d8ec1a679e297ae07",
                            "69e56fc76ec2b2de9f5b8154a52aae3f",
                            "7a77ddc06694d523322ed07ed0bc2d4b"
                        ]
                    },
                    {
                        "id": "78e2e5cf2edeea9f93714eea1153ef15",
                        "description": "It's time to build fluency in Python fundamentals. In this next Pro Project, we're going to practice loops in Python so you can hone your skills and feel confident taking them to the real world.\nWhy? Being able to read and pull a file's data and then loop through each line will give you some serious power.  What's next? A spy, DNA, more Python. You got this! ",
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "dna",
                        "title": "DNA Analysis",
                        "time": 93,
                        "type": "project",
                        "standalone": false,
                        "project_information": {
                            "ein_config": {
                                "extensions": {
                                    "python": {
                                        "cmds": [
                                            "python {{ .fileName }}"
                                        ]
                                    },
                                    "py2": {
                                        "cmds": [
                                            "python {{ .fileName }}"
                                        ]
                                    },
                                    "python2": {
                                        "cmds": [
                                            "python {{ .fileName }}"
                                        ]
                                    }
                                },
                                "container_type": "python",
                                "server": "http"
                            },
                            "download_path": null,
                            "objective": "In this project, we'll use many of the concepts you've learned throughout the Python course in order to do some DNA analysis for a crime investigation.\n\nThe scenario:\n\nA spy deleted important files from a computer. There were a few witnesses at the scene of the crime, but no one is sure who exactly the spy was. Three possible suspects were apprehended based on surveillance video. Each suspect had a sample of DNA taken from them. The computer's keyboard was also swabbed for DNA evidence and, luckily, one small DNA sample was successfully retrieved from the computer's keyboard.\n\nGiven the three suspects' DNA and the sample DNA retreived from the keyboard, it's up to you to figure out who the spy is!\n\nThe project should have methods for each of the following:\n\n1. Given a file, read in the DNA for each suspect and save it as a string\n2. Take a DNA string and split it into a list of \u003ca href=\"https://en.wikipedia.org/wiki/DNA_codon_table\" target=\"_blank\"\u003ecodons\u003c/a\u003e\n3. Iterate through a suspect's codon list to see how many of their codons match the sample codons\n4. Pick the right suspect to continue the investigation on\n\nNote: As with professional software development, you should be saving your code very often. As you code, make sure you click the \"Save\" button below to save your code/changes. Otherwise, you run the risk of losing all your code!\n\nLet's begin!\n\nIf you get stuck during this project or would like to see an experienced developer work through it, click \"**Get Unstuck**\" to see a **project walkthrough video**.",
                            "preview_url": null,
                            "thumbnail_url": null,
                            "video_url": "https://www.youtube.com/watch?v=j2YdpkOwha4",
                            "workspace": {
                                "id": "5c3490601d19727d7ef7e470",
                                "slug": "python-ext-prj_dna",
                                "type": "python"
                            },
                            "self_assessments": [
                                {
                                    "heading": "DNA Analysis",
                                    "tasks": [
                                        {
                                            "hint": null,
                                            "task_key": "0_0",
                                            "text": "First, take a look at the list of codons on Line 1 of **dna.py**. It contains the three codons that were retrieved from the computer's keyboard. It will be up to you to match these codons to the suspects' DNA samples."
                                        },
                                        {
                                            "hint": null,
                                            "task_key": "0_1",
                                            "text": "If you're curious, check out the suspects' DNA samples by clicking on the files titled **suspect1.txt**, **suspect2.txt**, or **suspect3.txt**. It's important that you do not edit them, as that could result in a project that functions incorrectly."
                                        },
                                        {
                                            "hint": "```py\nsample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n```",
                                            "task_key": "0_2",
                                            "text": "Let's start off by writing the method that will read a suspect's DNA sample. \n\nOn Line 3, start by adding a method called `read_dna`. It should take one parameter, called `dna_file`."
                                        },
                                        {
                                            "hint": "```py\nsample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n  dna_data = \"\"\n```",
                                            "task_key": "0_3",
                                            "text": "Inside of the method, create a variable called `dna_data` and set it equal to an empty string. This will be the string that will eventually contain a suspect's DNA."
                                        },
                                        {
                                            "hint": "```py\nsample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n  dna_data = \"\"\n  with open(dna_file, \"r\") as f:\n```\n\nYou can use \u003ca href=\"https://www.codecademy.com/en/courses/learn-python/lessons/file-inputoutput/exercises/the-with-and-as-keywords\" target=\"_blank\"\u003ethis exercise\u003c/a\u003e in case you need to review `with` and `as`.",
                                            "task_key": "0_4",
                                            "text": "On the next line, still inside of the method, use `with` to open `dna_file` in read-only mode, as `f`. We're using `f` as short for \"file.\" Using \"file\" would not be allowed since it's a keyword in Python."
                                        },
                                        {
                                            "hint": "```py\nsample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n  dna_data = \"\"\n  with open(dna_file, \"r\") as f:\n    for line in f:\n```",
                                            "task_key": "0_5",
                                            "text": "Now that the file is open, add a `for` loop inside the `with` block. The loop should iterate through each `line` in `f`."
                                        },
                                        {
                                            "hint": "```py\nsample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n  dna_data = \"\"\n  with open(dna_file, \"r\") as f:\n    for line in f:\n      dna_data += line\n```",
                                            "task_key": "0_6",
                                            "text": "On the next line, inside of the `for` loop, add `line` to the empty `dna_data` using `+=`."
                                        },
                                        {
                                            "hint": "```py\nsample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n  dna_data = \"\"\n  with open(dna_file, \"r\") as f:\n    for line in f:\n      dna_data += line\n  return dna_data\n```",
                                            "task_key": "0_7",
                                            "text": "Finally, to complete the method, return `dna_data` on the next line. This line of code should align with the first line of indented code in the method (which means it's not included in the `with` block)."
                                        },
                                        {
                                            "hint": null,
                                            "task_key": "0_8",
                                            "text": "Great! When used, this method will take in a file, read it, add the file's contents to an empty string, and return the updated string. This will come in handy in catching the spy."
                                        },
                                        {
                                            "hint": "Use the hint from Step 3 to help you.",
                                            "task_key": "0_9",
                                            "text": "Next, we'll need a method that will take a string, create a list of codons from that string, and return the list. This will make the DNA analysis much easier later.\n\nAdd a new method called `dna_codons`. It should take one parameter called `dna`."
                                        },
                                        {
                                            "hint": "```py\nsample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n  # Code\n\ndef dna_codons(dna):\n  codons = []\n```\n\nIn the hint above, `# Code` simply indicates that the code has been abbreviated to avoid a lengthy hint. Actual code should not be removed or replaced.",
                                            "task_key": "0_10",
                                            "text": "We'll need an empty list to add the codons to. On the next line, inside the method, create an empty list called `codons`."
                                        },
                                        {
                                            "hint": "```py\nsample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n  # Code\n\ndef dna_codons(dna):\n  codons = []\n  for i in range(0, len(dna), 3):\n```",
                                            "task_key": "0_11",
                                            "text": "If you previewed a suspect's DNA sample (for example, in **suspect1.txt**), you should have seen that the DNA sample contains a lot of \u003ca href=\"https://en.wikipedia.org/wiki/DNA#Base_pairing\" target=\"_blank\"\u003eletters (DNA base pairs)\u003c/a\u003e.\n\n\u003ca href=\"http://dictionary.reference.com/browse/codon\" target=\"_blank\"\u003eCodons\u003c/a\u003e are 3-letter-long units of genetic code. We'll have to iterate through a suspect's DNA string and chop the string into codons (3 letter strings).\n\nOn the next line, add a `for` loop. The loop should have a `range` from `0` to the length of `dna`. It should also iterate in increments of `3`.\n\n\u003ca href=\"https://docs.python.org/2/library/functions.html#range\" target=\"_blank\"\u003eThis documentation\u003c/a\u003e shows to specify increments with `range`."
                                        },
                                        {
                                            "hint": "```py\nsample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n  # Code\n\ndef dna_codons(dna):\n  codons = []\n  for i in range(0, len(dna), 3):\n    if (i + 3) \u003c len(dna):\n```",
                                            "task_key": "0_12",
                                            "text": "Next, we'll want to make sure that the iterator `i` doesn't exceed the length of `dna`, so let's check for that on the next line.\n\nInside the `for` loop, add a line that checks if the iterator, when incremented by 3, exceeds the length of `dna`."
                                        },
                                        {
                                            "hint": "```py\nsample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n  # Code\n\ndef dna_codons(dna):\n  codons = []\n  for i in range(0, len(dna), 3):\n    if (i + 3) \u003c len(dna):\n      codons.append(dna[i:i + 3])\n```\n\nYou might be asking why `i + 3` is included in `dna[i:i + 3]`. Consider that `i` starts at `0`. This means that we would add `dna[0:3]`, which adds only the first 3 characters of a string. If you need some review, check out the \u003ca href=\"https://www.codecademy.com/en/courses/learn-python/lessons/python-lists-and-dictionaries/exercises/list-slicing\" target=\"_blank\"\u003elist slicing exercise\u003c/a\u003e.",
                                            "task_key": "0_13",
                                            "text": "The line of code that you just wrote will make sure that you don't add a string to the codon list that isn't at least 3 letters long.\n\nNow, we'll want to add the codon into the `codon` list that is currently empty. \n\nOn the next line, add to the list using the `.append()` method. Since the iterator `i` starts at 0, we'll be adding the first three characters only."
                                        },
                                        {
                                            "hint": "```py\nsample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n  # Code\n\ndef dna_codons(dna):\n  codons = []\n  for i in range(0, len(dna), 3):\n    if (i+3) \u003c len(dna):\n      codons.append(dna[i:i+3])     \n  return codons\n```",
                                            "task_key": "0_14",
                                            "text": "Great! Now that the codon list contains all the codons we need, we'll need to return the list.\n\nOn the next line, return `codons`. This line of code will have to be written at the level of indentation that aligns with the `for` loop."
                                        },
                                        {
                                            "hint": "Use the hint from Step 3 to help you.",
                                            "task_key": "0_15",
                                            "text": "Perfect - you just added a method that will iterate through a string, slice it into smaller strings that are 3 letters long, and add them to a list. This functionality will help us match the sample to a suspect's DNA later.\n\nThe next step is to create a method that will iterate through both the sample and a suspect's DNA. The method should count the number of times a codon in the sample matches a codon in the suspect's DNA.\n\nOn the next line, add a method called `match_dna`. It should take one parameter called `dna`."
                                        },
                                        {
                                            "hint": "```py\nsample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n  # Code\n\ndef dna_codons(dna):\n  # Code\n\ndef match_dna(dna):\n  matches = 0\n```",
                                            "task_key": "0_16",
                                            "text": "We'll need a way to count the number of times a codon from the sample matches a codon from a suspect's DNA. \n\nInside the method, add a variable called `matches` and set it equal to zero. We will increment this variable by 1 every time there is a match."
                                        },
                                        {
                                            "hint": "```py\nsample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n  # Code\n\ndef dna_codons(dna):\n  # Code\n\ndef match_dna(dna):\n  matches = 0\n  for codon in dna:\n```",
                                            "task_key": "0_17",
                                            "text": "The parameter that this method takes is a list, so we'll have to start iterating through the list first to find matches.\n\nOn the next line, add a `for` loop that iterates through the `dna` list. Call the iterator `codon`."
                                        },
                                        {
                                            "hint": "```py\nsample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n  # Code\n\ndef dna_codons(dna):\n  # Code\n\ndef match_dna(dna):\n  matches = 0\n  for codon in dna:\n    if codon in sample:\n```",
                                            "task_key": "0_18",
                                            "text": "As we iterate through the codons in the suspect DNA's list, we'll have to check if the codon also exists in the sample.\n\nInside of the `for` loop, add an `if` statement that checks if the codon is also in the sample list."
                                        },
                                        {
                                            "hint": "```py\nsample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n  # Code\n\ndef dna_codons(dna):\n  # Code\n\ndef match_dna(dna):\n  matches = 0\n  for codon in dna:\n    if codon in sample:\n      matches += 1 \n```",
                                            "task_key": "0_19",
                                            "text": "If a codon in the DNA matches a codon in the sample, then we've got a single match! We'll increment the `matches` variable to reflect that.\n\nInside the `if` statement, increment `matches` by `1` using the `+=` operator."
                                        },
                                        {
                                            "hint": "```py\nsample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n  # Code\n\ndef dna_codons(dna):\n  # Code\n\ndef match_dna(dna):\n  matches = 0\n  for codon in dna:\n    if codon in sample:\n      matches += 1\n  return matches\n```",
                                            "task_key": "0_20",
                                            "text": "Since the `match_dna()` method counts matches, it would be useful if it returned the number of matches as well.\n\nAs the last line of this method, return the `matches` variable."
                                        },
                                        {
                                            "hint": "Use the hint from Step 3 to help you.",
                                            "task_key": "0_21",
                                            "text": "Fantastic! You've added a method that automates a task that would normally take a long time to manually complete. Instead of having to manually match codons for three different suspects, this method does it for us and counts the matches.\n\nWe have most of the methods we need, but let's add one more that will determine if a suspect is the criminal.\n\nNext, add a method called `is_criminal` that takes a parameter called `dna_sample`."
                                        },
                                        {
                                            "hint": "```py\nsample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n  # Code\n\ndef dna_codons(dna):\n  # Code\n\ndef match_dna(dna):\n  # Code\n\ndef is_criminal(dna_sample):\n  dna_data = read_dna(dna_sample)\n```",
                                            "task_key": "0_22",
                                            "text": "The `is_criminal()` method should use the other methods we've created to determine who the criminal is.\n\nThe first thing the method will do is read in DNA samples and create a string to hold them.\n\nInside the method, create a variable called `dna_data`. Set it equal to the result of calling the `read_dna()` method on the `dna_sample` parameter."
                                        },
                                        {
                                            "hint": "```py\nsample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n  # Code\n\ndef dna_codons(dna):\n  # Code\n\ndef match_dna(dna):\n  # Code\n\ndef is_criminal(dna_sample):\n  dna_data = read_dna(dna_sample)\n  codons = dna_codons(dna_data)\n```",
                                            "task_key": "0_23",
                                            "text": "Now that we have the DNA data in a string, it's time to call the `dna_codons()` method to chop the string into a list of codons.\n\nOn the next line, create a variable called `codons`. Set it equal to the result of calling the `dna_codons()` method with `dna_data` as the argument."
                                        },
                                        {
                                            "hint": "```py\nsample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n  # Code\n\ndef dna_codons(dna):\n  # Code\n\ndef match_dna(dna):\n  # Code\n\ndef is_criminal(dna_sample):\n  dna_data = read_dna(dna_sample)\n  codons = dna_codons(dna_data)\n  num_matches = match_dna(codons)\n```",
                                            "task_key": "0_24",
                                            "text": "Now that we have the codon list, it's time to match the sample with the DNA.\n\nOn the next line, create a variable called `num_matches`. Set it equal to the result of calling the `match_dna()` method  with `codons` as the argument."
                                        },
                                        {
                                            "hint": "```py\nsample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n  # Code\n\ndef dna_codons(dna):\n  # Code\n\ndef match_dna(dna):\n  # Code\n\ndef is_criminal(dna_sample):\n  dna_data = read_dna(dna_sample)\n  codons = dna_codons(dna_data)\n  num_matches = match_dna(codons)\n\n  if num_matches \u003e= 3:\n```",
                                            "task_key": "0_25",
                                            "text": "To complete the method, we will have to add in statements that check to see if the number of matches is significant.\n\nNext, add an `if` statement that checks if the number of matches is greater than or equal to three."
                                        },
                                        {
                                            "hint": "```py\nsample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n  # Code\n\ndef dna_codons(dna):\n  # Code\n\ndef match_dna(dna):\n  # Code\n\ndef is_criminal(dna_sample):\n  dna_data = read_dna(dna_sample)\n  codons = dna_codons(dna_data)\n  num_matches = match_dna(codons)\n\n  if num_matches \u003e= 3:\n    print \"# of codon matches: %s. DNA profile matches. Continue investigation.\" % num_matches\n```",
                                            "task_key": "0_26",
                                            "text": "If the number of matches is greater than or equal to three, print out the number of matches using string formatting, as well as a message stating that the investigation should continue."
                                        },
                                        {
                                            "hint": "Use the hint from Step 27 to help you.",
                                            "task_key": "0_27",
                                            "text": "Otherwise, the suspect can be set free.\n\nAdd an `else` block that prints the number of matches using string formatting, as well as a message stating the suspect can be freed."
                                        },
                                        {
                                            "hint": "```py\nsample = ['GTA','GGG','CAC']\n\ndef read_dna(dna_file):\n  # Code\n\ndef dna_codons(dna):\n  # Code\n\ndef match_dna(dna):\n  # Code\n\ndef is_criminal(dna_sample):\n  # Code \n\nis_criminal('suspect1.txt')\n# Suspect 2 here\n# Suspect 3 here\n```",
                                            "task_key": "0_28",
                                            "text": "That's it! This method will do all the hard work of reading a DNA sample from a suspect, comparing it to a DNA sample from the crime scene, and letting the user know whether the suspect is a criminal.\n\nFor all of this to work, we actually have to call the method `is_criminal()` on the `.txt` files you previewed earlier.\n\nOn the next three lines, outside of any method, call the `is_criminal()` method separately on the three `.txt` files."
                                        },
                                        {
                                            "hint": "If you completed the project correctly, the spy was Suspect 2, with 6 codon matches.",
                                            "task_key": "0_29",
                                            "text": "Ready to find out who the spy is?\n\nIn the terminal, type the following command and hit \"Enter\" on your keyboard:\n\n```bash\npython dna.py\n```\n\nYou should see the analysis run and find out who the spy is!"
                                        }
                                    ]
                                }
                            ],
                            "components": [
                                {
                                    "id": "5c3490601d19727d7ef7e46e",
                                    "type": "PersistentCodeEditor",
                                    "files": [
                                        "dna.py",
                                        "suspect1.txt",
                                        "suspect2.txt",
                                        "suspect3.txt"
                                    ],
                                    "navigator_disabled": true,
                                    "no_run_button": null
                                },
                                {
                                    "id": "5c3490601d19727d7ef7e46f",
                                    "type": "Terminal",
                                    "shell": "bash",
                                    "prevent_checkpoint_run": null,
                                    "fake_responses": []
                                }
                            ]
                        }
                    },
                    {
                        "id": "7217d539f1437045df9cadd5100631b4",
                        "description": null,
                        "is_deprecated": false,
                        "is_free": null,
                        "published": true,
                        "slug": "learn-python-python-unit-12",
                        "title": "File Input and Output",
                        "time": 5,
                        "type": "quiz",
                        "assessment_ids": [
                            "5b1da4751d176d7bdd04fa35",
                            "5b1da4751d176d7bdd04fa3a",
                            "5b1da4751d176d7bdd04fa3f",
                            "5b1da4751d176d7bdd04fa45",
                            "5b1da4751d176d7bdd04fa48"
                        ],
                        "assessments": [
                            {
                                "id": "5b1da4751d176d7bdd04fa35",
                                "type": "multiple_choice",
                                "prompt": "What does the \"I/O\" stands for in File I/O?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "Input/Output",
                                        "reason": "Correct! File Input/Output is about reading from file and writing to file."
                                    },
                                    {
                                        "text": "Indian Ocean",
                                        "reason": "Internet domain **.io** is assigned to the British Indian Ocean Territory. File I/O, however, stands for Input/Output."
                                    },
                                    {
                                        "text": "Interest Only",
                                        "reason": "Interest only (IO) strips are the interest portion of mortgage, Treasury or bond payments. File I/O, however, stands for Input/Output."
                                    },
                                    {
                                        "text": "Inside Out",
                                        "reason": "*Inside Out* (2015) is a Pixar movie!"
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": null
                            },
                            {
                                "id": "5b1da4751d176d7bdd04fa3a",
                                "type": "multiple_choice",
                                "prompt": "Which is the correct code that opens **essay.txt** in \"write\" mode and stores the result of this operation in a file object named `f`.",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "```py\nf = open(\"essay.txt\", \"w\")\n```",
                                        "reason": "Correct!"
                                    },
                                    {
                                        "text": "```py\nf = open(\"essay.txt\", \"r\")\n```",
                                        "reason": "Oops, it should open the text file in \"write\" mode rather than \"read\" mode."
                                    },
                                    {
                                        "text": "```py\nf.open()\n```",
                                        "reason": "Oops, the `open()` functions needs two arguments: the file name and the mode."
                                    },
                                    {
                                        "text": "```py\nf = [\"essay.txt\", \"w\"]\n```",
                                        "reason": "Oops, this is creating a list called `f`."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": null
                            },
                            {
                                "id": "5b1da4751d176d7bdd04fa3f",
                                "type": "multiple_choice",
                                "prompt": "Suppose we have a **data.txt** file and we want to read three lines from it. What is missing from this program?",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "```py\nmy_file.close()\n```",
                                        "reason": "Correct! Make sure to `close()` your file when you're done with it."
                                    },
                                    {
                                        "text": "`r+` instead of `r`.",
                                        "reason": "Passing `\"r+\"` as a second argument will allow you to read and write to the file, but we are not looking to write to **data.txt**. "
                                    },
                                    {
                                        "text": "Nothing is missing.",
                                        "reason": "The `close()` is missing."
                                    },
                                    {
                                        "text": "```py\nf.close()\n```",
                                        "reason": "Oops, `f` is not the correct name."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "my_file = open(\"data.txt\", \"r\")\n\nprint my_file.readline()\nprint my_file.readline()\nprint my_file.readline()\n\n# what is missing?"
                                }
                            },
                            {
                                "id": "5b1da4751d176d7bdd04fa45",
                                "type": "multiple_choice",
                                "prompt": "During the I/O process, data is *buffered* - this means that it is held in a temporary location before being written to the file.",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "True",
                                        "reason": "Correct! Data buffer is a region of a physical memory storage used to temporarily store data."
                                    },
                                    {
                                        "text": "False",
                                        "reason": "Oops, that is a true statement."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": null
                            },
                            {
                                "id": "5b1da4751d176d7bdd04fa48",
                                "type": "multiple_choice",
                                "prompt": "Fill in the Blanks: The code below should write two strings to the file **resolution.txt**.",
                                "correct_answer": 0,
                                "answers": [
                                    {
                                        "text": "`as my_file`",
                                        "reason": "Correct!"
                                    },
                                    {
                                        "text": "`as file`",
                                        "reason": "Oops, the file object name needs to match."
                                    },
                                    {
                                        "text": "`my_file`",
                                        "reason": "Oops, the `as` keyword is needed."
                                    },
                                    {
                                        "text": "Nothing should go in the blanks.",
                                        "reason": "Oops, the `as` keyword is needed and the file object name also."
                                    }
                                ],
                                "image": null,
                                "latex_block": null,
                                "code_snippet": {
                                    "language": "python",
                                    "text": "with open(\"resolution.txt\", \"w\") __ _______:\n\n  my_file.write(\"1. cook more \")\n  my_file.write(\"2. learn a new language \")\n"
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    }
}